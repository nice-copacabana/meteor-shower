// Generated by Qoder AI (Model: claude-sonnet-4-20250514) - 2025-10-14
// Task: 实现Cloud Hub模板上传API

import { Router, Request, Response } from 'express';
import { FileStorage, Template } from '../storage/file-storage.js';
import chalk from 'chalk';

const router = Router();
let storage: FileStorage;

/**
 * 初始化路由
 * @param storageInstance 存储实例
 */
export function initializeTemplatesRouter(storageInstance: FileStorage): Router {
  storage = storageInstance;
  return router;
}

/**
 * 获取模板列表
 * GET /api/v1/templates
 * 
 * 查询参数:
 * - tool: 工具类型过滤
 * - tags: 标签过滤（逗号分隔）
 * - author: 作者过滤
 * - search: 关键词搜索
 * - page: 页码（默认1）
 * - limit: 每页数量（默认20）
 */
router.get('/', async (req: Request, res: Response) => {
  try {
    const { tool, tags, author, search, page = '1', limit = '20' } = req.query;

    // 构建过滤条件
    const filter: any = {};
    if (tool) filter.tool = tool as string;
    if (tags) filter.tags = (tags as string).split(',');
    if (author) filter.author = author as string;
    if (search) filter.search = search as string;

    // 获取模板列表
    const allTemplates = await storage.listTemplates(filter);

    // 分页
    const pageNum = parseInt(page as string);
    const limitNum = parseInt(limit as string);
    const startIndex = (pageNum - 1) * limitNum;
    const endIndex = startIndex + limitNum;
    const paginatedTemplates = allTemplates.slice(startIndex, endIndex);

    res.json({
      success: true,
      data: paginatedTemplates,
      pagination: {
        page: pageNum,
        limit: limitNum,
        total: allTemplates.length,
        pages: Math.ceil(allTemplates.length / limitNum)
      }
    });

    console.log(chalk.gray(`📋 获取模板列表: ${paginatedTemplates.length}/${allTemplates.length}`));
  } catch (error: any) {
    console.error(chalk.red('❌ 获取模板列表失败:'), error.message);
    res.status(500).json({
      success: false,
      error: '服务器内部错误',
      message: error.message
    });
  }
});

/**
 * 获取单个模板
 * GET /api/v1/templates/:id
 */
router.get('/:id', async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const template = await storage.getTemplate(id);

    if (!template) {
      return res.status(404).json({
        success: false,
        error: '模板不存在'
      });
    }

    // 增加下载计数
    await storage.incrementDownloads(id);

    res.json({
      success: true,
      data: template
    });

    console.log(chalk.gray(`📥 下载模板: ${id}`));
  } catch (error: any) {
    console.error(chalk.red('❌ 获取模板失败:'), error.message);
    res.status(500).json({
      success: false,
      error: '服务器内部错误',
      message: error.message
    });
  }
});

/**
 * 上传模板
 * POST /api/v1/templates
 * 
 * 请求体:
 * {
 *   id: string,
 *   name: string,
 *   version: string,
 *   description?: string,
 *   author?: string,
 *   targets: string[],
 *   variables: object,
 *   configs?: any[],
 *   tags?: string[]
 * }
 */
router.post('/', async (req: Request, res: Response) => {
  try {
    const template: Template = req.body;

    // 验证必填字段
    if (!template.id || !template.name || !template.targets || !template.version) {
      return res.status(400).json({
        success: false,
        error: '缺少必填字段',
        required: ['id', 'name', 'version', 'targets']
      });
    }

    // 验证 targets 是数组
    if (!Array.isArray(template.targets) || template.targets.length === 0) {
      return res.status(400).json({
        success: false,
        error: 'targets 必须是非空数组'
      });
    }

    // 保存模板
    const savedTemplate = await storage.saveTemplate(template);

    res.status(201).json({
      success: true,
      data: savedTemplate,
      message: '模板上传成功'
    });

    console.log(chalk.green(`✅ 模板上传成功: ${template.id} (${template.name})`));
  } catch (error: any) {
    console.error(chalk.red('❌ 上传模板失败:'), error.message);
    res.status(500).json({
      success: false,
      error: '服务器内部错误',
      message: error.message
    });
  }
});

/**
 * 更新模板
 * PUT /api/v1/templates/:id
 */
router.put('/:id', async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const updates: Partial<Template> = req.body;

    // 检查模板是否存在
    const existingTemplate = await storage.getTemplate(id);
    if (!existingTemplate) {
      return res.status(404).json({
        success: false,
        error: '模板不存在'
      });
    }

    // 合并更新
    const updatedTemplate: Template = {
      ...existingTemplate,
      ...updates,
      id // 确保ID不变
    };

    const savedTemplate = await storage.saveTemplate(updatedTemplate);

    res.json({
      success: true,
      data: savedTemplate,
      message: '模板更新成功'
    });

    console.log(chalk.green(`✅ 模板更新成功: ${id}`));
  } catch (error: any) {
    console.error(chalk.red('❌ 更新模板失败:'), error.message);
    res.status(500).json({
      success: false,
      error: '服务器内部错误',
      message: error.message
    });
  }
});

/**
 * 删除模板
 * DELETE /api/v1/templates/:id
 */
router.delete('/:id', async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const deleted = await storage.deleteTemplate(id);

    if (!deleted) {
      return res.status(404).json({
        success: false,
        error: '模板不存在'
      });
    }

    res.json({
      success: true,
      message: '模板删除成功'
    });

    console.log(chalk.yellow(`🗑️  模板已删除: ${id}`));
  } catch (error: any) {
    console.error(chalk.red('❌ 删除模板失败:'), error.message);
    res.status(500).json({
      success: false,
      error: '服务器内部错误',
      message: error.message
    });
  }
});

/**
 * 评分模板
 * POST /api/v1/templates/:id/rating
 * 
 * 请求体:
 * {
 *   rating: number (0-5)
 * }
 */
router.post('/:id/rating', async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const { rating } = req.body;

    if (typeof rating !== 'number' || rating < 0 || rating > 5) {
      return res.status(400).json({
        success: false,
        error: '评分必须是 0-5 之间的数字'
      });
    }

    await storage.updateRating(id, rating);

    res.json({
      success: true,
      message: '评分成功'
    });

    console.log(chalk.gray(`⭐ 模板评分: ${id} = ${rating}`));
  } catch (error: any) {
    console.error(chalk.red('❌ 评分失败:'), error.message);
    res.status(500).json({
      success: false,
      error: '服务器内部错误',
      message: error.message
    });
  }
});

/**
 * 获取统计信息
 * GET /api/v1/templates/stats
 */
router.get('/stats/summary', async (req: Request, res: Response) => {
  try {
    const stats = await storage.getStats();

    res.json({
      success: true,
      data: stats
    });

    console.log(chalk.gray('📊 获取统计信息'));
  } catch (error: any) {
    console.error(chalk.red('❌ 获取统计信息失败:'), error.message);
    res.status(500).json({
      success: false,
      error: '服务器内部错误',
      message: error.message
    });
  }
});

export default router;

