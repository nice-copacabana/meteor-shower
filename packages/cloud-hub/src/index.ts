// Generated by Qoder AI (Model: claude-sonnet-4-20250514) - 2025-10-14
// Task: 集成文件存储和完整API，实现Cloud Hub模板下载功能

/**
 * Cloud Hub - 云端模板共享服务
 *
 * 功能特性：
 * - 模板上传和存储
 * - 模板检索和过滤
 * - 模板评分和分享
 * - RESTful API 接口
 * - 文件系统持久化
 */

import express from 'express';               // Express.js Web框架
import cors from 'cors';                     // 跨域资源共享
import chalk from 'chalk';                   // 终端颜色输出
import { FileStorage } from './storage/file-storage.js';
import templatesRouter, { initializeTemplatesRouter } from './api/templates.js';

// 创建Express应用实例
const app = express();
const PORT = process.env.PORT || 3000;
const DATA_DIR = process.env.DATA_DIR || '.meteor-cloud-data';

// 初始化文件存储
const storage = new FileStorage(DATA_DIR);

// 中间件配置
app.use(cors());                            // 启用CORS跨域支持
app.use(express.json());                    // 解析JSON请求体

// 请求日志中间件
app.use((req, res, next) => {
  const timestamp = new Date().toISOString();
  console.log(chalk.gray(`[${timestamp}] ${req.method} ${req.path}`));
  next();
});

// ========== API路由定义 ==========

/**
 * 健康检查端点
 * GET /health
 *
 * 返回服务健康状态和时间戳
 * 用于监控和负载均衡健康检查
 */
app.get('/health', (req, res) => {
  res.json({ 
    status: 'ok', 
    timestamp: new Date().toISOString(),
    version: '1.0.0',
    storage: 'file-system'
  });
});

/**
 * API信息端点
 * GET /api/v1
 */
app.get('/api/v1', (req, res) => {
  res.json({
    name: 'Meteor Shower Cloud Hub API',
    version: '1.0.0',
    endpoints: {
      templates: '/api/v1/templates',
      health: '/health',
      stats: '/api/v1/templates/stats/summary'
    },
    documentation: 'https://meteor-shower.dev/docs/api'
  });
});

// 模板相关路由
app.use('/api/v1/templates', initializeTemplatesRouter(storage));

/**
 * 404 处理
 */
app.use((req, res) => {
  res.status(404).json({
    success: false,
    error: '未找到请求的资源',
    path: req.path
  });
});

/**
 * 错误处理中间件
 */
app.use((err: any, req: express.Request, res: express.Response, next: express.NextFunction) => {
  console.error(chalk.red('❌ 服务器错误:'), err);
  res.status(500).json({
    success: false,
    error: '服务器内部错误',
    message: process.env.NODE_ENV === 'development' ? err.message : undefined
  });
});

// ========== 服务启动 ==========

/**
 * 启动HTTP服务器
 * 监听指定端口，启动Cloud Hub服务
 */
async function startServer() {
  try {
    // 初始化存储
    await storage.initialize();
    
    // 启动HTTP服务器
    app.listen(PORT, () => {
      console.log(chalk.green('\n🚀 Cloud Hub 服务启动成功'));
      console.log(chalk.gray(`━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━`));
      console.log(chalk.cyan(`  服务地址: http://localhost:${PORT}`));
      console.log(chalk.gray(`  健康检查: http://localhost:${PORT}/health`));
      console.log(chalk.gray(`  API 端点: http://localhost:${PORT}/api/v1/templates`));
      console.log(chalk.gray(`  数据目录: ${DATA_DIR}`));
      console.log(chalk.gray(`━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n`));
    });
  } catch (error) {
    console.error(chalk.red('❌ 服务启动失败:'), error);
    process.exit(1);
  }
}

// 优雅关闭
process.on('SIGINT', async () => {
  console.log(chalk.yellow('\n\n⚠️  收到关闭信号，正在优雅退出...'));
  process.exit(0);
});

// 启动服务
startServer();
