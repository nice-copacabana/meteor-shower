// Generated by Qoder AI (Model: claude-sonnet-4-20250514) - 2025-10-14
// Task: 实现Cloud Hub文件系统持久化

import fs from 'fs/promises';
import path from 'path';
import chalk from 'chalk';

/**
 * 模板数据结构
 */
export interface Template {
  id: string;
  name: string;
  version: string;
  description?: string;
  author?: string;
  targets: string[];
  variables: Record<string, any>;
  configs?: any[];
  tags?: string[];
  createdAt: string;
  updatedAt?: string;
  downloads?: number;
  rating?: number;
}

/**
 * 存储配置
 */
export interface StorageConfig {
  dataDir: string;           // 数据存储目录
  templatesFile: string;     // 模板索引文件
  templatesDataDir: string;  // 模板详细数据目录
}

/**
 * 文件系统存储类
 * 提供基于文件系统的持久化存储功能
 */
export class FileStorage {
  private config: StorageConfig;
  private templates: Map<string, Template> = new Map();
  private initialized: boolean = false;

  constructor(dataDir: string = '.meteor-cloud-data') {
    this.config = {
      dataDir: path.resolve(dataDir),
      templatesFile: path.resolve(dataDir, 'templates-index.json'),
      templatesDataDir: path.resolve(dataDir, 'templates')
    };
  }

  /**
   * 初始化存储
   * 创建必要的目录结构并加载现有数据
   */
  async initialize(): Promise<void> {
    if (this.initialized) {
      return;
    }

    try {
      // 创建目录结构
      await fs.mkdir(this.config.dataDir, { recursive: true });
      await fs.mkdir(this.config.templatesDataDir, { recursive: true });

      // 加载现有模板索引
      await this.loadTemplatesIndex();

      this.initialized = true;
      console.log(chalk.green('✅ 文件存储初始化成功'));
      console.log(chalk.gray(`  数据目录: ${this.config.dataDir}`));
      console.log(chalk.gray(`  已加载模板: ${this.templates.size} 个`));
    } catch (error: any) {
      console.error(chalk.red('❌ 存储初始化失败:'), error.message);
      throw error;
    }
  }

  /**
   * 加载模板索引
   */
  private async loadTemplatesIndex(): Promise<void> {
    try {
      const indexContent = await fs.readFile(this.config.templatesFile, 'utf-8');
      const templatesArray: Template[] = JSON.parse(indexContent);
      
      this.templates.clear();
      templatesArray.forEach(template => {
        this.templates.set(template.id, template);
      });
    } catch (error: any) {
      if (error.code === 'ENOENT') {
        // 文件不存在，创建空索引
        await this.saveTemplatesIndex();
      } else {
        throw error;
      }
    }
  }

  /**
   * 保存模板索引
   */
  private async saveTemplatesIndex(): Promise<void> {
    const templatesArray = Array.from(this.templates.values());
    await fs.writeFile(
      this.config.templatesFile,
      JSON.stringify(templatesArray, null, 2),
      'utf-8'
    );
  }

  /**
   * 保存模板
   * @param template 模板对象
   */
  async saveTemplate(template: Template): Promise<Template> {
    this.ensureInitialized();

    const now = new Date().toISOString();
    const existingTemplate = this.templates.get(template.id);

    const savedTemplate: Template = {
      ...template,
      createdAt: existingTemplate?.createdAt || now,
      updatedAt: now,
      downloads: existingTemplate?.downloads || 0,
      rating: existingTemplate?.rating || 0
    };

    // 保存到内存索引
    this.templates.set(template.id, savedTemplate);

    // 保存模板详细数据到单独文件
    const templateFilePath = path.join(
      this.config.templatesDataDir,
      `${template.id}.json`
    );
    await fs.writeFile(
      templateFilePath,
      JSON.stringify(savedTemplate, null, 2),
      'utf-8'
    );

    // 更新索引文件
    await this.saveTemplatesIndex();

    console.log(chalk.gray(`  💾 模板已保存: ${template.id}`));
    return savedTemplate;
  }

  /**
   * 获取模板
   * @param id 模板ID
   */
  async getTemplate(id: string): Promise<Template | null> {
    this.ensureInitialized();

    const template = this.templates.get(id);
    if (!template) {
      return null;
    }

    // 从文件加载完整数据
    try {
      const templateFilePath = path.join(
        this.config.templatesDataDir,
        `${id}.json`
      );
      const content = await fs.readFile(templateFilePath, 'utf-8');
      return JSON.parse(content);
    } catch (error) {
      console.warn(chalk.yellow(`⚠️  无法加载模板文件: ${id}`));
      return template; // 返回索引中的基本信息
    }
  }

  /**
   * 获取所有模板
   * @param filter 过滤条件
   */
  async listTemplates(filter?: {
    tool?: string;
    tags?: string[];
    author?: string;
    search?: string;
  }): Promise<Template[]> {
    this.ensureInitialized();

    let templates = Array.from(this.templates.values());

    if (filter) {
      // 按工具过滤
      if (filter.tool) {
        templates = templates.filter(t => 
          t.targets.includes(filter.tool!)
        );
      }

      // 按标签过滤
      if (filter.tags && filter.tags.length > 0) {
        templates = templates.filter(t => 
          t.tags && filter.tags!.some(tag => t.tags!.includes(tag))
        );
      }

      // 按作者过滤
      if (filter.author) {
        templates = templates.filter(t => 
          t.author === filter.author
        );
      }

      // 按关键词搜索
      if (filter.search) {
        const searchLower = filter.search.toLowerCase();
        templates = templates.filter(t => 
          t.name.toLowerCase().includes(searchLower) ||
          (t.description && t.description.toLowerCase().includes(searchLower))
        );
      }
    }

    return templates;
  }

  /**
   * 删除模板
   * @param id 模板ID
   */
  async deleteTemplate(id: string): Promise<boolean> {
    this.ensureInitialized();

    if (!this.templates.has(id)) {
      return false;
    }

    // 从内存删除
    this.templates.delete(id);

    // 删除文件
    const templateFilePath = path.join(
      this.config.templatesDataDir,
      `${id}.json`
    );
    try {
      await fs.unlink(templateFilePath);
    } catch (error) {
      console.warn(chalk.yellow(`⚠️  无法删除模板文件: ${id}`));
    }

    // 更新索引
    await this.saveTemplatesIndex();

    console.log(chalk.gray(`  🗑️  模板已删除: ${id}`));
    return true;
  }

  /**
   * 增加下载计数
   * @param id 模板ID
   */
  async incrementDownloads(id: string): Promise<void> {
    this.ensureInitialized();

    const template = this.templates.get(id);
    if (template) {
      template.downloads = (template.downloads || 0) + 1;
      template.updatedAt = new Date().toISOString();
      await this.saveTemplate(template);
    }
  }

  /**
   * 更新评分
   * @param id 模板ID
   * @param rating 评分 (0-5)
   */
  async updateRating(id: string, rating: number): Promise<void> {
    this.ensureInitialized();

    if (rating < 0 || rating > 5) {
      throw new Error('评分必须在 0-5 之间');
    }

    const template = this.templates.get(id);
    if (template) {
      template.rating = rating;
      template.updatedAt = new Date().toISOString();
      await this.saveTemplate(template);
    }
  }

  /**
   * 获取统计信息
   */
  async getStats(): Promise<{
    totalTemplates: number;
    totalDownloads: number;
    averageRating: number;
    toolsCount: Record<string, number>;
  }> {
    this.ensureInitialized();

    const templates = Array.from(this.templates.values());
    const totalDownloads = templates.reduce((sum, t) => sum + (t.downloads || 0), 0);
    const ratedTemplates = templates.filter(t => t.rating !== undefined);
    const averageRating = ratedTemplates.length > 0
      ? ratedTemplates.reduce((sum, t) => sum + (t.rating || 0), 0) / ratedTemplates.length
      : 0;

    // 统计各工具的模板数量
    const toolsCount: Record<string, number> = {};
    templates.forEach(template => {
      template.targets.forEach(tool => {
        toolsCount[tool] = (toolsCount[tool] || 0) + 1;
      });
    });

    return {
      totalTemplates: templates.length,
      totalDownloads,
      averageRating,
      toolsCount
    };
  }

  /**
   * 清空所有数据（谨慎使用）
   */
  async clearAll(): Promise<void> {
    this.ensureInitialized();

    this.templates.clear();
    await this.saveTemplatesIndex();

    // 删除所有模板文件
    const files = await fs.readdir(this.config.templatesDataDir);
    for (const file of files) {
      if (file.endsWith('.json')) {
        await fs.unlink(path.join(this.config.templatesDataDir, file));
      }
    }

    console.log(chalk.yellow('⚠️  所有数据已清空'));
  }

  /**
   * 确保存储已初始化
   */
  private ensureInitialized(): void {
    if (!this.initialized) {
      throw new Error('存储未初始化，请先调用 initialize()');
    }
  }

  /**
   * 导出所有数据
   * @param exportPath 导出文件路径
   */
  async exportData(exportPath: string): Promise<void> {
    this.ensureInitialized();

    const templates = Array.from(this.templates.values());
    const exportData = {
      version: '1.0.0',
      exportedAt: new Date().toISOString(),
      templates
    };

    await fs.writeFile(
      exportPath,
      JSON.stringify(exportData, null, 2),
      'utf-8'
    );

    console.log(chalk.green(`✅ 数据已导出到: ${exportPath}`));
  }

  /**
   * 导入数据
   * @param importPath 导入文件路径
   */
  async importData(importPath: string): Promise<void> {
    this.ensureInitialized();

    const content = await fs.readFile(importPath, 'utf-8');
    const importData = JSON.parse(content);

    if (!importData.templates || !Array.isArray(importData.templates)) {
      throw new Error('导入文件格式无效');
    }

    for (const template of importData.templates) {
      await this.saveTemplate(template);
    }

    console.log(chalk.green(`✅ 已导入 ${importData.templates.length} 个模板`));
  }
}

