// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-17
// Task: 创建M8任务协调管理系统数据库模型（4张表）

/**
 * M8任务协调管理系统数据模型
 */

import Database from 'better-sqlite3';

/**
 * 任务表模型
 */
export interface TaskModel {
  id: string;
  title: string;
  description: string | null;
  priority: 'LOW' | 'MEDIUM' | 'HIGH' | 'URGENT';
  status: string;
  tool_name: string;
  config_id: string | null;
  params: string | null;  // JSON字符串
  result: string | null;
  error_message: string | null;
  created_at: number;
  started_at: number | null;
  completed_at: number | null;
  timeout_at: number | null;
  user_id: string;
}

/**
 * 任务依赖表模型
 */
export interface TaskDependencyModel {
  id: string;
  task_id: string;
  depends_on_task_id: string;
  created_at: number;
}

/**
 * 任务执行记录表模型
 */
export interface TaskExecutionModel {
  id: string;
  task_id: string;
  attempt: number;
  result: string | null;
  error_message: string | null;
  execution_time: number | null;
  created_at: number;
}

/**
 * 通知表模型
 */
export interface NotificationModel {
  id: string;
  user_id: string;
  type: 'TASK_COMPLETED' | 'TASK_FAILED' | 'TASK_TIMEOUT';
  title: string;
  message: string;
  task_id: string | null;
  is_read: number;  // 0/1
  created_at: number;
}

/**
 * 创建所有表的SQL语句
 */
export const CREATE_TABLES_SQL_M8 = {
  tasks: `
    CREATE TABLE IF NOT EXISTS tasks (
      id TEXT PRIMARY KEY,
      title TEXT NOT NULL,
      description TEXT,
      priority TEXT NOT NULL CHECK(priority IN ('LOW', 'MEDIUM', 'HIGH', 'URGENT')),
      status TEXT NOT NULL,
      tool_name TEXT NOT NULL,
      config_id TEXT,
      params TEXT,
      result TEXT,
      error_message TEXT,
      created_at INTEGER NOT NULL,
      started_at INTEGER,
      completed_at INTEGER,
      timeout_at INTEGER,
      user_id TEXT NOT NULL
    )
  `,

  task_dependencies: `
    CREATE TABLE IF NOT EXISTS task_dependencies (
      id TEXT PRIMARY KEY,
      task_id TEXT NOT NULL,
      depends_on_task_id TEXT NOT NULL,
      created_at INTEGER NOT NULL,
      FOREIGN KEY (task_id) REFERENCES tasks(id) ON DELETE CASCADE,
      FOREIGN KEY (depends_on_task_id) REFERENCES tasks(id) ON DELETE CASCADE
    )
  `,

  task_executions: `
    CREATE TABLE IF NOT EXISTS task_executions (
      id TEXT PRIMARY KEY,
      task_id TEXT NOT NULL,
      attempt INTEGER DEFAULT 1,
      result TEXT,
      error_message TEXT,
      execution_time INTEGER,
      created_at INTEGER NOT NULL,
      FOREIGN KEY (task_id) REFERENCES tasks(id) ON DELETE CASCADE
    )
  `,

  notifications: `
    CREATE TABLE IF NOT EXISTS notifications (
      id TEXT PRIMARY KEY,
      user_id TEXT NOT NULL,
      type TEXT NOT NULL CHECK(type IN ('TASK_COMPLETED', 'TASK_FAILED', 'TASK_TIMEOUT')),
      title TEXT NOT NULL,
      message TEXT NOT NULL,
      task_id TEXT,
      is_read INTEGER DEFAULT 0 CHECK(is_read IN (0, 1)),
      created_at INTEGER NOT NULL
    )
  `,
};

/**
 * 创建索引的SQL语句
 */
export const CREATE_INDEXES_SQL_M8 = [
  'CREATE INDEX IF NOT EXISTS idx_tasks_status ON tasks(status)',
  'CREATE INDEX IF NOT EXISTS idx_tasks_priority ON tasks(priority)',
  'CREATE INDEX IF NOT EXISTS idx_tasks_user ON tasks(user_id)',
  'CREATE INDEX IF NOT EXISTS idx_tasks_created ON tasks(created_at)',
  'CREATE INDEX IF NOT EXISTS idx_deps_task ON task_dependencies(task_id)',
  'CREATE INDEX IF NOT EXISTS idx_deps_depends ON task_dependencies(depends_on_task_id)',
  'CREATE INDEX IF NOT EXISTS idx_executions_task ON task_executions(task_id)',
  'CREATE INDEX IF NOT EXISTS idx_notifications_user ON notifications(user_id)',
  'CREATE INDEX IF NOT EXISTS idx_notifications_read ON notifications(is_read)',
];

/**
 * 初始化M8数据库
 */
export function initializeDatabaseM8(db: Database.Database): void {
  db.pragma('foreign_keys = ON');

  Object.values(CREATE_TABLES_SQL_M8).forEach(sql => {
    db.exec(sql);
  });

  CREATE_INDEXES_SQL_M8.forEach(sql => {
    db.exec(sql);
  });

  console.log('✅ M8数据库初始化完成（4张表）');
}
