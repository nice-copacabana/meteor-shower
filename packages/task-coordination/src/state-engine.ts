// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-15
// Task: M8 Phase1 - C1: 任务状态引擎实现

/**
 * 任务状态枚举
 */
export enum TaskStatus {
  DRAFT = 'draft',           // 草稿
  SUBMITTED = 'submitted',   // 已提交
  RUNNING = 'running',       // 执行中
  COMPLETED = 'completed',   // 已完成
  REVIEWING = 'reviewing',   // 检查中
  APPROVED = 'approved',     // 已通过
  REJECTED = 'rejected',     // 已拒绝
  CANCELLED = 'cancelled',   // 已取消
  FAILED = 'failed'          // 执行失败
}

/**
 * 状态转换规则定义
 * 每个状态可以转换到哪些状态
 */
const STATE_TRANSITIONS: Record<TaskStatus, TaskStatus[]> = {
  [TaskStatus.DRAFT]: [
    TaskStatus.SUBMITTED,
    TaskStatus.CANCELLED,
  ],
  
  [TaskStatus.SUBMITTED]: [
    TaskStatus.RUNNING,
    TaskStatus.CANCELLED,
  ],
  
  [TaskStatus.RUNNING]: [
    TaskStatus.COMPLETED,
    TaskStatus.FAILED,
    TaskStatus.CANCELLED,
  ],
  
  [TaskStatus.COMPLETED]: [
    TaskStatus.REVIEWING,
    TaskStatus.APPROVED, // 可直接批准（无需review）
  ],
  
  [TaskStatus.REVIEWING]: [
    TaskStatus.APPROVED,
    TaskStatus.REJECTED,
  ],
  
  [TaskStatus.APPROVED]: [],  // 终态，不可再转换
  
  [TaskStatus.REJECTED]: [
    TaskStatus.DRAFT,  // 可重新编辑
    TaskStatus.CANCELLED,
  ],
  
  [TaskStatus.CANCELLED]: [],  // 终态，不可再转换
  
  [TaskStatus.FAILED]: [
    TaskStatus.DRAFT,  // 可重新编辑重试
    TaskStatus.CANCELLED,
  ],
};

/**
 * 状态转换事件
 */
export interface StateTransitionEvent {
  /** 任务ID */
  taskId: string;
  
  /** 原状态 */
  fromState: TaskStatus;
  
  /** 目标状态 */
  toState: TaskStatus;
  
  /** 转换时间 */
  timestamp: Date;
  
  /** 转换原因（可选） */
  reason?: string;
  
  /** 执行转换的用户（可选） */
  userId?: string;
  
  /** 额外元数据 */
  metadata?: Record<string, any>;
}

/**
 * 状态转换结果
 */
export interface StateTransitionResult {
  /** 是否成功 */
  success: boolean;
  
  /** 新状态 */
  newState: TaskStatus;
  
  /** 错误信息（如果失败） */
  error?: string;
  
  /** 转换事件 */
  event?: StateTransitionEvent;
}

/**
 * 任务状态引擎
 * 
 * 负责管理任务的9种状态流转，确保状态转换的合法性
 */
export class TaskStateEngine {
  /**
   * 检查状态转换是否合法
   */
  canTransition(from: TaskStatus, to: TaskStatus): boolean {
    const allowedTransitions = STATE_TRANSITIONS[from] || [];
    return allowedTransitions.includes(to);
  }

  /**
   * 执行状态转换
   */
  transition(
    taskId: string,
    currentState: TaskStatus,
    targetState: TaskStatus,
    options?: {
      reason?: string;
      userId?: string;
      metadata?: Record<string, any>;
    }
  ): StateTransitionResult {
    // 检查是否可以转换
    if (!this.canTransition(currentState, targetState)) {
      return {
        success: false,
        newState: currentState,
        error: `不允许从 ${currentState} 转换到 ${targetState}`,
      };
    }

    // 创建转换事件
    const event: StateTransitionEvent = {
      taskId,
      fromState: currentState,
      toState: targetState,
      timestamp: new Date(),
      reason: options?.reason,
      userId: options?.userId,
      metadata: options?.metadata,
    };

    return {
      success: true,
      newState: targetState,
      event,
    };
  }

  /**
   * 获取当前状态的所有可能转换
   */
  getAvailableTransitions(currentState: TaskStatus): TaskStatus[] {
    return STATE_TRANSITIONS[currentState] || [];
  }

  /**
   * 检查状态是否为终态
   */
  isTerminalState(state: TaskStatus): boolean {
    const transitions = STATE_TRANSITIONS[state] || [];
    return transitions.length === 0;
  }

  /**
   * 获取状态描述
   */
  getStateDescription(state: TaskStatus): string {
    const descriptions: Record<TaskStatus, string> = {
      [TaskStatus.DRAFT]: '草稿 - 任务正在编辑中',
      [TaskStatus.SUBMITTED]: '已提交 - 等待执行',
      [TaskStatus.RUNNING]: '执行中 - AI正在处理任务',
      [TaskStatus.COMPLETED]: '已完成 - AI已完成任务',
      [TaskStatus.REVIEWING]: '检查中 - 人类正在审查结果',
      [TaskStatus.APPROVED]: '已通过 - 结果已被批准',
      [TaskStatus.REJECTED]: '已拒绝 - 结果未通过审查',
      [TaskStatus.CANCELLED]: '已取消 - 任务被取消',
      [TaskStatus.FAILED]: '执行失败 - AI执行任务时出错',
    };
    
    return descriptions[state] || '未知状态';
  }

  /**
   * 获取状态的建议下一步操作
   */
  getSuggestedNextAction(state: TaskStatus): string {
    const suggestions: Record<TaskStatus, string> = {
      [TaskStatus.DRAFT]: '完成编辑后提交任务',
      [TaskStatus.SUBMITTED]: '等待系统调度执行',
      [TaskStatus.RUNNING]: '等待AI完成任务',
      [TaskStatus.COMPLETED]: '审查AI输出的结果',
      [TaskStatus.REVIEWING]: '决定是否批准或拒绝',
      [TaskStatus.APPROVED]: '任务已完成，无需操作',
      [TaskStatus.REJECTED]: '修改任务重新提交或取消',
      [TaskStatus.CANCELLED]: '任务已取消，无需操作',
      [TaskStatus.FAILED]: '检查错误原因，修改后重试或取消',
    };
    
    return suggestions[state] || '无建议';
  }

  /**
   * 获取状态流转图的Mermaid代码（用于文档）
   */
  getStateDiagram(): string {
    return `
graph LR
    DRAFT[草稿] --> SUBMITTED[已提交]
    DRAFT --> CANCELLED[已取消]
    
    SUBMITTED --> RUNNING[执行中]
    SUBMITTED --> CANCELLED
    
    RUNNING --> COMPLETED[已完成]
    RUNNING --> FAILED[执行失败]
    RUNNING --> CANCELLED
    
    COMPLETED --> REVIEWING[检查中]
    COMPLETED --> APPROVED[已通过]
    
    REVIEWING --> APPROVED
    REVIEWING --> REJECTED[已拒绝]
    
    REJECTED --> DRAFT
    REJECTED --> CANCELLED
    
    FAILED --> DRAFT
    FAILED --> CANCELLED
    
    APPROVED:::terminal
    CANCELLED:::terminal
    
    classDef terminal fill:#f96,stroke:#333,stroke-width:2px
`.trim();
  }

  /**
   * 验证状态流转路径
   * 检查一系列状态转换是否合法
   */
  validatePath(states: TaskStatus[]): {
    valid: boolean;
    invalidTransition?: { from: TaskStatus; to: TaskStatus; index: number };
  } {
    for (let i = 0; i < states.length - 1; i++) {
      const from = states[i]!;
      const to = states[i + 1]!;
      
      if (!this.canTransition(from, to)) {
        return {
          valid: false,
          invalidTransition: { from, to, index: i },
        };
      }
    }
    
    return { valid: true };
  }
}
