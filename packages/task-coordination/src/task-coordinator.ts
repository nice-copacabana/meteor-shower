// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-17
// Task: 实现TaskCoordinator任务协调器

/**
 * TaskCoordinator - 任务协调器
 * 
 * 负责任务的创建、提交、执行、取消等核心协调功能
 */

import Database from 'better-sqlite3';
import { randomUUID } from 'crypto';
import { TaskModel, TaskDependencyModel, TaskExecutionModel } from './database/models.js';
import { TaskStateEngine, TaskStatus } from './state-engine.js';

/**
 * 任务优先级
 */
export type TaskPriority = 'LOW' | 'MEDIUM' | 'HIGH' | 'URGENT';

/**
 * 创建任务参数
 */
export interface CreateTaskParams {
  title: string;
  description?: string;
  priority?: TaskPriority;
  toolName: string;
  configId?: string;
  params?: Record<string, any>;
  timeoutMinutes?: number;
  userId: string;
}

/**
 * 任务协调器
 */
export class TaskCoordinator {
  private db: Database.Database;
  private stateEngine: TaskStateEngine;

  constructor(db: Database.Database) {
    this.db = db;
    this.stateEngine = new TaskStateEngine();
  }

  /**
   * 创建任务
   */
  createTask(params: CreateTaskParams): TaskModel {
    const taskId = randomUUID();
    const now = Date.now();
    const timeoutAt = params.timeoutMinutes 
      ? now + params.timeoutMinutes * 60 * 1000 
      : now + 60 * 60 * 1000; // 默认1小时

    const stmt = this.db.prepare(`
      INSERT INTO tasks (
        id, title, description, priority, status, tool_name, 
        config_id, params, result, error_message, created_at, 
        started_at, completed_at, timeout_at, user_id
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    `);

    stmt.run(
      taskId,
      params.title,
      params.description || null,
      params.priority || 'MEDIUM',
      TaskStatus.DRAFT,
      params.toolName,
      params.configId || null,
      params.params ? JSON.stringify(params.params) : null,
      null,
      null,
      now,
      null,
      null,
      timeoutAt,
      params.userId
    );

    return this.getTaskById(taskId)!;
  }

  /**
   * 获取任务
   */
  getTaskById(taskId: string): TaskModel | null {
    const stmt = this.db.prepare('SELECT * FROM tasks WHERE id = ?');
    return stmt.get(taskId) as TaskModel | null;
  }

  /**
   * 提交任务
   */
  submitTask(taskId: string, userId: string): boolean {
    const task = this.getTaskById(taskId);
    if (!task) {
      throw new Error(`任务 ${taskId} 不存在`);
    }

    const result = this.stateEngine.transition(
      taskId,
      task.status as TaskStatus,
      TaskStatus.SUBMITTED,
      { userId, reason: '用户提交任务' }
    );

    if (!result.success) {
      throw new Error(result.error);
    }

    const stmt = this.db.prepare('UPDATE tasks SET status = ? WHERE id = ?');
    stmt.run(TaskStatus.SUBMITTED, taskId);

    return true;
  }

  /**
   * 开始执行任务
   */
  startTask(taskId: string): boolean {
    const task = this.getTaskById(taskId);
    if (!task) {
      throw new Error(`任务 ${taskId} 不存在`);
    }

    const result = this.stateEngine.transition(
      taskId,
      task.status as TaskStatus,
      TaskStatus.RUNNING
    );

    if (!result.success) {
      throw new Error(result.error);
    }

    const now = Date.now();
    const stmt = this.db.prepare(`
      UPDATE tasks SET status = ?, started_at = ? WHERE id = ?
    `);
    stmt.run(TaskStatus.RUNNING, now, taskId);

    return true;
  }

  /**
   * 完成任务
   */
  completeTask(taskId: string, result: string): boolean {
    const task = this.getTaskById(taskId);
    if (!task) {
      throw new Error(`任务 ${taskId} 不存在`);
    }

    const transitionResult = this.stateEngine.transition(
      taskId,
      task.status as TaskStatus,
      TaskStatus.COMPLETED
    );

    if (!transitionResult.success) {
      throw new Error(transitionResult.error);
    }

    const now = Date.now();
    const stmt = this.db.prepare(`
      UPDATE tasks SET status = ?, result = ?, completed_at = ? WHERE id = ?
    `);
    stmt.run(TaskStatus.COMPLETED, result, now, taskId);

    // 记录执行记录
    this.recordExecution(taskId, result, null);

    return true;
  }

  /**
   * 任务失败
   */
  failTask(taskId: string, errorMessage: string): boolean {
    const task = this.getTaskById(taskId);
    if (!task) {
      throw new Error(`任务 ${taskId} 不存在`);
    }

    const result = this.stateEngine.transition(
      taskId,
      task.status as TaskStatus,
      TaskStatus.FAILED
    );

    if (!result.success) {
      throw new Error(result.error);
    }

    const now = Date.now();
    const stmt = this.db.prepare(`
      UPDATE tasks SET status = ?, error_message = ?, completed_at = ? WHERE id = ?
    `);
    stmt.run(TaskStatus.FAILED, errorMessage, now, taskId);

    // 记录执行记录
    this.recordExecution(taskId, null, errorMessage);

    return true;
  }

  /**
   * 取消任务
   */
  cancelTask(taskId: string, userId: string): boolean {
    const task = this.getTaskById(taskId);
    if (!task) {
      throw new Error(`任务 ${taskId} 不存在`);
    }

    const result = this.stateEngine.transition(
      taskId,
      task.status as TaskStatus,
      TaskStatus.CANCELLED,
      { userId, reason: '用户取消任务' }
    );

    if (!result.success) {
      throw new Error(result.error);
    }

    const stmt = this.db.prepare('UPDATE tasks SET status = ? WHERE id = ?');
    stmt.run(TaskStatus.CANCELLED, taskId);

    return true;
  }

  /**
   * 添加任务依赖
   */
  addDependency(taskId: string, dependsOnTaskId: string): void {
    const depId = randomUUID();
    const now = Date.now();

    const stmt = this.db.prepare(`
      INSERT INTO task_dependencies (id, task_id, depends_on_task_id, created_at)
      VALUES (?, ?, ?, ?)
    `);

    stmt.run(depId, taskId, dependsOnTaskId, now);
  }

  /**
   * 获取任务依赖
   */
  getDependencies(taskId: string): TaskDependencyModel[] {
    const stmt = this.db.prepare(`
      SELECT * FROM task_dependencies WHERE task_id = ?
    `);
    return stmt.all(taskId) as TaskDependencyModel[];
  }

  /**
   * 检查依赖是否满足
   */
  checkDependenciesMet(taskId: string): boolean {
    const deps = this.getDependencies(taskId);
    
    for (const dep of deps) {
      const dependTask = this.getTaskById(dep.depends_on_task_id);
      if (!dependTask || dependTask.status !== TaskStatus.COMPLETED) {
        return false;
      }
    }
    
    return true;
  }

  /**
   * 列出用户任务
   */
  listUserTasks(userId: string, options?: {
    status?: string;
    priority?: TaskPriority;
    page?: number;
    pageSize?: number;
  }): { tasks: TaskModel[]; total: number } {
    const page = options?.page || 1;
    const pageSize = options?.pageSize || 20;
    const offset = (page - 1) * pageSize;

    let whereClauses = ['user_id = ?'];
    let params: any[] = [userId];

    if (options?.status) {
      whereClauses.push('status = ?');
      params.push(options.status);
    }

    if (options?.priority) {
      whereClauses.push('priority = ?');
      params.push(options.priority);
    }

    const whereClause = whereClauses.join(' AND ');

    // 查询总数
    const countStmt = this.db.prepare(`SELECT COUNT(*) as count FROM tasks WHERE ${whereClause}`);
    const countResult = countStmt.get(...params) as { count: number };

    // 查询分页数据
    const stmt = this.db.prepare(`
      SELECT * FROM tasks WHERE ${whereClause}
      ORDER BY created_at DESC
      LIMIT ? OFFSET ?
    `);
    const tasks = stmt.all(...params, pageSize, offset) as TaskModel[];

    return {
      tasks,
      total: countResult.count,
    };
  }

  /**
   * 记录执行记录
   */
  private recordExecution(taskId: string, result: string | null, errorMessage: string | null): void {
    const execId = randomUUID();
    const now = Date.now();

    const task = this.getTaskById(taskId);
    const executionTime = task?.started_at ? now - task.started_at : null;

    const stmt = this.db.prepare(`
      INSERT INTO task_executions (id, task_id, attempt, result, error_message, execution_time, created_at)
      VALUES (?, ?, ?, ?, ?, ?, ?)
    `);

    stmt.run(execId, taskId, 1, result, errorMessage, executionTime, now);
  }

  /**
   * 获取执行历史
   */
  getExecutionHistory(taskId: string): TaskExecutionModel[] {
    const stmt = this.db.prepare(`
      SELECT * FROM task_executions WHERE task_id = ?
      ORDER BY created_at DESC
    `);
    return stmt.all(taskId) as TaskExecutionModel[];
  }
}
