// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-15
// Task: M8 Phase1 - C1: 任务状态引擎测试

import { describe, it, expect, beforeEach } from 'vitest';
import { TaskStateEngine, StateTransitionResult, TaskStatus } from '../state-engine.js';

describe('TaskStateEngine', () => {
  let engine: TaskStateEngine;

  beforeEach(() => {
    engine = new TaskStateEngine();
  });

  describe('状态转换合法性检查', () => {
    it('DRAFT可以转换到SUBMITTED', () => {
      expect(engine.canTransition(TaskStatus.DRAFT, TaskStatus.SUBMITTED)).toBe(true);
    });

    it('DRAFT可以转换到CANCELLED', () => {
      expect(engine.canTransition(TaskStatus.DRAFT, TaskStatus.CANCELLED)).toBe(true);
    });

    it('DRAFT不能直接转换到RUNNING', () => {
      expect(engine.canTransition(TaskStatus.DRAFT, TaskStatus.RUNNING)).toBe(false);
    });

    it('SUBMITTED可以转换到RUNNING', () => {
      expect(engine.canTransition(TaskStatus.SUBMITTED, TaskStatus.RUNNING)).toBe(true);
    });

    it('RUNNING可以转换到COMPLETED', () => {
      expect(engine.canTransition(TaskStatus.RUNNING, TaskStatus.COMPLETED)).toBe(true);
    });

    it('RUNNING可以转换到FAILED', () => {
      expect(engine.canTransition(TaskStatus.RUNNING, TaskStatus.FAILED)).toBe(true);
    });

    it('COMPLETED可以转换到REVIEWING', () => {
      expect(engine.canTransition(TaskStatus.COMPLETED, TaskStatus.REVIEWING)).toBe(true);
    });

    it('COMPLETED可以直接转换到APPROVED（跳过review）', () => {
      expect(engine.canTransition(TaskStatus.COMPLETED, TaskStatus.APPROVED)).toBe(true);
    });

    it('REVIEWING可以转换到APPROVED', () => {
      expect(engine.canTransition(TaskStatus.REVIEWING, TaskStatus.APPROVED)).toBe(true);
    });

    it('REVIEWING可以转换到REJECTED', () => {
      expect(engine.canTransition(TaskStatus.REVIEWING, TaskStatus.REJECTED)).toBe(true);
    });

    it('REJECTED可以回到DRAFT', () => {
      expect(engine.canTransition(TaskStatus.REJECTED, TaskStatus.DRAFT)).toBe(true);
    });

    it('FAILED可以回到DRAFT', () => {
      expect(engine.canTransition(TaskStatus.FAILED, TaskStatus.DRAFT)).toBe(true);
    });
  });

  describe('终态检查', () => {
    it('APPROVED应该是终态', () => {
      expect(engine.isTerminalState(TaskStatus.APPROVED)).toBe(true);
    });

    it('CANCELLED应该是终态', () => {
      expect(engine.isTerminalState(TaskStatus.CANCELLED)).toBe(true);
    });

    it('DRAFT不应该是终态', () => {
      expect(engine.isTerminalState(TaskStatus.DRAFT)).toBe(false);
    });

    it('RUNNING不应该是终态', () => {
      expect(engine.isTerminalState(TaskStatus.RUNNING)).toBe(false);
    });

    it('终态不能转换到其他状态', () => {
      const approvedTransitions = engine.getAvailableTransitions(TaskStatus.APPROVED);
      expect(approvedTransitions).toEqual([]);

      const cancelledTransitions = engine.getAvailableTransitions(TaskStatus.CANCELLED);
      expect(cancelledTransitions).toEqual([]);
    });
  });

  describe('执行状态转换', () => {
    it('成功的转换应返回正确结果', () => {
      const result = engine.transition('task1', TaskStatus.DRAFT, TaskStatus.SUBMITTED);

      expect(result.success).toBe(true);
      expect(result.newState).toBe(TaskStatus.SUBMITTED);
      expect(result.event).toBeDefined();
      expect(result.event?.fromState).toBe(TaskStatus.DRAFT);
      expect(result.event?.toState).toBe(TaskStatus.SUBMITTED);
      expect(result.event?.taskId).toBe('task1');
    });

    it('非法转换应返回错误', () => {
      const result = engine.transition('task1', TaskStatus.DRAFT, TaskStatus.RUNNING);

      expect(result.success).toBe(false);
      expect(result.newState).toBe(TaskStatus.DRAFT);
      expect(result.error).toContain('不允许');
      expect(result.event).toBeUndefined();
    });

    it('转换应包含可选的原因和元数据', () => {
      const result = engine.transition(
        'task1',
        TaskStatus.RUNNING,
        TaskStatus.FAILED,
        {
          reason: 'API timeout',
          userId: 'user123',
          metadata: { errorCode: 'TIMEOUT_001' },
        }
      );

      expect(result.success).toBe(true);
      expect(result.event?.reason).toBe('API timeout');
      expect(result.event?.userId).toBe('user123');
      expect(result.event?.metadata).toEqual({ errorCode: 'TIMEOUT_001' });
    });

    it('转换事件应包含时间戳', () => {
      const before = new Date();
      const result = engine.transition('task1', TaskStatus.DRAFT, TaskStatus.SUBMITTED);
      const after = new Date();

      expect(result.event?.timestamp).toBeInstanceOf(Date);
      expect(result.event?.timestamp.getTime()).toBeGreaterThanOrEqual(before.getTime());
      expect(result.event?.timestamp.getTime()).toBeLessThanOrEqual(after.getTime());
    });
  });

  describe('获取可用转换', () => {
    it('DRAFT应返回SUBMITTED和CANCELLED', () => {
      const transitions = engine.getAvailableTransitions(TaskStatus.DRAFT);
      expect(transitions).toContain(TaskStatus.SUBMITTED);
      expect(transitions).toContain(TaskStatus.CANCELLED);
      expect(transitions.length).toBe(2);
    });

    it('RUNNING应返回COMPLETED、FAILED和CANCELLED', () => {
      const transitions = engine.getAvailableTransitions(TaskStatus.RUNNING);
      expect(transitions).toContain(TaskStatus.COMPLETED);
      expect(transitions).toContain(TaskStatus.FAILED);
      expect(transitions).toContain(TaskStatus.CANCELLED);
      expect(transitions.length).toBe(3);
    });

    it('APPROVED应返回空数组', () => {
      const transitions = engine.getAvailableTransitions(TaskStatus.APPROVED);
      expect(transitions).toEqual([]);
    });
  });

  describe('状态描述和建议', () => {
    it('应返回状态的正确描述', () => {
      expect(engine.getStateDescription(TaskStatus.DRAFT)).toContain('草稿');
      expect(engine.getStateDescription(TaskStatus.RUNNING)).toContain('执行中');
      expect(engine.getStateDescription(TaskStatus.APPROVED)).toContain('已通过');
    });

    it('应返回有用的下一步建议', () => {
      expect(engine.getSuggestedNextAction(TaskStatus.DRAFT)).toContain('提交');
      expect(engine.getSuggestedNextAction(TaskStatus.COMPLETED)).toContain('审查');
      expect(engine.getSuggestedNextAction(TaskStatus.APPROVED)).toContain('无需操作');
    });
  });

  describe('状态路径验证', () => {
    it('合法的路径应验证通过', () => {
      const path = [
        TaskStatus.DRAFT,
        TaskStatus.SUBMITTED,
        TaskStatus.RUNNING,
        TaskStatus.COMPLETED,
        TaskStatus.APPROVED,
      ];

      const result = engine.validatePath(path);
      expect(result.valid).toBe(true);
      expect(result.invalidTransition).toBeUndefined();
    });

    it('包含非法转换的路径应验证失败', () => {
      const path = [
        TaskStatus.DRAFT,
        TaskStatus.RUNNING, // 非法：DRAFT不能直接到RUNNING
        TaskStatus.COMPLETED,
      ];

      const result = engine.validatePath(path);
      expect(result.valid).toBe(false);
      expect(result.invalidTransition).toBeDefined();
      expect(result.invalidTransition?.from).toBe(TaskStatus.DRAFT);
      expect(result.invalidTransition?.to).toBe(TaskStatus.RUNNING);
      expect(result.invalidTransition?.index).toBe(0);
    });

    it('带review流程的路径应验证通过', () => {
      const path = [
        TaskStatus.DRAFT,
        TaskStatus.SUBMITTED,
        TaskStatus.RUNNING,
        TaskStatus.COMPLETED,
        TaskStatus.REVIEWING,
        TaskStatus.APPROVED,
      ];

      const result = engine.validatePath(path);
      expect(result.valid).toBe(true);
    });

    it('重试流程的路径应验证通过', () => {
      const path = [
        TaskStatus.DRAFT,
        TaskStatus.SUBMITTED,
        TaskStatus.RUNNING,
        TaskStatus.FAILED,
        TaskStatus.DRAFT,
        TaskStatus.SUBMITTED,
      ];

      const result = engine.validatePath(path);
      expect(result.valid).toBe(true);
    });

    it('拒绝后重新编辑的路径应验证通过', () => {
      const path = [
        TaskStatus.DRAFT,
        TaskStatus.SUBMITTED,
        TaskStatus.RUNNING,
        TaskStatus.COMPLETED,
        TaskStatus.REVIEWING,
        TaskStatus.REJECTED,
        TaskStatus.DRAFT,
      ];

      const result = engine.validatePath(path);
      expect(result.valid).toBe(true);
    });
  });

  describe('状态流转图', () => {
    it('应生成Mermaid格式的状态图', () => {
      const diagram = engine.getStateDiagram();
      
      expect(diagram).toContain('graph LR');
      expect(diagram).toContain('DRAFT');
      expect(diagram).toContain('SUBMITTED');
      expect(diagram).toContain('RUNNING');
      expect(diagram).toContain('COMPLETED');
      expect(diagram).toContain('REVIEWING');
      expect(diagram).toContain('APPROVED');
      expect(diagram).toContain('REJECTED');
      expect(diagram).toContain('CANCELLED');
      expect(diagram).toContain('FAILED');
    });
  });

  describe('复杂场景测试', () => {
    it('任务完整生命周期 - 成功路径', () => {
      let currentState = TaskStatus.DRAFT;

      // Draft -> Submitted
      let result = engine.transition('task1', currentState, TaskStatus.SUBMITTED);
      expect(result.success).toBe(true);
      currentState = result.newState;

      // Submitted -> Running
      result = engine.transition('task1', currentState, TaskStatus.RUNNING);
      expect(result.success).toBe(true);
      currentState = result.newState;

      // Running -> Completed
      result = engine.transition('task1', currentState, TaskStatus.COMPLETED);
      expect(result.success).toBe(true);
      currentState = result.newState;

      // Completed -> Reviewing
      result = engine.transition('task1', currentState, TaskStatus.REVIEWING);
      expect(result.success).toBe(true);
      currentState = result.newState;

      // Reviewing -> Approved
      result = engine.transition('task1', currentState, TaskStatus.APPROVED);
      expect(result.success).toBe(true);
      currentState = result.newState;

      // 验证是终态
      expect(engine.isTerminalState(currentState)).toBe(true);
    });

    it('任务失败重试场景', () => {
      let currentState = TaskStatus.RUNNING;

      // Running -> Failed
      let result = engine.transition('task1', currentState, TaskStatus.FAILED);
      expect(result.success).toBe(true);
      currentState = result.newState;

      // Failed -> Draft (修改重试)
      result = engine.transition('task1', currentState, TaskStatus.DRAFT);
      expect(result.success).toBe(true);
      currentState = result.newState;

      // Draft -> Submitted
      result = engine.transition('task1', currentState, TaskStatus.SUBMITTED);
      expect(result.success).toBe(true);
    });

    it('审查拒绝场景', () => {
      let currentState = TaskStatus.REVIEWING;

      // Reviewing -> Rejected
      let result = engine.transition('task1', currentState, TaskStatus.REJECTED);
      expect(result.success).toBe(true);
      currentState = result.newState;

      // Rejected -> Draft (重新编辑)
      result = engine.transition('task1', currentState, TaskStatus.DRAFT);
      expect(result.success).toBe(true);
    });

    it('任务取消场景', () => {
      const states = [
        TaskStatus.DRAFT,
        TaskStatus.SUBMITTED,
        TaskStatus.RUNNING,
      ];

      // 所有这些状态都可以取消
      for (const state of states) {
        const result = engine.transition('task1', state, TaskStatus.CANCELLED);
        expect(result.success).toBe(true);
        expect(engine.isTerminalState(result.newState)).toBe(true);
      }
    });
  });
});
