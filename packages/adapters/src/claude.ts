// Generated by Qoder AI (Model: claude-sonnet-4-20250514) - 2025-10-14
// Task: 实现Claude适配器完整文件写入逻辑

import { Adapter, ApplyContext, DiffResult } from './index.js';
import chalk from 'chalk';
import fs from 'fs/promises';
import path from 'path';
import os from 'os';

export class ClaudeAdapter implements Adapter {
  private backupPaths: Map<string, string> = new Map();

  async plan(ctx: ApplyContext): Promise<DiffResult> {
    console.log(chalk.gray('📋 规划 Claude 配置变更...'));
    
    return {
      changes: [
        { path: '~/.claude/claude.json', kind: 'create' },
        { path: './CLAUDE.md', kind: 'create' },
        { path: './CLAUDE.local.md', kind: 'create' }
      ],
      summary: '将创建 3 个 Claude 配置文件'
    };
  }

  async apply(ctx: ApplyContext): Promise<void> {
    console.log(chalk.green('⚡ 应用 Claude 配置...'));
    
    if (ctx.dryRun) {
      console.log(chalk.yellow('🔍 模拟模式：跳过实际写入'));
      return;
    }
    
    await this.writeClaudeConfigs(ctx);
  }

  async rollback(ctx: ApplyContext): Promise<void> {
    console.log(chalk.yellow('🔄 回滚 Claude 配置...'));
    
    for (const [originalPath, backupPath] of this.backupPaths) {
      try {
        const content = await fs.readFile(backupPath, 'utf-8');
        await fs.writeFile(originalPath, content, 'utf-8');
        console.log(chalk.yellow(`  🔄 回滚: ${originalPath}`));
      } catch (error) {
        console.error(chalk.red(`  ❌ 回滚失败 ${originalPath}: ${error}`));
      }
    }
    
    this.backupPaths.clear();
    console.log(chalk.green('✅ Claude 配置回滚完成'));
  }

  private async writeClaudeConfigs(ctx: ApplyContext): Promise<void> {
    const homeDir = os.homedir();
    const projectRoot = process.cwd();
    
    const configs = [
      {
        target: path.join(homeDir, '.claude', 'claude.json'),
        content: this.generateClaudeJson(ctx.variables),
        description: 'Claude 配置文件'
      },
      {
        target: path.join(projectRoot, 'CLAUDE.md'),
        content: this.generateClaudeMd(ctx.variables),
        description: 'Claude 指令文档'
      },
      {
        target: path.join(projectRoot, 'CLAUDE.local.md'),
        content: this.generateClaudeLocalMd(ctx.variables),
        description: 'Claude 本地配置'
      }
    ];

    for (const config of configs) {
      try {
        // 备份现有文件
        try {
          await fs.access(config.target);
          const backup = `${config.target}.backup`;
          await fs.copyFile(config.target, backup);
          this.backupPaths.set(config.target, backup);
        } catch {
          // 文件不存在，无需备份
        }

        // 确保目录存在
        await fs.mkdir(path.dirname(config.target), { recursive: true });
        
        // 写入文件
        await fs.writeFile(config.target, config.content, 'utf-8');
        console.log(chalk.gray(`  ✅ 写入 ${config.description}: ${config.target}`));
      } catch (error) {
        console.error(chalk.red(`  ❌ 写入失败 ${config.description}: ${error}`));
        throw error;
      }
    }
  }

  private generateClaudeJson(variables: Record<string, unknown>): string {
    return JSON.stringify({
      apiKey: "{{CLAUDE_API_KEY}}",
      model: variables.claudeModel || "claude-3-5-sonnet-20241022",
      maxTokens: 4000,
      temperature: 0.1,
      vision: variables.enableVision || false
    }, null, 2);
  }

  private generateClaudeMd(variables: Record<string, unknown>): string {
    const projectName = variables.projectName || 'my-project';
    const persona = variables.persona || '你是一名经验丰富的软件工程师';
    
    return `# ${projectName} - Claude 配置

## 角色
${persona}

## 编码规范
- 使用 TypeScript
- 遵循 ESLint 规则
- 编写单元测试
- 保持函数简洁

## 工作流程
1. 理解需求
2. 设计方案
3. 编写代码
4. 编写测试
5. 代码审查
`;
  }

  private generateClaudeLocalMd(variables: Record<string, unknown>): string {
    const projectDescription = variables.projectDescription || '项目描述';
    
    return `# 本地配置

## 项目信息
${projectDescription}

## 本地规则
- 代码风格: ${variables.indentStyle || '2 spaces'}
- Prettier: ${variables.enablePrettier ? '启用' : '禁用'}
- ESLint: ${variables.enableESLint ? '启用' : '禁用'}

## 响应风格
${variables.responseStyle || '协作式'}
`;
  }
}
