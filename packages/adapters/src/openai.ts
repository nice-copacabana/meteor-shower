// Generated by Qoder AI (Model: claude-sonnet-4-20250514) - 2025-10-14
// Task: 实现OpenAI适配器完整文件写入逻辑，包含AGENTS.md和环境变量配置

import { Adapter, ApplyContext, DiffResult } from './index.js';
import { FileOperations } from '@meteor-shower/utils';
import chalk from 'chalk';
import fs from 'fs/promises';
import path from 'path';
import os from 'os';

/**
 * OpenAI 适配器类
 * 实现 Adapter 接口，提供 OpenAI API 的配置管理
 * 
 * 配置文件：
 * - ./AGENTS.md: AI Agent 配置文档
 * - ./.env.example: 环境变量示例文件
 * - ./OPENAI.local.md: 本地覆盖配置（不提交到Git）
 */
export class OpenAIAdapter implements Adapter {
  private fileOps: FileOperations;
  private backupPaths: Map<string, string> = new Map();

  constructor() {
    this.fileOps = new FileOperations();
  }

  /**
   * 规划配置变更
   * 分析将要进行的配置变更，返回变更详情
   */
  async plan(ctx: ApplyContext): Promise<DiffResult> {
    console.log(chalk.gray('📋 规划 OpenAI 配置变更...'));
    
    const projectRoot = process.cwd();
    const changes = [];

    // 检查文件是否存在
    const agentsPath = path.join(projectRoot, 'AGENTS.md');
    const envPath = path.join(projectRoot, '.env.example');
    const localPath = path.join(projectRoot, 'OPENAI.local.md');

    try {
      await fs.access(agentsPath);
      changes.push({ path: './AGENTS.md', kind: 'update' });
    } catch {
      changes.push({ path: './AGENTS.md', kind: 'create' });
    }

    try {
      await fs.access(envPath);
      changes.push({ path: './.env.example', kind: 'update' });
    } catch {
      changes.push({ path: './.env.example', kind: 'create' });
    }

    try {
      await fs.access(localPath);
      changes.push({ path: './OPENAI.local.md', kind: 'update' });
    } catch {
      changes.push({ path: './OPENAI.local.md', kind: 'create' });
    }
    
    return {
      changes,
      summary: `将${changes.filter(c => c.kind === 'create').length > 0 ? '创建' : '更新'} OpenAI 配置文件`
    };
  }

  /**
   * 应用配置
   * 执行实际的配置写入操作
   */
  async apply(ctx: ApplyContext): Promise<void> {
    console.log(chalk.green('⚡ 应用 OpenAI 配置...'));
    
    if (ctx.dryRun) {
      console.log(chalk.yellow('🔍 模拟模式：跳过实际写入'));
      return;
    }
    
    try {
      await this.writeOpenAIConfigs(ctx);
      console.log(chalk.green('✅ OpenAI 配置应用完成'));
    } catch (error) {
      console.error(chalk.red('❌ OpenAI 配置应用失败'));
      await this.rollback(ctx);
      throw error;
    }
  }

  /**
   * 回滚配置
   * 将配置恢复到应用前的状态
   */
  async rollback(ctx: ApplyContext): Promise<void> {
    console.log(chalk.yellow('🔄 回滚 OpenAI 配置...'));
    
    for (const [originalPath, backupPath] of this.backupPaths) {
      try {
        await this.fileOps.rollbackFromBackup(backupPath, originalPath);
        console.log(chalk.gray(`  ✅ 恢复 ${originalPath}`));
      } catch (error) {
        console.error(chalk.red(`  ❌ 回滚失败 ${originalPath}: ${error}`));
      }
    }
    
    this.backupPaths.clear();
    console.log(chalk.green('✅ OpenAI 配置回滚完成'));
  }

  /**
   * 写入 OpenAI 配置文件
   * 根据变量生成实际的配置文件
   */
  private async writeOpenAIConfigs(ctx: ApplyContext): Promise<void> {
    const projectRoot = process.cwd();
    
    const configs = [
      {
        target: path.join(projectRoot, 'AGENTS.md'),
        content: this.generateAgentsMarkdown(ctx.variables),
        description: 'AI Agent 配置文档'
      },
      {
        target: path.join(projectRoot, '.env.example'),
        content: this.generateEnvExample(ctx.variables),
        description: '环境变量示例文件'
      },
      {
        target: path.join(projectRoot, 'OPENAI.local.md'),
        content: this.generateLocalConfig(ctx.variables),
        description: '本地覆盖配置'
      }
    ];

    for (const config of configs) {
      try {
        // 备份现有文件
        try {
          await fs.access(config.target);
          const backupPath = await this.fileOps.createBackup(config.target);
          this.backupPaths.set(config.target, backupPath);
        } catch {
          // 文件不存在，无需备份
        }

        // 确保目录存在
        await fs.mkdir(path.dirname(config.target), { recursive: true });
        
        // 写入文件
        await fs.writeFile(config.target, config.content, 'utf-8');
        console.log(chalk.gray(`  ✅ 写入 ${config.description}: ${config.target}`));
      } catch (error) {
        console.error(chalk.red(`  ❌ 写入失败 ${config.description}: ${error}`));
        throw error;
      }
    }
  }

  /**
   * 生成 AGENTS.md 配置内容
   */
  private generateAgentsMarkdown(variables: Record<string, unknown>): string {
    const projectName = variables.projectName || 'my-project';
    const persona = variables.persona || '你是一名资深的全栈开发工程师';
    const techStack = Array.isArray(variables.techStack) ? variables.techStack : ['TypeScript', 'Node.js'];
    const codingStyle = variables.codingStyle || 'clean-code';

    return `# ${projectName} - AI Agents 配置

<!-- Generated by Qoder AI (Model: claude-sonnet-4-20250514) - 2025-10-14 -->
<!-- Task: OpenAI 适配器生成的 AI Agent 配置文档 -->

## 🤖 AI 角色设定

${persona}

## 🛠️ 技术栈

${techStack.map((tech: any) => `- ${tech}`).join('\n')}

## 📐 代码风格

**编码规范**: ${codingStyle}

### 通用原则

- 优先使用现代语法特性
- 保持代码简洁和可读性
- 遵循单一职责原则
- 编写自解释的代码

### 命名约定

- **变量和函数**: camelCase
- **类和接口**: PascalCase
- **常量**: UPPER_SNAKE_CASE
- **私有成员**: 前缀下划线 _privateMethod

### 注释规范

- 使用 JSDoc 为公共 API 添加文档
- 复杂逻辑添加行内注释说明意图
- 避免显而易见的注释

## 🧪 测试要求

- 核心功能必须有单元测试
- 测试覆盖率目标 > 80%
- 使用描述性的测试名称
- 遵循 AAA 模式 (Arrange-Act-Assert)

## 🔒 安全规范

- 敏感信息使用环境变量
- 输入验证和清理
- 防止 SQL 注入和 XSS 攻击
- 使用参数化查询

## 📦 依赖管理

- 定期更新依赖版本
- 审查新增依赖的必要性
- 优先选择维护活跃的库
- 避免引入过重的依赖

## 🚀 性能优化

- 避免不必要的重复计算
- 使用合适的数据结构
- 考虑异步操作的性能影响
- 及时释放资源

## 📝 提交规范

遵循 Conventional Commits 格式：

\`\`\`
<type>(<scope>): <subject>

<body>

<footer>
\`\`\`

**类型 (type)**:
- feat: 新功能
- fix: 修复 bug
- docs: 文档更新
- style: 代码格式调整
- refactor: 重构
- test: 测试相关
- chore: 构建/工具变更

## 🔗 相关配置

- 环境变量配置参考 \`.env.example\`
- 本地覆盖配置可在 \`OPENAI.local.md\` 中定义
`;
  }

  /**
   * 生成 .env.example 环境变量示例
   */
  private generateEnvExample(variables: Record<string, unknown>): string {
    const projectName = variables.projectName || 'my-project';
    const includeDatabase = variables.features && Array.isArray(variables.features) 
      ? (variables.features as string[]).includes('database') 
      : false;

    let content = `# ${projectName} - 环境变量配置示例
# Generated by Qoder AI (Model: claude-sonnet-4-20250514) - 2025-10-14

# ==========================================
# OpenAI API 配置
# ==========================================

# OpenAI API 密钥
OPENAI_API_KEY=sk-your-api-key-here

# OpenAI API 基础 URL（可选，用于代理或自定义端点）
# OPENAI_API_BASE=https://api.openai.com/v1

# 默认使用的模型
OPENAI_MODEL=gpt-4-turbo-preview

# 温度参数（0-2，控制输出随机性）
OPENAI_TEMPERATURE=0.7

# 最大 tokens 数
OPENAI_MAX_TOKENS=4096

# ==========================================
# 应用配置
# ==========================================

# 应用环境 (development/production/test)
NODE_ENV=development

# 应用端口
PORT=3000

# 日志级别 (debug/info/warn/error)
LOG_LEVEL=info

`;

    if (includeDatabase) {
      content += `# ==========================================
# 数据库配置
# ==========================================

# 数据库 URL
DATABASE_URL=postgresql://user:password@localhost:5432/dbname

# Redis URL（用于缓存和会话）
REDIS_URL=redis://localhost:6379

`;
    }

    content += `# ==========================================
# 安全配置
# ==========================================

# JWT 密钥（用于身份验证）
JWT_SECRET=your-secret-key-change-in-production

# JWT 过期时间
JWT_EXPIRES_IN=7d

# CORS 允许的源
CORS_ORIGIN=http://localhost:3000

# ==========================================
# 其他配置
# ==========================================

# 是否启用调试模式
DEBUG=false

# API 速率限制（请求数/分钟）
RATE_LIMIT=100
`;

    return content;
  }

  /**
   * 生成本地覆盖配置文件
   */
  private generateLocalConfig(variables: Record<string, unknown>): string {
    return `# 本地覆盖配置

<!-- Generated by Qoder AI (Model: claude-sonnet-4-20250514) - 2025-10-14 -->
<!-- 此文件用于本地开发时覆盖 AGENTS.md 中的配置，不应提交到版本控制 -->

## 📝 说明

此文件用于定义仅在本地开发环境生效的配置，会覆盖 \`AGENTS.md\` 中的相应设置。

建议将此文件添加到 \`.gitignore\` 中，避免提交个人配置到代码仓库。

## 🛠️ 本地配置示例

### 自定义 AI 角色

\`\`\`markdown
你是一名专注于性能优化的高级工程师，擅长发现和解决性能瓶颈。
\`\`\`

### 个人偏好设置

- 更详细的代码注释
- 偏好函数式编程风格
- 优先考虑代码性能

### 开发工具配置

- 使用 Vim 快捷键
- 自动保存间隔：5秒
- 代码格式化：保存时自动格式化

## 🔧 环境特定配置

### 开发环境

- 启用详细日志
- 关闭某些性能优化以便调试
- 使用本地数据库

### 调试配置

- 断点设置偏好
- 日志过滤规则
- 性能分析工具配置
`;
  }
}
