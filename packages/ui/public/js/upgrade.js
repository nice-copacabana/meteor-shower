// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-15
// Task: M6 Phase5 - 升级流程交互逻辑

// 全局状态
const upgradeState = {
    currentStep: 1,
    selectedPlan: null,
    selectedCycle: 'monthly',
    selectedSeats: 5,
    billingInfo: {},
    paymentMethod: 'alipay'
};

document.addEventListener('DOMContentLoaded', () => {
    initializeUpgradeFlow();
    setupEventListeners();
    loadUserCurrentPlan();
});

/**
 * 初始化升级流程
 */
function initializeUpgradeFlow() {
    // 从URL参数获取预选方案
    const urlParams = new URLSearchParams(window.location.search);
    const plan = urlParams.get('plan');
    
    if (plan) {
        const [planName, cycle] = plan.split('_');
        upgradeState.selectedPlan = planName;
        upgradeState.selectedCycle = cycle || 'monthly';
    }
}

/**
 * 设置事件监听
 */
function setupEventListeners() {
    // 计费周期切换
    document.querySelectorAll('input[name="billing"]').forEach(radio => {
        radio.addEventListener('change', (e) => {
            upgradeState.selectedCycle = e.target.value;
            updatePriceDisplay();
        });
    });

    // 席位数量变化
    const seatsInput = document.getElementById('teamSeats');
    if (seatsInput) {
        seatsInput.addEventListener('change', (e) => {
            upgradeState.selectedSeats = parseInt(e.target.value);
            updatePriceCalculation();
        });
    }

    // 发票需求切换
    const needInvoice = document.getElementById('needInvoice');
    if (needInvoice) {
        needInvoice.addEventListener('change', (e) => {
            document.getElementById('invoiceInfo').style.display = 
                e.target.checked ? 'block' : 'none';
        });
    }

    // 支付方式选择
    document.querySelectorAll('input[name="payment"]').forEach(radio => {
        radio.addEventListener('change', (e) => {
            upgradeState.paymentMethod = e.target.value;
        });
    });

    // 价格选项切换
    document.querySelectorAll('.price-option').forEach(option => {
        option.addEventListener('click', function() {
            const cycle = this.getAttribute('data-cycle');
            const card = this.closest('.plan-card');
            
            card.querySelectorAll('.price-option').forEach(opt => 
                opt.classList.remove('active'));
            this.classList.add('active');
            
            updatePriceDisplay();
        });
    });
}

/**
 * 加载用户当前方案
 */
async function loadUserCurrentPlan() {
    try {
        // 实际项目中从API获取
        const currentPlan = {
            name: '免费版',
            price: '¥0/月',
            features: [
                '3 个工具配置',
                '5 个云端模板',
                '20 次/月验证',
                '100MB 存储'
            ]
        };
        
        document.getElementById('currentPlanName').textContent = currentPlan.name;
    } catch (error) {
        console.error('加载当前方案失败:', error);
    }
}

/**
 * 选择方案
 */
function selectPlan(planName, cycle) {
    upgradeState.selectedPlan = planName;
    upgradeState.selectedCycle = cycle;
    
    // 更新订单信息
    updateOrderSummary();
    
    // 前往下一步
    goToStep(2);
}

/**
 * 前往指定步骤
 */
function goToStep(step) {
    // 验证当前步骤
    if (!validateStep(upgradeState.currentStep)) {
        return;
    }
    
    // 隐藏所有步骤
    document.querySelectorAll('.step-content').forEach(content => {
        content.style.display = 'none';
    });
    
    // 显示目标步骤
    document.getElementById(`step${step}`).style.display = 'block';
    
    // 更新步骤指示器
    updateStepsIndicator(step);
    
    // 更新状态
    upgradeState.currentStep = step;
    
    // 步骤特定处理
    if (step === 2) {
        updateOrderSummary();
    } else if (step === 3) {
        updatePaymentSummary();
    }
}

/**
 * 验证步骤
 */
function validateStep(step) {
    switch (step) {
        case 1:
            if (!upgradeState.selectedPlan) {
                alert('请选择一个升级方案');
                return false;
            }
            return true;
            
        case 2:
            const billingEmail = document.getElementById('billingEmail').value;
            if (!billingEmail) {
                alert('请输入账单邮箱');
                return false;
            }
            
            const needInvoice = document.getElementById('needInvoice').checked;
            if (needInvoice) {
                const invoiceTitle = document.getElementById('invoiceTitle').value;
                const taxId = document.getElementById('taxId').value;
                if (!invoiceTitle || !taxId) {
                    alert('请填写完整的发票信息');
                    return false;
                }
            }
            
            upgradeState.billingInfo = {
                email: billingEmail,
                needInvoice,
                invoiceTitle: document.getElementById('invoiceTitle').value,
                taxId: document.getElementById('taxId').value
            };
            return true;
            
        case 3:
            const agreeTerms = document.getElementById('agreeTerms').checked;
            if (!agreeTerms) {
                alert('请阅读并同意服务条款和隐私政策');
                return false;
            }
            return true;
            
        default:
            return true;
    }
}

/**
 * 更新步骤指示器
 */
function updateStepsIndicator(currentStep) {
    document.querySelectorAll('.step').forEach((step, index) => {
        const stepNum = index + 1;
        step.classList.remove('active', 'completed');
        
        if (stepNum < currentStep) {
            step.classList.add('completed');
        } else if (stepNum === currentStep) {
            step.classList.add('active');
        }
    });
}

/**
 * 更新订单摘要
 */
function updateOrderSummary() {
    const planNames = {
        'pro': '专业版',
        'team': '团队版'
    };
    
    const prices = {
        'pro': { monthly: 99, yearly: 999 },
        'team': { monthly: 299, yearly: 2999 }
    };
    
    const planName = planNames[upgradeState.selectedPlan];
    const cycleName = upgradeState.selectedCycle === 'monthly' ? '月付' : '年付';
    const price = prices[upgradeState.selectedPlan][upgradeState.selectedCycle];
    
    document.getElementById('selectedPlan').textContent = planName;
    document.getElementById('selectedCycle').textContent = cycleName;
    
    // 计算价格
    let totalPrice = price;
    if (upgradeState.selectedPlan === 'team') {
        totalPrice *= upgradeState.selectedSeats;
        document.getElementById('seatsInfo').style.display = 'block';
        document.getElementById('selectedSeats').textContent = upgradeState.selectedSeats;
    } else {
        document.getElementById('seatsInfo').style.display = 'none';
    }
    
    document.getElementById('subscriptionFee').textContent = `¥${price}`;
    document.getElementById('totalAmount').textContent = `¥${totalPrice}`;
    
    // 显示优惠信息
    if (upgradeState.selectedCycle === 'yearly') {
        const monthlyTotal = prices[upgradeState.selectedPlan].monthly * 12 * 
            (upgradeState.selectedPlan === 'team' ? upgradeState.selectedSeats : 1);
        const discount = monthlyTotal - totalPrice;
        
        document.getElementById('discountItem').style.display = 'flex';
        document.getElementById('discountAmount').textContent = `-¥${discount}`;
    } else {
        document.getElementById('discountItem').style.display = 'none';
    }
    
    // 更新升级后获得的功能
    updateUpgradeBenefits();
}

/**
 * 更新升级后的功能列表
 */
function updateUpgradeBenefits() {
    const benefits = {
        'pro': [
            '✓ 立即解锁所有专业版功能',
            '✓ 7天免费试用，随时可取消',
            '✓ 无限工具配置和模板',
            '✓ AI 增强功能',
            '✓ 云端备份保护'
        ],
        'team': [
            '✓ 立即解锁所有团队版功能',
            '✓ 专业版全部功能',
            '✓ 团队协作功能',
            '✓ 更大的配额和存储空间',
            '✓ 审计日志和更长备份'
        ]
    };
    
    const benefitsList = document.getElementById('upgradeBenefits');
    benefitsList.innerHTML = benefits[upgradeState.selectedPlan]
        .map(benefit => `<li>${benefit}</li>`)
        .join('');
}

/**
 * 更新支付摘要
 */
function updatePaymentSummary() {
    const totalAmount = document.getElementById('totalAmount').textContent;
    document.getElementById('paymentAmount').textContent = totalAmount;
}

/**
 * 更新价格显示
 */
function updatePriceDisplay() {
    const cycle = upgradeState.selectedCycle;
    
    document.querySelectorAll('.price-option').forEach(option => {
        const optionCycle = option.getAttribute('data-cycle');
        if (optionCycle === cycle) {
            option.classList.add('active');
        } else {
            option.classList.remove('active');
        }
    });
}

/**
 * 更新价格计算
 */
function updatePriceCalculation() {
    if (upgradeState.selectedPlan) {
        updateOrderSummary();
    }
}

/**
 * 处理支付
 */
async function processPayment() {
    const payButton = document.getElementById('payButton');
    payButton.disabled = true;
    payButton.textContent = '处理中...';
    
    try {
        // 创建支付订单
        const orderData = {
            plan: upgradeState.selectedPlan,
            cycle: upgradeState.selectedCycle,
            seats: upgradeState.selectedSeats,
            paymentMethod: upgradeState.paymentMethod,
            billingInfo: upgradeState.billingInfo
        };
        
        // 实际项目中调用后端API
        const response = await createPaymentOrder(orderData);
        
        if (response.success) {
            // 跳转到支付页面或显示支付二维码
            if (upgradeState.paymentMethod === 'alipay' || upgradeState.paymentMethod === 'wechat') {
                // 显示支付二维码
                showPaymentQRCode(response.qrCode);
                // 轮询支付状态
                pollPaymentStatus(response.orderId);
            } else {
                // 跳转到Stripe支付页面
                window.location.href = response.paymentUrl;
            }
        } else {
            throw new Error(response.message || '创建支付订单失败');
        }
    } catch (error) {
        console.error('支付处理失败:', error);
        alert('支付处理失败，请重试');
        payButton.disabled = false;
        payButton.textContent = '确认支付';
    }
}

/**
 * 创建支付订单（模拟）
 */
async function createPaymentOrder(orderData) {
    // 实际项目中调用后端API
    // return await fetch('/api/payment/create-order', {
    //     method: 'POST',
    //     headers: { 'Content-Type': 'application/json' },
    //     body: JSON.stringify(orderData)
    // }).then(res => res.json());
    
    // 模拟延迟
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    return {
        success: true,
        orderId: `ORD-${Date.now()}`,
        qrCode: 'mock_qr_code',
        paymentUrl: '/mock-payment'
    };
}

/**
 * 显示支付二维码
 */
function showPaymentQRCode(qrCode) {
    // 创建二维码显示模态框
    const modal = document.createElement('div');
    modal.className = 'payment-modal';
    modal.innerHTML = `
        <div class="modal-content">
            <h3>扫码支付</h3>
            <div class="qr-code">
                <p>请使用${upgradeState.paymentMethod === 'alipay' ? '支付宝' : '微信'}扫描二维码</p>
                <div class="qr-placeholder">[二维码占位]</div>
            </div>
            <p class="payment-hint">支付完成后将自动跳转</p>
        </div>
    `;
    document.body.appendChild(modal);
}

/**
 * 轮询支付状态
 */
async function pollPaymentStatus(orderId) {
    const maxAttempts = 60; // 最多轮询60次（5分钟）
    let attempts = 0;
    
    const interval = setInterval(async () => {
        attempts++;
        
        try {
            const status = await checkPaymentStatus(orderId);
            
            if (status === 'success') {
                clearInterval(interval);
                onPaymentSuccess(orderId);
            } else if (status === 'failed') {
                clearInterval(interval);
                onPaymentFailed();
            } else if (attempts >= maxAttempts) {
                clearInterval(interval);
                onPaymentTimeout();
            }
        } catch (error) {
            console.error('检查支付状态失败:', error);
        }
    }, 5000); // 每5秒检查一次
}

/**
 * 检查支付状态（模拟）
 */
async function checkPaymentStatus(orderId) {
    // 实际项目中调用后端API
    // return await fetch(`/api/payment/status/${orderId}`)
    //     .then(res => res.json())
    //     .then(data => data.status);
    
    // 模拟：5秒后支付成功
    await new Promise(resolve => setTimeout(resolve, 100));
    return Math.random() > 0.8 ? 'success' : 'pending';
}

/**
 * 支付成功回调
 */
function onPaymentSuccess(orderId) {
    // 移除支付模态框
    const modal = document.querySelector('.payment-modal');
    if (modal) {
        modal.remove();
    }
    
    // 更新订单信息
    document.getElementById('orderId').textContent = orderId;
    document.getElementById('effectiveDate').textContent = '立即生效';
    
    const trialEndDate = new Date();
    trialEndDate.setDate(trialEndDate.getDate() + 7);
    document.getElementById('trialEndDate').textContent = 
        trialEndDate.toLocaleDateString('zh-CN');
    
    const planNames = {
        'pro': '专业版',
        'team': '团队版'
    };
    document.getElementById('finalPlanName').textContent = 
        planNames[upgradeState.selectedPlan];
    
    // 前往成功页面
    goToStep(4);
}

/**
 * 支付失败回调
 */
function onPaymentFailed() {
    const modal = document.querySelector('.payment-modal');
    if (modal) {
        modal.remove();
    }
    
    alert('支付失败，请重试');
    document.getElementById('payButton').disabled = false;
    document.getElementById('payButton').textContent = '确认支付';
}

/**
 * 支付超时回调
 */
function onPaymentTimeout() {
    const modal = document.querySelector('.payment-modal');
    if (modal) {
        modal.remove();
    }
    
    alert('支付超时，请重新发起支付');
    document.getElementById('payButton').disabled = false;
    document.getElementById('payButton').textContent = '确认支付';
}

/**
 * 确认取消升级
 */
function confirmCancel() {
    if (confirm('确定要取消升级吗？')) {
        window.location.href = '/pricing';
    }
}

// 导出功能供外部使用
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        selectPlan,
        goToStep,
        processPayment,
        confirmCancel
    };
}
