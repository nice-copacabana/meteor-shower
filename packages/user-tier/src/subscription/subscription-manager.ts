// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-15
// Task: M6 Phase4 - 订阅管理系统实现

import { DatabaseManager } from '../database/manager.js';
import { UserTier } from '../types.js';
import { nanoid } from 'nanoid';

/**
 * 订阅周期
 */
export enum BillingCycle {
  /** 月付 */
  MONTHLY = 'monthly',
  
  /** 年付 */
  YEARLY = 'yearly',
}

/**
 * 订阅状态
 */
export enum SubscriptionStatus {
  /** 试用中 */
  TRIAL = 'trial',
  
  /** 活跃 */
  ACTIVE = 'active',
  
  /** 已暂停 */
  PAUSED = 'paused',
  
  /** 已取消 */
  CANCELLED = 'cancelled',
  
  /** 已过期 */
  EXPIRED = 'expired',
}

/**
 * 订阅计划
 */
export interface SubscriptionPlan {
  /** 计划ID */
  id: string;
  
  /** 层级 */
  tier: UserTier;
  
  /** 计划名称 */
  name: string;
  
  /** 计费周期 */
  billingCycle: BillingCycle;
  
  /** 价格 (分) */
  price: number;
  
  /** 试用天数 */
  trialDays?: number;
  
  /** 是否可用 */
  isActive: boolean;
}

/**
 * 订阅信息
 */
export interface SubscriptionInfo {
  /** 订阅ID */
  id: string;
  
  /** 用户ID */
  userId: string;
  
  /** 计划ID */
  planId: string;
  
  /** 订阅状态 */
  status: SubscriptionStatus;
  
  /** 当前周期开始时间 */
  currentPeriodStart: Date;
  
  /** 当前周期结束时间 */
  currentPeriodEnd: Date;
  
  /** 下次扣费时间 */
  nextBillingDate?: Date;
  
  /** 是否自动续费 */
  autoRenew: boolean;
  
  /** 取消时间 */
  cancelledAt?: Date;
  
  /** 创建时间 */
  createdAt: Date;
  
  /** 更新时间 */
  updatedAt: Date;
}

/**
 * 订阅管理器
 */
export class SubscriptionManager {
  // 预定义的订阅计划
  private static readonly PLANS: SubscriptionPlan[] = [
    // 专业版 - 月付
    {
      id: 'pro_monthly',
      tier: UserTier.PROFESSIONAL,
      name: '专业版 (月付)',
      billingCycle: BillingCycle.MONTHLY,
      price: 9900, // ¥99
      trialDays: 7,
      isActive: true,
    },
    // 专业版 - 年付
    {
      id: 'pro_yearly',
      tier: UserTier.PROFESSIONAL,
      name: '专业版 (年付)',
      billingCycle: BillingCycle.YEARLY,
      price: 99900, // ¥999
      trialDays: 7,
      isActive: true,
    },
    // 团队版 - 月付
    {
      id: 'team_monthly',
      tier: UserTier.TEAM,
      name: '团队版 (月付)',
      billingCycle: BillingCycle.MONTHLY,
      price: 29900, // ¥299/用户/月
      isActive: true,
    },
    // 团队版 - 年付
    {
      id: 'team_yearly',
      tier: UserTier.TEAM,
      name: '团队版 (年付)',
      billingCycle: BillingCycle.YEARLY,
      price: 299900, // ¥2999/用户/年
      isActive: true,
    },
  ];

  constructor(private dbManager: DatabaseManager) {}

  /**
   * 获取所有订阅计划
   */
  getPlans(tier?: UserTier): SubscriptionPlan[] {
    if (tier) {
      return SubscriptionManager.PLANS.filter(p => p.tier === tier && p.isActive);
    }
    return SubscriptionManager.PLANS.filter(p => p.isActive);
  }

  /**
   * 获取计划详情
   */
  getPlan(planId: string): SubscriptionPlan | null {
    return SubscriptionManager.PLANS.find(p => p.id === planId) || null;
  }

  /**
   * 创建订阅
   */
  async createSubscription(
    userId: string,
    planId: string,
    startTrial: boolean = true
  ): Promise<SubscriptionInfo> {
    const plan = this.getPlan(planId);
    if (!plan) {
      throw new Error(`订阅计划不存在: ${planId}`);
    }

    const user = this.dbManager.users.findById(userId);
    if (!user) {
      throw new Error('用户不存在');
    }

    // 检查用户是否已有该层级的订阅
    const existingSubscription = this.dbManager.subscriptions.findByUserId(userId)
      .find(s => {
        const subPlan = this.getPlan(s.planId);
        return subPlan?.tier === plan.tier && s.status === 'active';
      });

    if (existingSubscription) {
      throw new Error('用户已有该层级的活跃订阅');
    }

    const now = new Date();
    const subscriptionId = nanoid();

    // 计算周期
    let currentPeriodStart = now;
    let currentPeriodEnd: Date;
    let status: SubscriptionStatus;

    if (startTrial && plan.trialDays) {
      // 试用期
      status = SubscriptionStatus.TRIAL;
      currentPeriodEnd = new Date(now.getTime() + plan.trialDays * 24 * 60 * 60 * 1000);
    } else {
      // 直接开始订阅
      status = SubscriptionStatus.ACTIVE;
      currentPeriodEnd = this.calculatePeriodEnd(now, plan.billingCycle);
    }

    const subscription: SubscriptionInfo = {
      id: subscriptionId,
      userId,
      planId,
      status,
      currentPeriodStart,
      currentPeriodEnd,
      nextBillingDate: currentPeriodEnd,
      autoRenew: true,
      createdAt: now,
      updatedAt: now,
    };

    // 保存订阅
    this.dbManager.subscriptions.create({
      id: subscription.id,
      userId: subscription.userId,
      tier: plan.tier,
      planId: subscription.planId,
      status: subscription.status,
      currentPeriodStart: subscription.currentPeriodStart,
      currentPeriodEnd: subscription.currentPeriodEnd,
      billingCycle: plan.billingCycle,
    });

    // 更新用户层级
    this.dbManager.users.update(userId, {
      tier: plan.tier,
    });

    return subscription;
  }

  /**
   * 获取用户订阅
   */
  async getUserSubscription(userId: string): Promise<SubscriptionInfo | null> {
    const subscriptions = this.dbManager.subscriptions.findByUserId(userId);
    
    // 查找活跃的订阅
    const activeSubscription = subscriptions.find(s => s.status === 'active');
    if (activeSubscription) {
      return this.convertToSubscriptionInfo(activeSubscription);
    }

    // 查找试用中的订阅
    const trialSubscription = subscriptions.find(s => s.status === 'trial');
    if (trialSubscription) {
      return this.convertToSubscriptionInfo(trialSubscription);
    }

    return null;
  }

  /**
   * 续费订阅
   */
  async renewSubscription(subscriptionId: string): Promise<SubscriptionInfo> {
    const subscription = this.dbManager.subscriptions.findById(subscriptionId);
    if (!subscription) {
      throw new Error('订阅不存在');
    }

    const plan = this.getPlan(subscription.planId);
    if (!plan) {
      throw new Error('订阅计划不存在');
    }

    // 计算新的周期
    const newPeriodStart = subscription.currentPeriodEnd;
    const newPeriodEnd = this.calculatePeriodEnd(newPeriodStart, plan.billingCycle);

    // 更新订阅
    this.dbManager.subscriptions.update(subscriptionId, {
      currentPeriodStart: newPeriodStart,
      currentPeriodEnd: newPeriodEnd,
      status: 'active',
    });

    const updated = this.dbManager.subscriptions.findById(subscriptionId);
    return this.convertToSubscriptionInfo(updated!);
  }

  /**
   * 取消订阅
   */
  async cancelSubscription(
    subscriptionId: string,
    immediate: boolean = false
  ): Promise<SubscriptionInfo> {
    const subscription = this.dbManager.subscriptions.findById(subscriptionId);
    if (!subscription) {
      throw new Error('订阅不存在');
    }

    const now = new Date();

    if (immediate) {
      // 立即取消，降级为免费版
      this.dbManager.subscriptions.update(subscriptionId, {
        status: 'cancelled',
      });

      // 更新用户层级
      this.dbManager.users.update(subscription.userId, {
        tier: UserTier.FREE,
      });
    } else {
      // 周期结束后取消
      this.dbManager.subscriptions.update(subscriptionId, {
        status: 'cancelled',
      });
    }

    const updated = this.dbManager.subscriptions.findById(subscriptionId);
    return this.convertToSubscriptionInfo(updated!);
  }

  /**
   * 暂停订阅
   */
  async pauseSubscription(subscriptionId: string): Promise<SubscriptionInfo> {
    this.dbManager.subscriptions.update(subscriptionId, {
      status: 'paused',
    });

    const updated = this.dbManager.subscriptions.findById(subscriptionId);
    return this.convertToSubscriptionInfo(updated!);
  }

  /**
   * 恢复订阅
   */
  async resumeSubscription(subscriptionId: string): Promise<SubscriptionInfo> {
    this.dbManager.subscriptions.update(subscriptionId, {
      status: 'active',
    });

    const updated = this.dbManager.subscriptions.findById(subscriptionId);
    return this.convertToSubscriptionInfo(updated!);
  }

  /**
   * 检查并处理过期订阅
   */
  async processExpiredSubscriptions(): Promise<void> {
    const now = new Date();
    const allSubscriptions = this.dbManager.subscriptions.findAll();

    for (const subscription of allSubscriptions) {
      if (subscription.status === 'active' || subscription.status === 'trial') {
        if (subscription.currentPeriodEnd < now) {
          // 订阅已过期
          this.dbManager.subscriptions.update(subscription.id, {
            status: 'expired',
          });

          // 降级用户
          this.dbManager.users.update(subscription.userId, {
            tier: UserTier.FREE,
          });
        }
      }
    }
  }

  /**
   * 计算周期结束时间
   */
  private calculatePeriodEnd(start: Date, cycle: BillingCycle): Date {
    const end = new Date(start);
    
    if (cycle === BillingCycle.MONTHLY) {
      end.setMonth(end.getMonth() + 1);
    } else {
      end.setFullYear(end.getFullYear() + 1);
    }
    
    return end;
  }

  /**
   * 转换为订阅信息对象
   */
  private convertToSubscriptionInfo(subscription: any): SubscriptionInfo {
    return {
      id: subscription.id,
      userId: subscription.userId,
      planId: subscription.planId,
      status: subscription.status as SubscriptionStatus,
      currentPeriodStart: subscription.currentPeriodStart,
      currentPeriodEnd: subscription.currentPeriodEnd,
      nextBillingDate: subscription.currentPeriodEnd,
      autoRenew: true,
      createdAt: subscription.createdAt,
      updatedAt: subscription.updatedAt,
    };
  }
}
