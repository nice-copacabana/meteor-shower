// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-17
// Task: 实现组织管理API路由（4个端点）

/**
 * 组织管理API路由
 * 
 * 提供组织创建、查询、成员管理等接口
 */

import { Router, Request, Response } from 'express';
import Database from 'better-sqlite3';
import { UserTierManagerV2 } from '../user-tier-manager-v2.js';

export function createOrganizationRoutes(db: Database.Database): Router {
  const router = Router();
  const userManager = new UserTierManagerV2(db);

  /**
   * POST /api/organizations
   * 创建组织
   */
  router.post('/', (req: Request, res: Response) => {
    try {
      const { name, tier, ownerId, maxMembers } = req.body;
      
      if (!name || !tier || !ownerId) {
        return res.status(400).json({
          error: {
            code: 'VALIDATION_ERROR',
            message: '组织名称、层级和所有者不能为空',
          },
        });
      }
      
      if (tier !== 'TEAM' && tier !== 'ENTERPRISE') {
        return res.status(400).json({
          error: {
            code: 'VALIDATION_ERROR',
            message: '组织层级必须是 TEAM 或 ENTERPRISE',
          },
        });
      }
      
      const owner = userManager.getUserById(ownerId);
      if (!owner) {
        return res.status(404).json({
          error: {
            code: 'NOT_FOUND',
            message: '所有者用户不存在',
          },
        });
      }
      
      const organization = userManager.createOrganization({
        name,
        tier,
        ownerId,
        maxMembers,
      });
      
      res.status(201).json({
        orgId: organization.id,
        name: organization.name,
        tier: organization.tier,
      });
    } catch (error: any) {
      res.status(500).json({
        error: {
          code: 'INTERNAL_ERROR',
          message: error.message,
        },
      });
    }
  });

  /**
   * GET /api/organizations/:id
   * 获取组织信息
   */
  router.get('/:id', (req: Request, res: Response) => {
    try {
      const { id } = req.params;
      
      const organization = userManager.getOrganizationById(id);
      
      if (!organization) {
        return res.status(404).json({
          error: {
            code: 'NOT_FOUND',
            message: '组织不存在',
          },
        });
      }
      
      // 获取组织成员列表（简化版，实际需要member表）
      const owner = userManager.getUserById(organization.owner_id);
      
      res.json({
        id: organization.id,
        name: organization.name,
        tier: organization.tier,
        owner: {
          id: owner?.id,
          email: owner?.email,
        },
        members: {
          total: organization.member_count,
          max: organization.max_members,
        },
        createdAt: new Date(organization.created_at).toISOString(),
      });
    } catch (error: any) {
      res.status(500).json({
        error: {
          code: 'INTERNAL_ERROR',
          message: error.message,
        },
      });
    }
  });

  /**
   * POST /api/organizations/:id/members
   * 添加成员
   */
  router.post('/:id/members', (req: Request, res: Response) => {
    try {
      const { id } = req.params;
      const { userId, role = 'member' } = req.body;
      
      if (!userId) {
        return res.status(400).json({
          error: {
            code: 'VALIDATION_ERROR',
            message: '用户ID不能为空',
          },
        });
      }
      
      const organization = userManager.getOrganizationById(id);
      if (!organization) {
        return res.status(404).json({
          error: {
            code: 'NOT_FOUND',
            message: '组织不存在',
          },
        });
      }
      
      // 检查成员数量限制
      if (organization.member_count >= organization.max_members) {
        return res.status(400).json({
          error: {
            code: 'QUOTA_EXCEEDED',
            message: '已达到最大成员数量限制',
          },
        });
      }
      
      const user = userManager.getUserById(userId);
      if (!user) {
        return res.status(404).json({
          error: {
            code: 'NOT_FOUND',
            message: '用户不存在',
          },
        });
      }
      
      // 更新组织成员数（简化版，实际需要创建成员关联记录）
      const stmt = db.prepare(`
        UPDATE organizations 
        SET member_count = member_count + 1
        WHERE id = ?
      `);
      stmt.run(id);
      
      res.json({ success: true });
    } catch (error: any) {
      res.status(500).json({
        error: {
          code: 'INTERNAL_ERROR',
          message: error.message,
        },
      });
    }
  });

  /**
   * DELETE /api/organizations/:id/members/:userId
   * 移除成员
   */
  router.delete('/:id/members/:userId', (req: Request, res: Response) => {
    try {
      const { id, userId } = req.params;
      
      const organization = userManager.getOrganizationById(id);
      if (!organization) {
        return res.status(404).json({
          error: {
            code: 'NOT_FOUND',
            message: '组织不存在',
          },
        });
      }
      
      // 不能移除所有者
      if (userId === organization.owner_id) {
        return res.status(400).json({
          error: {
            code: 'VALIDATION_ERROR',
            message: '不能移除组织所有者',
          },
        });
      }
      
      // 更新组织成员数（简化版）
      const stmt = db.prepare(`
        UPDATE organizations 
        SET member_count = MAX(1, member_count - 1)
        WHERE id = ?
      `);
      stmt.run(id);
      
      res.json({ success: true });
    } catch (error: any) {
      res.status(500).json({
        error: {
          code: 'INTERNAL_ERROR',
          message: error.message,
        },
      });
    }
  });

  return router;
}
