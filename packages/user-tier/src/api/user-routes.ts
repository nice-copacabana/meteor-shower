// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-17
// Task: 实现用户管理API路由（6个端点）

/**
 * 用户管理API路由
 * 
 * 提供用户注册、登录、查询、升级等接口
 */

import { Router, Request, Response } from 'express';
import Database from 'better-sqlite3';
import { UserTierManagerV2, UserTier, PaymentMethod } from '../user-tier-manager-v2.js';
import { QuotaManagerV2 } from '../quota-manager-v2.js';

export function createUserRoutes(db: Database.Database): Router {
  const router = Router();
  const userManager = new UserTierManagerV2(db);
  const quotaManager = new QuotaManagerV2(db);

  /**
   * POST /api/users/register
   * 用户注册
   */
  router.post('/register', (req: Request, res: Response) => {
    try {
      const { email, password } = req.body;
      
      if (!email || !password) {
        return res.status(400).json({
          error: {
            code: 'VALIDATION_ERROR',
            message: '邮箱和密码不能为空',
          },
        });
      }
      
      // 检查邮箱是否已存在
      const existingUser = userManager.getUserByEmail(email);
      if (existingUser) {
        return res.status(400).json({
          error: {
            code: 'VALIDATION_ERROR',
            message: '该邮箱已被注册',
          },
        });
      }
      
      const user = userManager.createUser({ email, password, tier: 'FREE' });
      const token = Buffer.from(`${user.id}:${Date.now()}`).toString('base64');
      
      res.status(201).json({
        userId: user.id,
        tier: user.tier,
        token,
      });
    } catch (error: any) {
      res.status(500).json({
        error: {
          code: 'INTERNAL_ERROR',
          message: error.message,
        },
      });
    }
  });

  /**
   * POST /api/users/login
   * 用户登录
   */
  router.post('/login', (req: Request, res: Response) => {
    try {
      const { email, password } = req.body;
      
      if (!email || !password) {
        return res.status(400).json({
          error: {
            code: 'VALIDATION_ERROR',
            message: '邮箱和密码不能为空',
          },
        });
      }
      
      const result = userManager.loginUser(email, password);
      
      if (!result.success) {
        return res.status(401).json({
          error: {
            code: 'UNAUTHORIZED',
            message: '邮箱或密码错误',
          },
        });
      }
      
      res.json({
        userId: result.user!.id,
        tier: result.user!.tier,
        token: result.token,
      });
    } catch (error: any) {
      res.status(500).json({
        error: {
          code: 'INTERNAL_ERROR',
          message: error.message,
        },
      });
    }
  });

  /**
   * GET /api/users/:id
   * 获取用户信息
   */
  router.get('/:id', (req: Request, res: Response) => {
    try {
      const { id } = req.params;
      
      const user = userManager.getUserById(id);
      
      if (!user) {
        return res.status(404).json({
          error: {
            code: 'NOT_FOUND',
            message: '用户不存在',
          },
        });
      }
      
      const quota = quotaManager.getAllQuotas(id);
      
      res.json({
        id: user.id,
        email: user.email,
        tier: user.tier,
        quota,
        createdAt: new Date(user.created_at).toISOString(),
        lastLoginAt: user.last_login_at ? new Date(user.last_login_at).toISOString() : null,
      });
    } catch (error: any) {
      res.status(500).json({
        error: {
          code: 'INTERNAL_ERROR',
          message: error.message,
        },
      });
    }
  });

  /**
   * PUT /api/users/:id/tier
   * 升级用户层级
   */
  router.put('/:id/tier', (req: Request, res: Response) => {
    try {
      const { id } = req.params;
      const { newTier, paymentInfo } = req.body;
      
      if (!newTier) {
        return res.status(400).json({
          error: {
            code: 'VALIDATION_ERROR',
            message: '新层级不能为空',
          },
        });
      }
      
      const validTiers: UserTier[] = ['FREE', 'PROFESSIONAL', 'TEAM', 'ENTERPRISE'];
      if (!validTiers.includes(newTier)) {
        return res.status(400).json({
          error: {
            code: 'VALIDATION_ERROR',
            message: '无效的层级类型',
          },
        });
      }
      
      const result = userManager.upgradeUserTier(id, newTier, paymentInfo);
      
      if (!result.success) {
        return res.status(404).json({
          error: {
            code: 'NOT_FOUND',
            message: '用户不存在',
          },
        });
      }
      
      // 更新配额限制
      quotaManager.updateQuotaLimits(id);
      
      res.json({
        success: true,
        newTier,
        subscription: result.subscription,
      });
    } catch (error: any) {
      res.status(500).json({
        error: {
          code: 'INTERNAL_ERROR',
          message: error.message,
        },
      });
    }
  });

  /**
   * GET /api/users/:id/quota
   * 查询配额情况
   */
  router.get('/:id/quota', (req: Request, res: Response) => {
    try {
      const { id } = req.params;
      
      const user = userManager.getUserById(id);
      if (!user) {
        return res.status(404).json({
          error: {
            code: 'NOT_FOUND',
            message: '用户不存在',
          },
        });
      }
      
      const quotas = quotaManager.getAllQuotas(id);
      
      res.json(quotas);
    } catch (error: any) {
      res.status(500).json({
        error: {
          code: 'INTERNAL_ERROR',
          message: error.message,
        },
      });
    }
  });

  /**
   * POST /api/users/:id/quota/check
   * 检查配额
   */
  router.post('/:id/quota/check', (req: Request, res: Response) => {
    try {
      const { id } = req.params;
      const { resourceType, requestCount = 1 } = req.body;
      
      if (!resourceType) {
        return res.status(400).json({
          error: {
            code: 'VALIDATION_ERROR',
            message: '资源类型不能为空',
          },
        });
      }
      
      const result = quotaManager.checkQuota(id, resourceType, requestCount);
      
      res.json({
        allowed: result.allowed,
        remaining: result.remaining,
      });
    } catch (error: any) {
      res.status(500).json({
        error: {
          code: 'INTERNAL_ERROR',
          message: error.message,
        },
      });
    }
  });

  return router;
}
