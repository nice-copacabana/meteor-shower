// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-15
// Task: M6 Phase3 - 功能开关控制系统

import { UserTier } from '../types.js';

/**
 * 功能标识枚举
 */
export enum Feature {
  /** 云端备份 */
  CLOUD_BACKUP = 'cloud_backup',
  
  /** 私有云端存储 */
  PRIVATE_CLOUD_STORAGE = 'private_cloud_storage',
  
  /** AI增强功能 */
  AI_ENHANCEMENT = 'ai_enhancement',
  
  /** 团队协作 */
  TEAM_COLLABORATION = 'team_collaboration',
  
  /** 高级模板 */
  ADVANCED_TEMPLATES = 'advanced_templates',
  
  /** 优先支持 */
  PRIORITY_SUPPORT = 'priority_support',
  
  /** 审计日志 */
  AUDIT_LOGS = 'audit_logs',
  
  /** SSO单点登录 */
  SSO = 'sso',
  
  /** RBAC权限管理 */
  RBAC = 'rbac',
  
  /** 私有化部署 */
  PRIVATE_DEPLOYMENT = 'private_deployment',
  
  /** 自定义域名 */
  CUSTOM_DOMAIN = 'custom_domain',
  
  /** 批量操作 */
  BULK_OPERATIONS = 'bulk_operations',
  
  /** 高级分析 */
  ADVANCED_ANALYTICS = 'advanced_analytics',
  
  /** API访问 */
  API_ACCESS = 'api_access',
}

/**
 * 功能可用性矩阵
 */
export const FEATURE_AVAILABILITY: Record<UserTier, Feature[]> = {
  [UserTier.FREE]: [
    // 免费版只有基础功能
  ],
  
  [UserTier.PROFESSIONAL]: [
    Feature.CLOUD_BACKUP,
    Feature.PRIVATE_CLOUD_STORAGE,
    Feature.AI_ENHANCEMENT,
    Feature.ADVANCED_TEMPLATES,
    Feature.PRIORITY_SUPPORT,
    Feature.API_ACCESS,
  ],
  
  [UserTier.TEAM]: [
    Feature.CLOUD_BACKUP,
    Feature.PRIVATE_CLOUD_STORAGE,
    Feature.AI_ENHANCEMENT,
    Feature.TEAM_COLLABORATION,
    Feature.ADVANCED_TEMPLATES,
    Feature.PRIORITY_SUPPORT,
    Feature.AUDIT_LOGS,
    Feature.BULK_OPERATIONS,
    Feature.ADVANCED_ANALYTICS,
    Feature.API_ACCESS,
  ],
  
  [UserTier.ENTERPRISE]: [
    Feature.CLOUD_BACKUP,
    Feature.PRIVATE_CLOUD_STORAGE,
    Feature.AI_ENHANCEMENT,
    Feature.TEAM_COLLABORATION,
    Feature.ADVANCED_TEMPLATES,
    Feature.PRIORITY_SUPPORT,
    Feature.AUDIT_LOGS,
    Feature.SSO,
    Feature.RBAC,
    Feature.PRIVATE_DEPLOYMENT,
    Feature.CUSTOM_DOMAIN,
    Feature.BULK_OPERATIONS,
    Feature.ADVANCED_ANALYTICS,
    Feature.API_ACCESS,
  ],
};

/**
 * 功能检查结果
 */
export interface FeatureCheckResult {
  /** 是否可用 */
  available: boolean;
  
  /** 功能标识 */
  feature: Feature;
  
  /** 用户层级 */
  tier: UserTier;
  
  /** 不可用原因 */
  reason?: string;
  
  /** 升级建议 */
  upgradeRecommendation?: {
    suggestedTier: UserTier;
    benefits: string[];
  };
}

/**
 * 功能开关管理器
 */
export class FeatureManager {
  /**
   * 检查功能是否可用
   */
  checkFeature(tier: UserTier, feature: Feature): FeatureCheckResult {
    const availableFeatures = FEATURE_AVAILABILITY[tier] || [];
    const available = availableFeatures.includes(feature);

    if (available) {
      return {
        available: true,
        feature,
        tier,
      };
    }

    // 找到最低可用该功能的层级
    const suggestedTier = this.findMinimumTierForFeature(feature);
    
    return {
      available: false,
      feature,
      tier,
      reason: `当前层级 (${tier}) 不支持该功能`,
      upgradeRecommendation: suggestedTier ? {
        suggestedTier,
        benefits: this.getUpgradeBenefits(tier, suggestedTier),
      } : undefined,
    };
  }

  /**
   * 批量检查功能
   */
  checkFeatures(tier: UserTier, features: Feature[]): Record<Feature, FeatureCheckResult> {
    const results: any = {};
    
    for (const feature of features) {
      results[feature] = this.checkFeature(tier, feature);
    }
    
    return results;
  }

  /**
   * 获取层级的所有可用功能
   */
  getAvailableFeatures(tier: UserTier): Feature[] {
    return FEATURE_AVAILABILITY[tier] || [];
  }

  /**
   * 获取层级不可用的功能
   */
  getUnavailableFeatures(tier: UserTier): Feature[] {
    const available = new Set(this.getAvailableFeatures(tier));
    const all = Object.values(Feature) as Feature[];
    
    return all.filter(f => !available.has(f));
  }

  /**
   * 获取功能描述
   */
  getFeatureDescription(feature: Feature): string {
    const descriptions: Record<Feature, string> = {
      [Feature.CLOUD_BACKUP]: '云端备份 - 自动备份配置到云端',
      [Feature.PRIVATE_CLOUD_STORAGE]: '私有云端存储 - 私有化的云端存储空间',
      [Feature.AI_ENHANCEMENT]: 'AI增强功能 - AI辅助配置优化和建议',
      [Feature.TEAM_COLLABORATION]: '团队协作 - 多人协作编辑和共享',
      [Feature.ADVANCED_TEMPLATES]: '高级模板 - 访问专业级模板库',
      [Feature.PRIORITY_SUPPORT]: '优先支持 - 优先级技术支持服务',
      [Feature.AUDIT_LOGS]: '审计日志 - 完整的操作审计记录',
      [Feature.SSO]: 'SSO单点登录 - 企业级单点登录集成',
      [Feature.RBAC]: 'RBAC权限管理 - 基于角色的访问控制',
      [Feature.PRIVATE_DEPLOYMENT]: '私有化部署 - 本地化部署方案',
      [Feature.CUSTOM_DOMAIN]: '自定义域名 - 使用自己的域名',
      [Feature.BULK_OPERATIONS]: '批量操作 - 批量管理和操作功能',
      [Feature.ADVANCED_ANALYTICS]: '高级分析 - 深度数据分析和报表',
      [Feature.API_ACCESS]: 'API访问 - 完整的API访问权限',
    };
    
    return descriptions[feature] || feature;
  }

  /**
   * 查找功能的最低可用层级
   */
  private findMinimumTierForFeature(feature: Feature): UserTier | null {
    const tiers = [UserTier.FREE, UserTier.PROFESSIONAL, UserTier.TEAM, UserTier.ENTERPRISE];
    
    for (const tier of tiers) {
      const features = FEATURE_AVAILABILITY[tier];
      if (features.includes(feature)) {
        return tier;
      }
    }
    
    return null;
  }

  /**
   * 获取升级带来的好处
   */
  private getUpgradeBenefits(fromTier: UserTier, toTier: UserTier): string[] {
    const fromFeatures = new Set(this.getAvailableFeatures(fromTier));
    const toFeatures = this.getAvailableFeatures(toTier);
    
    const newFeatures = toFeatures.filter(f => !fromFeatures.has(f));
    
    return newFeatures.map(f => this.getFeatureDescription(f));
  }

  /**
   * 比较两个层级的功能差异
   */
  compareFeatures(tier1: UserTier, tier2: UserTier): {
    common: Feature[];
    onlyInTier1: Feature[];
    onlyInTier2: Feature[];
  } {
    const features1 = new Set(this.getAvailableFeatures(tier1));
    const features2 = new Set(this.getAvailableFeatures(tier2));
    
    const common: Feature[] = [];
    const onlyInTier1: Feature[] = [];
    const onlyInTier2: Feature[] = [];
    
    for (const f of features1) {
      if (features2.has(f)) {
        common.push(f);
      } else {
        onlyInTier1.push(f);
      }
    }
    
    for (const f of features2) {
      if (!features1.has(f)) {
        onlyInTier2.push(f);
      }
    }
    
    return { common, onlyInTier1, onlyInTier2 };
  }
}
