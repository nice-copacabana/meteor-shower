// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-15
// Task: M6 Phase4 - 退款流程管理器实现

import { DatabaseManager } from '../database/manager.js';
import { PaymentProvider, PaymentStatus, PaymentOrder } from './payment-types.js';
import { PaymentManager } from './payment-manager.js';
import { nanoid } from 'nanoid';

/**
 * 退款状态
 */
export enum RefundStatus {
  /** 待处理 */
  PENDING = 'pending',
  /** 处理中 */
  PROCESSING = 'processing',
  /** 成功 */
  SUCCESS = 'success',
  /** 失败 */
  FAILED = 'failed',
  /** 已拒绝 */
  REJECTED = 'rejected',
}

/**
 * 退款原因
 */
export enum RefundReason {
  /** 用户主动退款 */
  USER_REQUEST = 'user_request',
  /** 服务问题 */
  SERVICE_ISSUE = 'service_issue',
  /** 重复支付 */
  DUPLICATE_PAYMENT = 'duplicate_payment',
  /** 订单取消 */
  ORDER_CANCELLED = 'order_cancelled',
  /** 欺诈检测 */
  FRAUD_DETECTED = 'fraud_detected',
  /** 其他原因 */
  OTHER = 'other',
}

/**
 * 退款类型
 */
export enum RefundType {
  /** 全额退款 */
  FULL = 'full',
  /** 部分退款 */
  PARTIAL = 'partial',
}

/**
 * 退款申请
 */
export interface RefundRequest {
  /** 订单ID */
  orderId: string;
  /** 用户ID */
  userId: string;
  /** 退款金额（分）不填表示全额退款 */
  amount?: number;
  /** 退款原因 */
  reason: RefundReason;
  /** 详细说明 */
  description?: string;
  /** 附件（截图等） */
  attachments?: string[];
}

/**
 * 退款记录
 */
export interface RefundRecord {
  /** 退款ID */
  id: string;
  /** 订单ID */
  orderId: string;
  /** 用户ID */
  userId: string;
  /** 支付提供商 */
  provider: PaymentProvider;
  /** 退款类型 */
  type: RefundType;
  /** 退款金额（分） */
  amount: number;
  /** 原订单金额（分） */
  originalAmount: number;
  /** 退款原因 */
  reason: RefundReason;
  /** 详细说明 */
  description?: string;
  /** 退款状态 */
  status: RefundStatus;
  /** 支付网关退款ID */
  refundTransactionId?: string;
  /** 申请时间 */
  requestedAt: Date;
  /** 处理时间 */
  processedAt?: Date;
  /** 完成时间 */
  completedAt?: Date;
  /** 拒绝原因 */
  rejectionReason?: string;
  /** 审批人ID */
  approvedBy?: string;
  /** 附件 */
  attachments?: string[];
  /** 元数据 */
  metadata?: Record<string, any>;
}

/**
 * 退款审批结果
 */
export interface RefundApproval {
  /** 是否批准 */
  approved: boolean;
  /** 批准/拒绝原因 */
  reason?: string;
  /** 审批人ID */
  approvedBy: string;
  /** 审批时间 */
  approvedAt: Date;
}

/**
 * 退款统计
 */
export interface RefundStatistics {
  /** 总退款次数 */
  totalRefunds: number;
  /** 成功退款次数 */
  successfulRefunds: number;
  /** 失败退款次数 */
  failedRefunds: number;
  /** 总退款金额（分） */
  totalAmount: number;
  /** 按原因分类的统计 */
  byReason: Record<RefundReason, number>;
  /** 按提供商分类的统计 */
  byProvider: Record<PaymentProvider, number>;
}

/**
 * 退款管理器
 */
export class RefundManager {
  constructor(
    private dbManager: DatabaseManager,
    private paymentManager: PaymentManager
  ) {}

  /**
   * 申请退款
   */
  async requestRefund(request: RefundRequest): Promise<RefundRecord> {
    // 查询原订单
    const order = await this.paymentManager.queryPayment(request.orderId);
    if (!order) {
      throw new Error('订单不存在');
    }

    // 验证订单所有权
    if (order.userId !== request.userId) {
      throw new Error('无权操作此订单');
    }

    // 验证订单状态
    if (order.status !== PaymentStatus.SUCCESS) {
      throw new Error(`订单状态不允许退款: ${order.status}`);
    }

    // 检查是否已经退款
    const existingRefund = await this.getRefundByOrderId(request.orderId);
    if (existingRefund && existingRefund.status !== RefundStatus.FAILED) {
      throw new Error('该订单已申请退款');
    }

    // 计算退款金额
    const refundAmount = request.amount || order.amount;
    
    // 验证退款金额
    if (refundAmount <= 0 || refundAmount > order.amount) {
      throw new Error('退款金额无效');
    }

    // 创建退款记录
    const refund: RefundRecord = {
      id: `refund_${Date.now()}_${nanoid(8)}`,
      orderId: request.orderId,
      userId: request.userId,
      provider: order.provider,
      type: refundAmount === order.amount ? RefundType.FULL : RefundType.PARTIAL,
      amount: refundAmount,
      originalAmount: order.amount,
      reason: request.reason,
      description: request.description,
      status: RefundStatus.PENDING,
      requestedAt: new Date(),
      attachments: request.attachments,
    };

    // 保存退款记录
    await this.saveRefundRecord(refund);

    // 如果是自动批准的原因，直接处理
    if (this.shouldAutoApprove(request.reason)) {
      await this.processRefund(refund.id, {
        approved: true,
        reason: '自动批准',
        approvedBy: 'system',
        approvedAt: new Date(),
      });
    }

    return refund;
  }

  /**
   * 审批退款
   */
  async approveRefund(refundId: string, approval: RefundApproval): Promise<RefundRecord> {
    const refund = await this.getRefundById(refundId);
    if (!refund) {
      throw new Error('退款记录不存在');
    }

    if (refund.status !== RefundStatus.PENDING) {
      throw new Error(`退款状态不允许审批: ${refund.status}`);
    }

    if (approval.approved) {
      return await this.processRefund(refundId, approval);
    } else {
      return await this.rejectRefund(refundId, approval);
    }
  }

  /**
   * 处理退款
   */
  private async processRefund(
    refundId: string,
    approval: RefundApproval
  ): Promise<RefundRecord> {
    const refund = await this.getRefundById(refundId);
    if (!refund) {
      throw new Error('退款记录不存在');
    }

    // 更新状态为处理中
    await this.updateRefundStatus(refundId, RefundStatus.PROCESSING, {
      processedAt: new Date(),
      approvedBy: approval.approvedBy,
    });

    try {
      // 调用支付网关退款
      const success = await this.paymentManager.refundPayment(
        refund.orderId,
        refund.amount,
        refund.description
      );

      if (success) {
        // 更新状态为成功
        await this.updateRefundStatus(refundId, RefundStatus.SUCCESS, {
          completedAt: new Date(),
        });

        // 如果是全额退款，取消相关订阅
        if (refund.type === RefundType.FULL) {
          await this.handleFullRefund(refund.orderId);
        }
      } else {
        // 更新状态为失败
        await this.updateRefundStatus(refundId, RefundStatus.FAILED);
      }

      return (await this.getRefundById(refundId))!;
    } catch (error: any) {
      // 更新状态为失败
      await this.updateRefundStatus(refundId, RefundStatus.FAILED, {
        rejectionReason: error.message,
      });
      throw error;
    }
  }

  /**
   * 拒绝退款
   */
  private async rejectRefund(
    refundId: string,
    approval: RefundApproval
  ): Promise<RefundRecord> {
    await this.updateRefundStatus(refundId, RefundStatus.REJECTED, {
      rejectionReason: approval.reason,
      processedAt: new Date(),
      approvedBy: approval.approvedBy,
    });

    return (await this.getRefundById(refundId))!;
  }

  /**
   * 查询退款记录
   */
  async getRefundById(refundId: string): Promise<RefundRecord | null> {
    // TODO: 从数据库查询
    return null;
  }

  /**
   * 根据订单ID查询退款
   */
  async getRefundByOrderId(orderId: string): Promise<RefundRecord | null> {
    // TODO: 从数据库查询
    return null;
  }

  /**
   * 获取用户的退款记录
   */
  async getUserRefunds(userId: string, limit: number = 10): Promise<RefundRecord[]> {
    // TODO: 从数据库查询
    return [];
  }

  /**
   * 获取待审批的退款列表
   */
  async getPendingRefunds(limit: number = 20): Promise<RefundRecord[]> {
    // TODO: 从数据库查询
    return [];
  }

  /**
   * 获取退款统计
   */
  async getRefundStatistics(
    userId?: string,
    startDate?: Date,
    endDate?: Date
  ): Promise<RefundStatistics> {
    // TODO: 从数据库聚合查询
    return {
      totalRefunds: 0,
      successfulRefunds: 0,
      failedRefunds: 0,
      totalAmount: 0,
      byReason: {} as any,
      byProvider: {} as any,
    };
  }

  /**
   * 批量处理退款
   */
  async batchProcessRefunds(
    refundIds: string[],
    approval: RefundApproval
  ): Promise<RefundRecord[]> {
    const results: RefundRecord[] = [];

    for (const refundId of refundIds) {
      try {
        const result = await this.approveRefund(refundId, approval);
        results.push(result);
      } catch (error: any) {
        console.error(`处理退款失败 ${refundId}:`, error.message);
      }
    }

    return results;
  }

  /**
   * 是否自动批准
   */
  private shouldAutoApprove(reason: RefundReason): boolean {
    // 重复支付和欺诈检测自动批准
    return reason === RefundReason.DUPLICATE_PAYMENT || 
           reason === RefundReason.FRAUD_DETECTED;
  }

  /**
   * 处理全额退款后续操作
   */
  private async handleFullRefund(orderId: string): Promise<void> {
    // 取消订阅
    // 恢复配额使用量
    // 记录审计日志
    // TODO: 实现具体业务逻辑
  }

  /**
   * 保存退款记录
   */
  private async saveRefundRecord(refund: RefundRecord): Promise<void> {
    // TODO: 保存到数据库
    // 实际项目中需要创建 refund_records 表
  }

  /**
   * 更新退款状态
   */
  private async updateRefundStatus(
    refundId: string,
    status: RefundStatus,
    updates?: Partial<RefundRecord>
  ): Promise<void> {
    // TODO: 更新数据库
  }

  /**
   * 检查退款期限
   */
  async checkRefundEligibility(orderId: string): Promise<{
    eligible: boolean;
    reason?: string;
    daysRemaining?: number;
  }> {
    const order = await this.paymentManager.queryPayment(orderId);
    if (!order) {
      return { eligible: false, reason: '订单不存在' };
    }

    if (order.status !== PaymentStatus.SUCCESS) {
      return { eligible: false, reason: '订单未支付成功' };
    }

    // 检查退款期限（30天内可退款）
    const refundDeadline = new Date(order.paidAt!.getTime() + 30 * 24 * 60 * 60 * 1000);
    const now = new Date();

    if (now > refundDeadline) {
      return { eligible: false, reason: '已超过退款期限（30天）' };
    }

    const daysRemaining = Math.ceil(
      (refundDeadline.getTime() - now.getTime()) / (24 * 60 * 60 * 1000)
    );

    // 检查是否已经退款
    const existingRefund = await this.getRefundByOrderId(orderId);
    if (existingRefund && existingRefund.status !== RefundStatus.FAILED) {
      return { eligible: false, reason: '已申请退款' };
    }

    return { eligible: true, daysRemaining };
  }
}
