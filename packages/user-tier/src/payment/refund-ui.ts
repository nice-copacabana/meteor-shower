// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-15
// Task: M6 Phase4 - 退款用户界面和交互逻辑

import chalk from 'chalk';
import {
  RefundManager,
  RefundRequest,
  RefundRecord,
  RefundReason,
  RefundStatus,
  RefundType,
} from './refund-manager.js';
import { PaymentManager } from './payment-manager.js';

/**
 * 退款UI选项
 */
export interface RefundUIOptions {
  /** 是否显示详细信息 */
  verbose?: boolean;
  /** 是否使用颜色 */
  colored?: boolean;
}

/**
 * 退款用户界面
 */
export class RefundUI {
  constructor(
    private refundManager: RefundManager,
    private paymentManager: PaymentManager
  ) {}

  /**
   * 显示退款申请表单
   */
  async displayRefundForm(orderId: string, userId: string): Promise<void> {
    console.log(chalk.bold('\n📝 退款申请表单'));
    console.log(chalk.gray('─'.repeat(50)));

    // 检查退款资格
    const eligibility = await this.refundManager.checkRefundEligibility(orderId);
    
    if (!eligibility.eligible) {
      console.log(chalk.red(`❌ 不符合退款条件: ${eligibility.reason}`));
      return;
    }

    // 显示订单信息
    const order = await this.paymentManager.queryPayment(orderId);
    if (order) {
      console.log(chalk.cyan('\n订单信息:'));
      console.log(`  订单号: ${order.id}`);
      console.log(`  金额: ¥${(order.amount / 100).toFixed(2)}`);
      console.log(`  支付时间: ${order.paidAt?.toLocaleString('zh-CN')}`);
    }

    console.log(chalk.green(`\n✅ 可申请退款，剩余 ${eligibility.daysRemaining} 天`));
    console.log(chalk.gray('\n请选择退款原因:'));
    console.log('  1. 用户主动退款');
    console.log('  2. 服务问题');
    console.log('  3. 重复支付');
    console.log('  4. 订单取消');
    console.log('  5. 其他原因');
  }

  /**
   * 显示退款记录详情
   */
  async displayRefundDetails(
    refundId: string,
    options: RefundUIOptions = {}
  ): Promise<void> {
    const refund = await this.refundManager.getRefundById(refundId);
    if (!refund) {
      console.log(chalk.red('❌ 退款记录不存在'));
      return;
    }

    const colored = options.colored ?? true;
    
    console.log(chalk.bold('\n💰 退款详情'));
    console.log(chalk.gray('─'.repeat(60)));

    // 基本信息
    console.log(chalk.cyan('\n基本信息:'));
    console.log(`  退款ID: ${refund.id}`);
    console.log(`  订单ID: ${refund.orderId}`);
    console.log(`  用户ID: ${refund.userId}`);

    // 金额信息
    console.log(chalk.cyan('\n金额信息:'));
    console.log(`  退款类型: ${this.getRefundTypeLabel(refund.type)}`);
    console.log(`  退款金额: ${colored ? chalk.yellow(`¥${(refund.amount / 100).toFixed(2)}`) : `¥${(refund.amount / 100).toFixed(2)}`}`);
    console.log(`  原订单金额: ¥${(refund.originalAmount / 100).toFixed(2)}`);

    // 状态信息
    console.log(chalk.cyan('\n状态信息:'));
    console.log(`  退款状态: ${this.formatRefundStatus(refund.status, colored)}`);
    console.log(`  申请时间: ${refund.requestedAt.toLocaleString('zh-CN')}`);
    
    if (refund.processedAt) {
      console.log(`  处理时间: ${refund.processedAt.toLocaleString('zh-CN')}`);
    }
    
    if (refund.completedAt) {
      console.log(`  完成时间: ${refund.completedAt.toLocaleString('zh-CN')}`);
    }

    // 退款原因
    console.log(chalk.cyan('\n退款原因:'));
    console.log(`  原因: ${this.getRefundReasonLabel(refund.reason)}`);
    
    if (refund.description) {
      console.log(`  说明: ${refund.description}`);
    }

    // 审批信息
    if (refund.approvedBy) {
      console.log(chalk.cyan('\n审批信息:'));
      console.log(`  审批人: ${refund.approvedBy}`);
      
      if (refund.rejectionReason) {
        console.log(`  ${colored ? chalk.red('拒绝原因') : '拒绝原因'}: ${refund.rejectionReason}`);
      }
    }

    // 交易信息
    if (refund.refundTransactionId) {
      console.log(chalk.cyan('\n交易信息:'));
      console.log(`  退款交易号: ${refund.refundTransactionId}`);
    }

    console.log();
  }

  /**
   * 显示用户退款列表
   */
  async displayUserRefunds(
    userId: string,
    options: RefundUIOptions = {}
  ): Promise<void> {
    const refunds = await this.refundManager.getUserRefunds(userId);
    
    console.log(chalk.bold('\n📋 我的退款记录'));
    console.log(chalk.gray('─'.repeat(80)));

    if (refunds.length === 0) {
      console.log(chalk.yellow('\n暂无退款记录'));
      return;
    }

    const colored = options.colored ?? true;

    console.log();
    for (const refund of refunds) {
      const statusBadge = this.formatRefundStatus(refund.status, colored);
      const amount = colored 
        ? chalk.yellow(`¥${(refund.amount / 100).toFixed(2)}`)
        : `¥${(refund.amount / 100).toFixed(2)}`;
      
      console.log(`${statusBadge} ${amount} - ${refund.id}`);
      console.log(chalk.gray(`    订单: ${refund.orderId} | 申请时间: ${refund.requestedAt.toLocaleDateString('zh-CN')}`));
      
      if (options.verbose && refund.description) {
        console.log(chalk.gray(`    说明: ${refund.description}`));
      }
      
      console.log();
    }
  }

  /**
   * 显示待审批退款列表（管理员用）
   */
  async displayPendingRefunds(options: RefundUIOptions = {}): Promise<void> {
    const refunds = await this.refundManager.getPendingRefunds();
    
    console.log(chalk.bold('\n⏳ 待审批退款列表'));
    console.log(chalk.gray('─'.repeat(80)));

    if (refunds.length === 0) {
      console.log(chalk.green('\n✅ 暂无待审批退款'));
      return;
    }

    const colored = options.colored ?? true;

    console.log(chalk.yellow(`\n共 ${refunds.length} 条待处理退款:\n`));

    for (const refund of refunds) {
      const amount = colored 
        ? chalk.yellow(`¥${(refund.amount / 100).toFixed(2)}`)
        : `¥${(refund.amount / 100).toFixed(2)}`;
      
      console.log(`${amount} - ${refund.id}`);
      console.log(chalk.gray(`    用户: ${refund.userId} | 订单: ${refund.orderId}`));
      console.log(chalk.gray(`    原因: ${this.getRefundReasonLabel(refund.reason)}`));
      
      if (refund.description) {
        console.log(chalk.gray(`    说明: ${refund.description}`));
      }
      
      const daysAgo = Math.floor(
        (Date.now() - refund.requestedAt.getTime()) / (24 * 60 * 60 * 1000)
      );
      console.log(chalk.gray(`    申请时间: ${refund.requestedAt.toLocaleString('zh-CN')} (${daysAgo}天前)`));
      console.log();
    }
  }

  /**
   * 显示退款统计
   */
  async displayRefundStatistics(
    userId?: string,
    options: RefundUIOptions = {}
  ): Promise<void> {
    const stats = await this.refundManager.getRefundStatistics(userId);
    
    const title = userId ? '📊 退款统计（个人）' : '📊 退款统计（全局）';
    console.log(chalk.bold(`\n${title}`));
    console.log(chalk.gray('─'.repeat(60)));

    const colored = options.colored ?? true;

    // 总体统计
    console.log(chalk.cyan('\n总体统计:'));
    console.log(`  总退款次数: ${stats.totalRefunds}`);
    console.log(`  成功退款: ${colored ? chalk.green(stats.successfulRefunds.toString()) : stats.successfulRefunds}`);
    console.log(`  失败退款: ${colored ? chalk.red(stats.failedRefunds.toString()) : stats.failedRefunds}`);
    console.log(`  成功率: ${stats.totalRefunds > 0 ? ((stats.successfulRefunds / stats.totalRefunds) * 100).toFixed(1) : 0}%`);
    console.log(`  总退款金额: ${colored ? chalk.yellow(`¥${(stats.totalAmount / 100).toFixed(2)}`) : `¥${(stats.totalAmount / 100).toFixed(2)}`}`);

    // 按原因分类
    if (Object.keys(stats.byReason).length > 0) {
      console.log(chalk.cyan('\n按原因分类:'));
      for (const [reason, count] of Object.entries(stats.byReason)) {
        console.log(`  ${this.getRefundReasonLabel(reason as RefundReason)}: ${count}`);
      }
    }

    // 按支付方式分类
    if (Object.keys(stats.byProvider).length > 0) {
      console.log(chalk.cyan('\n按支付方式分类:'));
      for (const [provider, count] of Object.entries(stats.byProvider)) {
        console.log(`  ${provider}: ${count}`);
      }
    }

    console.log();
  }

  /**
   * 格式化退款状态
   */
  private formatRefundStatus(status: RefundStatus, colored: boolean = true): string {
    if (!colored) {
      return `[${status}]`;
    }

    switch (status) {
      case RefundStatus.PENDING:
        return chalk.yellow('⏳ 待审批');
      case RefundStatus.PROCESSING:
        return chalk.blue('⚙️  处理中');
      case RefundStatus.SUCCESS:
        return chalk.green('✅ 已完成');
      case RefundStatus.FAILED:
        return chalk.red('❌ 失败');
      case RefundStatus.REJECTED:
        return chalk.red('🚫 已拒绝');
      default:
        return chalk.gray(`[${status}]`);
    }
  }

  /**
   * 获取退款类型标签
   */
  private getRefundTypeLabel(type: RefundType): string {
    switch (type) {
      case RefundType.FULL:
        return '全额退款';
      case RefundType.PARTIAL:
        return '部分退款';
      default:
        return type;
    }
  }

  /**
   * 获取退款原因标签
   */
  private getRefundReasonLabel(reason: RefundReason): string {
    switch (reason) {
      case RefundReason.USER_REQUEST:
        return '用户主动退款';
      case RefundReason.SERVICE_ISSUE:
        return '服务问题';
      case RefundReason.DUPLICATE_PAYMENT:
        return '重复支付';
      case RefundReason.ORDER_CANCELLED:
        return '订单取消';
      case RefundReason.FRAUD_DETECTED:
        return '欺诈检测';
      case RefundReason.OTHER:
        return '其他原因';
      default:
        return reason;
    }
  }

  /**
   * 显示退款成功提示
   */
  displayRefundSuccess(refund: RefundRecord): void {
    console.log(chalk.green('\n✅ 退款申请已提交'));
    console.log(chalk.gray('─'.repeat(50)));
    console.log(`退款ID: ${refund.id}`);
    console.log(`退款金额: ${chalk.yellow(`¥${(refund.amount / 100).toFixed(2)}`)}`);
    
    if (refund.status === RefundStatus.PENDING) {
      console.log(chalk.yellow('\n⏳ 退款申请待审批，请耐心等待...'));
      console.log(chalk.gray('通常会在1-3个工作日内处理'));
    } else if (refund.status === RefundStatus.SUCCESS) {
      console.log(chalk.green('\n✅ 退款已自动批准并处理'));
      console.log(chalk.gray('退款将在3-5个工作日内到账'));
    }
    
    console.log();
  }

  /**
   * 显示退款失败提示
   */
  displayRefundError(error: Error): void {
    console.log(chalk.red('\n❌ 退款申请失败'));
    console.log(chalk.gray('─'.repeat(50)));
    console.log(chalk.red(`错误: ${error.message}`));
    console.log(chalk.gray('\n如有疑问，请联系客服'));
    console.log();
  }
}
