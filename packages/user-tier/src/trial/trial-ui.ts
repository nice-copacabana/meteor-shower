// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-15
// Task: M6 Phase5 - 试用期UI展示和交互

import chalk from 'chalk';
import { TrialInfo, TrialStatus, TrialManager } from './trial-manager.js';
import { UserTier } from '../types.js';

/**
 * 试用期UI选项
 */
export interface TrialUIOptions {
  /** 是否显示详细信息 */
  verbose?: boolean;
  /** 是否使用颜色 */
  colored?: boolean;
}

/**
 * 试用期用户界面
 */
export class TrialUI {
  constructor(private trialManager: TrialManager) {}

  /**
   * 显示试用期信息卡片
   */
  async displayTrialCard(userId: string, options: TrialUIOptions = {}): Promise<void> {
    const trial = await this.trialManager.getUserActiveTrial(userId);
    
    if (!trial) {
      console.log(chalk.gray('\n暂无进行中的试用期'));
      return;
    }

    const colored = options.colored ?? true;

    console.log(chalk.bold('\n🎁 试用期信息\n'));
    console.log(chalk.gray('─'.repeat(60)));

    // 层级信息
    const tierName = this.getTierName(trial.tier);
    console.log(chalk.cyan('试用方案:'), chalk.bold(tierName));

    // 状态信息
    const statusBadge = this.formatStatus(trial.status, colored);
    console.log(chalk.cyan('试用状态:'), statusBadge);

    // 时间信息
    console.log(chalk.cyan('开始时间:'), trial.startDate.toLocaleDateString('zh-CN'));
    console.log(chalk.cyan('结束时间:'), trial.endDate.toLocaleDateString('zh-CN'));

    // 剩余天数（高亮显示）
    const daysDisplay = this.formatDaysRemaining(trial.daysRemaining, colored);
    console.log(chalk.cyan('剩余时间:'), daysDisplay);

    // 进度条
    this.displayTrialProgress(trial, colored);

    // 行动建议
    this.displayActionSuggestions(trial);

    console.log(chalk.gray('─'.repeat(60)));
    console.log();
  }

  /**
   * 显示试用期进度条
   */
  private displayTrialProgress(trial: TrialInfo, colored: boolean = true): void {
    const totalDays = Math.ceil(
      (trial.endDate.getTime() - trial.startDate.getTime()) / (24 * 60 * 60 * 1000)
    );
    const usedDays = totalDays - trial.daysRemaining;
    const percentage = (usedDays / totalDays) * 100;

    const barLength = 40;
    const filled = Math.round((percentage / 100) * barLength);
    const empty = barLength - filled;

    let barColor = chalk.green;
    if (percentage > 80) {
      barColor = chalk.red;
    } else if (percentage > 60) {
      barColor = chalk.yellow;
    }

    const progressBar = colored
      ? `${barColor('█'.repeat(filled))}${chalk.gray('░'.repeat(empty))}`
      : `${'█'.repeat(filled)}${'░'.repeat(empty)}`;

    console.log(chalk.cyan('\n试用进度:'));
    console.log(`${progressBar} ${percentage.toFixed(0)}%`);
    console.log(chalk.gray(`已使用 ${usedDays} 天 / 共 ${totalDays} 天`));
  }

  /**
   * 显示行动建议
   */
  private displayActionSuggestions(trial: TrialInfo): void {
    console.log(chalk.cyan('\n💡 建议:'));

    if (trial.daysRemaining <= 1) {
      console.log(chalk.red('⚠️  试用期即将结束！'));
      console.log(chalk.yellow('   立即升级以继续使用所有功能'));
      console.log(chalk.gray('   命令: meteor-shower upgrade'));
    } else if (trial.daysRemaining <= 3) {
      console.log(chalk.yellow('⏰ 试用期快结束了'));
      console.log(chalk.gray('   考虑升级到正式版本'));
      console.log(chalk.gray('   命令: meteor-shower upgrade'));
    } else {
      console.log(chalk.green('✓ 尽情体验所有功能'));
      console.log(chalk.gray('  如有疑问，请查看文档或联系客服'));
    }
  }

  /**
   * 显示试用期欢迎信息
   */
  displayTrialWelcome(trial: TrialInfo): void {
    const tierName = this.getTierName(trial.tier);

    console.log(chalk.bold.green('\n🎉 欢迎开始试用！\n'));
    console.log(chalk.gray('─'.repeat(60)));
    console.log(chalk.cyan(`您已成功开始 ${chalk.bold(tierName)} 的试用期`));
    console.log(chalk.cyan(`试用期限: ${chalk.bold(trial.daysRemaining + ' 天')}`));
    console.log(chalk.cyan(`到期时间: ${chalk.bold(trial.endDate.toLocaleDateString('zh-CN'))}`));
    console.log(chalk.gray('─'.repeat(60)));

    console.log(chalk.bold('\n✨ 您现在可以:'));
    const features = this.getTierFeatures(trial.tier);
    features.forEach(feature => {
      console.log(chalk.green('  ✓'), feature);
    });

    console.log(chalk.bold('\n📝 温馨提示:'));
    console.log(chalk.gray('  • 试用期内可随时取消，不会产生费用'));
    console.log(chalk.gray('  • 我们会在试用期结束前提醒您'));
    console.log(chalk.gray('  • 如需帮助，请随时联系客服'));

    console.log(chalk.bold('\n🚀 开始探索吧！\n'));
  }

  /**
   * 显示试用期结束提示
   */
  displayTrialExpired(trial: TrialInfo): void {
    console.log(chalk.bold.red('\n⏰ 试用期已结束\n'));
    console.log(chalk.gray('─'.repeat(60)));
    console.log(chalk.cyan(`您的 ${this.getTierName(trial.tier)} 试用期已于`));
    console.log(chalk.cyan(`${trial.endDate.toLocaleDateString('zh-CN')} 结束`));
    console.log(chalk.gray('─'.repeat(60)));

    console.log(chalk.bold('\n💡 继续使用:'));
    console.log(chalk.yellow('  立即升级到正式版本，解锁所有功能'));
    console.log(chalk.gray('  命令: meteor-shower upgrade'));

    console.log(chalk.bold('\n📊 您的账户:'));
    console.log(chalk.gray('  已自动降级到免费版'));
    console.log(chalk.gray('  试用期间的数据已保留'));

    console.log(chalk.bold('\n❤️  感谢您的试用！\n'));
  }

  /**
   * 显示试用期即将到期提醒
   */
  displayTrialReminder(trial: TrialInfo): void {
    const daysLeft = trial.daysRemaining;
    
    console.log(chalk.bold.yellow(`\n⏰ 试用期提醒\n`));
    console.log(chalk.gray('─'.repeat(60)));
    console.log(chalk.cyan(`您的 ${this.getTierName(trial.tier)} 试用期还剩 ${chalk.bold(daysLeft + ' 天')}`));
    console.log(chalk.cyan(`到期时间: ${trial.endDate.toLocaleDateString('zh-CN')}`));
    console.log(chalk.gray('─'.repeat(60)));

    if (daysLeft === 1) {
      console.log(chalk.red('\n⚠️  明天就要到期了！'));
    } else {
      console.log(chalk.yellow(`\n⚠️  还有 ${daysLeft} 天到期`));
    }

    console.log(chalk.bold('\n💎 升级优惠:'));
    console.log(chalk.green('  现在升级享受首月8折优惠'));
    console.log(chalk.gray('  命令: meteor-shower upgrade --promo TRIAL20'));

    console.log(chalk.bold('\n❓ 还在犹豫？'));
    console.log(chalk.gray('  查看完整功能对比'));
    console.log(chalk.gray('  命令: meteor-shower pricing\n'));
  }

  /**
   * 显示试用期取消确认
   */
  displayCancellationConfirmation(trial: TrialInfo): void {
    console.log(chalk.bold.yellow('\n⚠️  确认取消试用期\n'));
    console.log(chalk.gray('─'.repeat(60)));
    console.log(chalk.cyan('取消后您将:'));
    console.log(chalk.red('  • 立即失去所有高级功能'));
    console.log(chalk.red('  • 降级到免费版配额限制'));
    console.log(chalk.yellow('  • 试用期间的数据仍会保留'));
    console.log(chalk.gray('─'.repeat(60)));

    console.log(chalk.bold('\n💡 或者您可以:'));
    console.log(chalk.green('  • 继续试用剩余的', trial.daysRemaining, '天'));
    console.log(chalk.green('  • 随时可以升级到正式版本'));
    console.log();
  }

  /**
   * 显示试用期统计
   */
  async displayTrialStatistics(): Promise<void> {
    const stats = await this.trialManager.getTrialStatistics();

    console.log(chalk.bold('\n📊 试用期统计\n'));
    console.log(chalk.gray('─'.repeat(60)));

    console.log(chalk.cyan('总试用数:'), stats.totalTrials);
    console.log(chalk.cyan('进行中:'), chalk.yellow(stats.activeTrials.toString()));
    console.log(chalk.cyan('已转正:'), chalk.green(stats.convertedTrials.toString()));
    console.log(chalk.cyan('已过期:'), chalk.red(stats.expiredTrials.toString()));
    console.log(chalk.cyan('已取消:'), chalk.gray(stats.cancelledTrials.toString()));

    console.log(chalk.cyan('\n转化率:'), this.formatConversionRate(stats.conversionRate));

    console.log(chalk.gray('─'.repeat(60)));
    console.log();
  }

  /**
   * 格式化状态显示
   */
  private formatStatus(status: TrialStatus, colored: boolean = true): string {
    if (!colored) {
      return status;
    }

    switch (status) {
      case TrialStatus.ACTIVE:
        return chalk.green('试用中');
      case TrialStatus.EXPIRED:
        return chalk.red('已过期');
      case TrialStatus.CONVERTED:
        return chalk.blue('已转正');
      case TrialStatus.CANCELLED:
        return chalk.gray('已取消');
      default:
        return chalk.gray(status);
    }
  }

  /**
   * 格式化剩余天数显示
   */
  private formatDaysRemaining(days: number, colored: boolean = true): string {
    if (!colored) {
      return `${days} 天`;
    }

    let color = chalk.green;
    if (days <= 1) {
      color = chalk.red;
    } else if (days <= 3) {
      color = chalk.yellow;
    }

    return color.bold(`${days} 天`);
  }

  /**
   * 格式化转化率显示
   */
  private formatConversionRate(rate: number): string {
    const percentage = (rate * 100).toFixed(1);
    let color = chalk.red;
    
    if (rate >= 0.5) {
      color = chalk.green;
    } else if (rate >= 0.3) {
      color = chalk.yellow;
    }

    return color.bold(`${percentage}%`);
  }

  /**
   * 获取层级名称
   */
  private getTierName(tier: UserTier): string {
    const names = {
      [UserTier.FREE]: '免费版',
      [UserTier.PROFESSIONAL]: '专业版',
      [UserTier.TEAM]: '团队版',
      [UserTier.ENTERPRISE]: '企业版',
    };
    return names[tier];
  }

  /**
   * 获取层级功能列表
   */
  private getTierFeatures(tier: UserTier): string[] {
    const features = {
      [UserTier.PROFESSIONAL]: [
        '无限工具配置和模板',
        '每月500次能力验证',
        '10GB云端存储',
        'AI增强功能',
        '7天云端备份',
      ],
      [UserTier.TEAM]: [
        '专业版全部功能',
        '团队协作功能',
        '每月2000次能力验证',
        '100GB云端存储',
        '30天云端备份',
        '90天审计日志',
      ],
      [UserTier.ENTERPRISE]: [
        '团队版全部功能',
        '无限能力验证',
        '无限云端存储',
        'SSO单点登录',
        'RBAC权限控制',
        '365天审计日志',
        '99.9% SLA保障',
        '专属技术支持',
      ],
    };

    return features[tier as keyof typeof features] || [];
  }
}
