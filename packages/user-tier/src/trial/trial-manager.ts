// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-15
// Task: M6 Phase5 - 试用期管理系统

import { DatabaseManager } from '../database/manager.js';
import { UserTier, SubscriptionStatus } from '../types.js';
import { nanoid } from 'nanoid';

/**
 * 试用期状态
 */
export enum TrialStatus {
  /** 未开始 */
  NOT_STARTED = 'not_started',
  /** 试用中 */
  ACTIVE = 'active',
  /** 已过期 */
  EXPIRED = 'expired',
  /** 已转正 */
  CONVERTED = 'converted',
  /** 已取消 */
  CANCELLED = 'cancelled',
}

/**
 * 试用期信息
 */
export interface TrialInfo {
  /** 试用ID */
  id: string;
  /** 用户ID */
  userId: string;
  /** 试用层级 */
  tier: UserTier;
  /** 试用状态 */
  status: TrialStatus;
  /** 开始时间 */
  startDate: Date;
  /** 结束时间 */
  endDate: Date;
  /** 剩余天数 */
  daysRemaining: number;
  /** 是否已提醒 */
  reminded: boolean;
  /** 转正时间（如果已转正） */
  convertedAt?: Date;
  /** 取消时间（如果已取消） */
  cancelledAt?: Date;
  /** 取消原因 */
  cancellationReason?: string;
  /** 创建时间 */
  createdAt: Date;
  /** 更新时间 */
  updatedAt: Date;
}

/**
 * 试用期配置
 */
export interface TrialConfig {
  /** 试用期天数 */
  durationDays: number;
  /** 提醒时间点（剩余天数） */
  reminderDays: number[];
  /** 是否允许延期 */
  allowExtension: boolean;
  /** 延期天数 */
  extensionDays?: number;
}

/**
 * 默认试用期配置
 */
export const DEFAULT_TRIAL_CONFIGS: Record<UserTier, TrialConfig> = {
  [UserTier.FREE]: {
    durationDays: 0,
    reminderDays: [],
    allowExtension: false,
  },
  [UserTier.PROFESSIONAL]: {
    durationDays: 7,
    reminderDays: [3, 1],
    allowExtension: true,
    extensionDays: 7,
  },
  [UserTier.TEAM]: {
    durationDays: 14,
    reminderDays: [7, 3, 1],
    allowExtension: true,
    extensionDays: 7,
  },
  [UserTier.ENTERPRISE]: {
    durationDays: 30,
    reminderDays: [14, 7, 3, 1],
    allowExtension: true,
    extensionDays: 15,
  },
};

/**
 * 试用期管理器
 */
export class TrialManager {
  constructor(private dbManager: DatabaseManager) {}

  /**
   * 启动试用期
   */
  async startTrial(userId: string, tier: UserTier): Promise<TrialInfo> {
    // 检查是否已有试用记录
    const existingTrial = await this.getUserActiveTrial(userId);
    if (existingTrial) {
      throw new Error('用户已有进行中的试用期');
    }

    // 检查是否已使用过该层级的试用
    const hasUsedTrial = await this.hasUsedTrial(userId, tier);
    if (hasUsedTrial) {
      throw new Error('该层级试用期已使用过');
    }

    const config = DEFAULT_TRIAL_CONFIGS[tier];
    const startDate = new Date();
    const endDate = new Date(startDate.getTime() + config.durationDays * 24 * 60 * 60 * 1000);

    const trial: TrialInfo = {
      id: `trial_${nanoid()}`,
      userId,
      tier,
      status: TrialStatus.ACTIVE,
      startDate,
      endDate,
      daysRemaining: config.durationDays,
      reminded: false,
      createdAt: new Date(),
      updatedAt: new Date(),
    };

    await this.saveTrialInfo(trial);
    return trial;
  }

  /**
   * 获取用户当前试用信息
   */
  async getUserActiveTrial(userId: string): Promise<TrialInfo | null> {
    // TODO: 从数据库查询
    return null;
  }

  /**
   * 检查用户是否已使用过试用
   */
  async hasUsedTrial(userId: string, tier: UserTier): Promise<boolean> {
    // TODO: 从数据库查询历史试用记录
    return false;
  }

  /**
   * 取消试用期
   */
  async cancelTrial(userId: string, reason?: string): Promise<TrialInfo> {
    const trial = await this.getUserActiveTrial(userId);
    if (!trial) {
      throw new Error('没有进行中的试用期');
    }

    if (trial.status !== TrialStatus.ACTIVE) {
      throw new Error('试用期状态不允许取消');
    }

    trial.status = TrialStatus.CANCELLED;
    trial.cancelledAt = new Date();
    trial.cancellationReason = reason;
    trial.updatedAt = new Date();

    await this.updateTrialInfo(trial);

    // 恢复到免费版
    await this.downgradeToFree(userId);

    return trial;
  }

  /**
   * 试用期转正
   */
  async convertTrial(userId: string, subscriptionId: string): Promise<TrialInfo> {
    const trial = await this.getUserActiveTrial(userId);
    if (!trial) {
      throw new Error('没有进行中的试用期');
    }

    if (trial.status !== TrialStatus.ACTIVE) {
      throw new Error('试用期状态不允许转正');
    }

    trial.status = TrialStatus.CONVERTED;
    trial.convertedAt = new Date();
    trial.updatedAt = new Date();

    await this.updateTrialInfo(trial);

    // 激活正式订阅
    await this.activateSubscription(userId, trial.tier, subscriptionId);

    return trial;
  }

  /**
   * 延长试用期
   */
  async extendTrial(userId: string, days?: number): Promise<TrialInfo> {
    const trial = await this.getUserActiveTrial(userId);
    if (!trial) {
      throw new Error('没有进行中的试用期');
    }

    const config = DEFAULT_TRIAL_CONFIGS[trial.tier];
    if (!config.allowExtension) {
      throw new Error('该层级不支持试用期延期');
    }

    const extensionDays = days || config.extensionDays || 7;
    trial.endDate = new Date(trial.endDate.getTime() + extensionDays * 24 * 60 * 60 * 1000);
    trial.daysRemaining += extensionDays;
    trial.updatedAt = new Date();

    await this.updateTrialInfo(trial);

    return trial;
  }

  /**
   * 检查并处理过期的试用期
   */
  async checkExpiredTrials(): Promise<void> {
    const activeTrials = await this.getAllActiveTrials();
    const now = new Date();

    for (const trial of activeTrials) {
      if (now > trial.endDate) {
        await this.expireTrial(trial.id);
      }
    }
  }

  /**
   * 试用期过期处理
   */
  private async expireTrial(trialId: string): Promise<void> {
    const trial = await this.getTrialById(trialId);
    if (!trial) return;

    trial.status = TrialStatus.EXPIRED;
    trial.updatedAt = new Date();
    trial.daysRemaining = 0;

    await this.updateTrialInfo(trial);

    // 降级到免费版
    await this.downgradeToFree(trial.userId);

    // 发送试用期结束通知
    await this.sendTrialExpiredNotification(trial);
  }

  /**
   * 发送试用期提醒
   */
  async sendTrialReminders(): Promise<void> {
    const activeTrials = await this.getAllActiveTrials();

    for (const trial of activeTrials) {
      const config = DEFAULT_TRIAL_CONFIGS[trial.tier];
      const daysRemaining = this.calculateDaysRemaining(trial.endDate);

      // 检查是否需要发送提醒
      if (config.reminderDays.includes(daysRemaining) && !trial.reminded) {
        await this.sendTrialReminderNotification(trial, daysRemaining);
        
        // 标记为已提醒
        trial.reminded = true;
        trial.updatedAt = new Date();
        await this.updateTrialInfo(trial);
      }
    }
  }

  /**
   * 计算剩余天数
   */
  private calculateDaysRemaining(endDate: Date): number {
    const now = new Date();
    const diff = endDate.getTime() - now.getTime();
    return Math.ceil(diff / (24 * 60 * 60 * 1000));
  }

  /**
   * 获取所有进行中的试用期
   */
  private async getAllActiveTrials(): Promise<TrialInfo[]> {
    // TODO: 从数据库查询
    return [];
  }

  /**
   * 根据ID获取试用信息
   */
  private async getTrialById(trialId: string): Promise<TrialInfo | null> {
    // TODO: 从数据库查询
    return null;
  }

  /**
   * 保存试用信息
   */
  private async saveTrialInfo(trial: TrialInfo): Promise<void> {
    // TODO: 保存到数据库
  }

  /**
   * 更新试用信息
   */
  private async updateTrialInfo(trial: TrialInfo): Promise<void> {
    // TODO: 更新数据库
  }

  /**
   * 降级到免费版
   */
  private async downgradeToFree(userId: string): Promise<void> {
    // TODO: 更新用户层级为免费版
  }

  /**
   * 激活订阅
   */
  private async activateSubscription(userId: string, tier: UserTier, subscriptionId: string): Promise<void> {
    // TODO: 激活正式订阅
  }

  /**
   * 发送试用期过期通知
   */
  private async sendTrialExpiredNotification(trial: TrialInfo): Promise<void> {
    // TODO: 发送邮件或系统通知
    console.log(`试用期已过期: ${trial.userId} - ${trial.tier}`);
  }

  /**
   * 发送试用期提醒通知
   */
  private async sendTrialReminderNotification(trial: TrialInfo, daysRemaining: number): Promise<void> {
    // TODO: 发送邮件或系统通知
    console.log(`试用期提醒: ${trial.userId} - 剩余${daysRemaining}天`);
  }

  /**
   * 获取试用期统计
   */
  async getTrialStatistics(): Promise<{
    totalTrials: number;
    activeTrials: number;
    convertedTrials: number;
    expiredTrials: number;
    cancelledTrials: number;
    conversionRate: number;
  }> {
    // TODO: 从数据库聚合统计
    return {
      totalTrials: 0,
      activeTrials: 0,
      convertedTrials: 0,
      expiredTrials: 0,
      cancelledTrials: 0,
      conversionRate: 0,
    };
  }
}
