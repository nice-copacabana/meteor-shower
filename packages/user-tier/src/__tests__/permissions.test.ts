// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-15
// Task: M6 Phase1 - A3: 数据治理功能测试

import { describe, it, expect, beforeEach, afterEach } from 'vitest';
import Database from 'better-sqlite3';
import { 
  PermissionManager, 
  AuditLogManager,
  AUDIT_LOG_SCHEMA,
  UserRole, 
  ResourceType, 
  Action,
  AuditEventType,
  PermissionContext
} from '../permissions/index.js';

describe('PermissionManager', () => {
  let permissionManager: PermissionManager;

  beforeEach(() => {
    permissionManager = new PermissionManager();
  });

  describe('基本权限检查', () => {
    it('企业管理员应该拥有所有权限', () => {
      const hasToolCreate = permissionManager.checkBasePermission(
        UserRole.ENTERPRISE_ADMIN,
        ResourceType.TOOL,
        Action.CREATE
      );
      expect(hasToolCreate).toBe(true);

      const hasUserManage = permissionManager.checkBasePermission(
        UserRole.ENTERPRISE_ADMIN,
        ResourceType.USER,
        Action.MANAGE
      );
      expect(hasUserManage).toBe(true);
    });

    it('访客只能读取公开资源', () => {
      const canRead = permissionManager.checkBasePermission(
        UserRole.GUEST,
        ResourceType.TOOL,
        Action.READ
      );
      expect(canRead).toBe(true);

      const canCreate = permissionManager.checkBasePermission(
        UserRole.GUEST,
        ResourceType.TOOL,
        Action.CREATE
      );
      expect(canCreate).toBe(false);
    });

    it('普通成员可以创建工具', () => {
      const canCreate = permissionManager.checkBasePermission(
        UserRole.MEMBER,
        ResourceType.TOOL,
        Action.CREATE
      );
      expect(canCreate).toBe(true);
    });

    it('团队管理员可以管理团队资源', () => {
      const canManageTool = permissionManager.checkBasePermission(
        UserRole.TEAM_ADMIN,
        ResourceType.TOOL,
        Action.DELETE
      );
      expect(canManageTool).toBe(true);
    });
  });

  describe('资源所有权检查', () => {
    it('应该识别资源所有者', () => {
      const ownership = permissionManager.checkResourceOwnership('user1', {
        ownerId: 'user1',
        organizationId: 'org1',
      });
      expect(ownership).toBe('owner');
    });

    it('应该识别同组织成员', () => {
      const ownership = permissionManager.checkResourceOwnership('user2', {
        ownerId: 'user1',
        organizationId: 'org1',
      });
      expect(ownership).toBe('organization');
    });

    it('应该识别公开资源', () => {
      const ownership = permissionManager.checkResourceOwnership('user3', {
        ownerId: 'user1',
        isPublic: true,
      });
      expect(ownership).toBe('public');
    });

    it('应该识别无权限访问', () => {
      const ownership = permissionManager.checkResourceOwnership('user3', {
        ownerId: 'user1',
      });
      expect(ownership).toBe('none');
    });
  });

  describe('综合权限检查', () => {
    it('所有者可以删除自己的资源', () => {
      const context: PermissionContext = {
        userId: 'user1',
        userRole: UserRole.MEMBER,
        action: Action.DELETE,
        resourceType: ResourceType.TOOL,
        resource: {
          resourceId: 'tool1',
          resourceType: ResourceType.TOOL,
          ownerId: 'user1',
        },
      };

      const result = permissionManager.checkPermission(context);
      expect(result.allowed).toBe(true);
    });

    it('普通成员不能删除他人的资源', () => {
      const context: PermissionContext = {
        userId: 'user2',
        userRole: UserRole.MEMBER,
        action: Action.DELETE,
        resourceType: ResourceType.TOOL,
        resource: {
          resourceId: 'tool1',
          resourceType: ResourceType.TOOL,
          ownerId: 'user1',
        },
      };

      const result = permissionManager.checkPermission(context);
      expect(result.allowed).toBe(false);
      expect(result.reason).toContain('所有者或管理员');
    });

    it('管理员可以删除他人的资源', () => {
      const context: PermissionContext = {
        userId: 'admin1',
        userRole: UserRole.ENTERPRISE_ADMIN,
        action: Action.DELETE,
        resourceType: ResourceType.TOOL,
        resource: {
          resourceId: 'tool1',
          resourceType: ResourceType.TOOL,
          ownerId: 'user1',
        },
      };

      const result = permissionManager.checkPermission(context);
      expect(result.allowed).toBe(true);
    });

    it('访客不能访问私有资源', () => {
      const context: PermissionContext = {
        userId: 'guest1',
        userRole: UserRole.GUEST,
        action: Action.READ,
        resourceType: ResourceType.TOOL,
        resource: {
          resourceId: 'tool1',
          resourceType: ResourceType.TOOL,
          ownerId: 'user1',
        },
      };

      const result = permissionManager.checkPermission(context);
      expect(result.allowed).toBe(false);
      expect(result.reason).toContain('无权访问');
    });

    it('任何人都可以访问公开资源', () => {
      const context: PermissionContext = {
        userId: 'guest1',
        userRole: UserRole.GUEST,
        action: Action.READ,
        resourceType: ResourceType.TOOL,
        resource: {
          resourceId: 'tool1',
          resourceType: ResourceType.TOOL,
          ownerId: 'user1',
          isPublic: true,
        },
      };

      const result = permissionManager.checkPermission(context);
      expect(result.allowed).toBe(true);
    });
  });

  describe('角色层级管理', () => {
    it('应该正确识别角色层级', () => {
      expect(permissionManager.getRoleLevel(UserRole.ENTERPRISE_ADMIN)).toBe(5);
      expect(permissionManager.getRoleLevel(UserRole.TEAM_ADMIN)).toBe(3);
      expect(permissionManager.getRoleLevel(UserRole.MEMBER)).toBe(2);
      expect(permissionManager.getRoleLevel(UserRole.GUEST)).toBe(1);
    });

    it('高级角色可以管理低级角色', () => {
      expect(
        permissionManager.canManageRole(UserRole.ENTERPRISE_ADMIN, UserRole.MEMBER)
      ).toBe(true);

      expect(
        permissionManager.canManageRole(UserRole.TEAM_ADMIN, UserRole.MEMBER)
      ).toBe(true);
    });

    it('低级角色不能管理高级角色', () => {
      expect(
        permissionManager.canManageRole(UserRole.MEMBER, UserRole.TEAM_ADMIN)
      ).toBe(false);
    });

    it('同级角色不能互相管理', () => {
      expect(
        permissionManager.canManageRole(UserRole.MEMBER, UserRole.MEMBER)
      ).toBe(false);
    });
  });

  describe('获取角色权限', () => {
    it('应该返回企业管理员的所有权限', () => {
      const permissions = permissionManager.getRolePermissions(UserRole.ENTERPRISE_ADMIN);
      expect(permissions.length).toBeGreaterThan(0);
      expect(permissions).toContain('tool:create');
      expect(permissions).toContain('user:manage');
    });

    it('应该返回访客的有限权限', () => {
      const permissions = permissionManager.getRolePermissions(UserRole.GUEST);
      expect(permissions.length).toBeLessThan(5);
      expect(permissions).toContain('tool:read');
      expect(permissions).toContain('template:read');
    });
  });
});

describe('AuditLogManager', () => {
  let db: Database.Database;
  let auditManager: AuditLogManager;

  beforeEach(() => {
    db = new Database(':memory:');
    db.exec(AUDIT_LOG_SCHEMA);
    
    // 创建users表（外键依赖）
    db.exec(`
      CREATE TABLE IF NOT EXISTS users (
        id TEXT PRIMARY KEY,
        email TEXT UNIQUE NOT NULL,
        name TEXT NOT NULL
      )
    `);
    
    // 插入测试用户
    db.prepare('INSERT INTO users (id, email, name) VALUES (?, ?, ?)').run(
      'user1', 'user1@example.com', 'User 1'
    );
    
    auditManager = new AuditLogManager(db);
  });

  afterEach(() => {
    db.close();
  });

  describe('记录审计日志', () => {
    it('应该成功记录用户登录事件', () => {
      const entry = auditManager.log({
        eventType: AuditEventType.USER_LOGIN,
        userId: 'user1',
        success: true,
        ipAddress: '192.168.1.1',
        userAgent: 'Mozilla/5.0',
      });

      expect(entry.id).toBeDefined();
      expect(entry.eventType).toBe(AuditEventType.USER_LOGIN);
      expect(entry.userId).toBe('user1');
      expect(entry.success).toBe(true);
      expect(entry.timestamp).toBeInstanceOf(Date);
    });

    it('应该记录资源创建事件', () => {
      const entry = auditManager.log({
        eventType: AuditEventType.RESOURCE_CREATE,
        userId: 'user1',
        resourceType: ResourceType.TOOL,
        resourceId: 'tool1',
        action: Action.CREATE,
        after: { name: 'My Tool', config: {} },
        success: true,
      });

      expect(entry.resourceType).toBe(ResourceType.TOOL);
      expect(entry.resourceId).toBe('tool1');
      expect(entry.after).toEqual({ name: 'My Tool', config: {} });
    });

    it('应该记录失败的操作', () => {
      const entry = auditManager.log({
        eventType: AuditEventType.RESOURCE_DELETE,
        userId: 'user1',
        resourceType: ResourceType.TOOL,
        resourceId: 'tool1',
        action: Action.DELETE,
        success: false,
        failureReason: '权限不足',
      });

      expect(entry.success).toBe(false);
      expect(entry.failureReason).toBe('权限不足');
    });
  });

  describe('查询审计日志', () => {
    beforeEach(() => {
      // 创建测试数据
      auditManager.log({
        eventType: AuditEventType.USER_LOGIN,
        userId: 'user1',
        success: true,
      });

      auditManager.log({
        eventType: AuditEventType.RESOURCE_CREATE,
        userId: 'user1',
        resourceType: ResourceType.TOOL,
        resourceId: 'tool1',
        action: Action.CREATE,
        success: true,
      });

      auditManager.log({
        eventType: AuditEventType.RESOURCE_UPDATE,
        userId: 'user1',
        resourceType: ResourceType.TOOL,
        resourceId: 'tool1',
        action: Action.UPDATE,
        success: false,
        failureReason: '配额已满',
      });
    });

    it('应该查询所有日志', () => {
      const result = auditManager.query({});
      expect(result.entries.length).toBe(3);
      expect(result.total).toBe(3);
    });

    it('应该按用户ID查询', () => {
      const result = auditManager.query({ userId: 'user1' });
      expect(result.entries.length).toBe(3);
      expect(result.entries.every(e => e.userId === 'user1')).toBe(true);
    });

    it('应该按事件类型查询', () => {
      const result = auditManager.query({ eventType: AuditEventType.USER_LOGIN });
      expect(result.entries.length).toBe(1);
      expect(result.entries[0]?.eventType).toBe(AuditEventType.USER_LOGIN);
    });

    it('应该按资源查询', () => {
      const result = auditManager.query({
        resourceType: ResourceType.TOOL,
        resourceId: 'tool1',
      });
      expect(result.entries.length).toBe(2);
    });

    it('应该只查询成功的操作', () => {
      const result = auditManager.query({ successOnly: true });
      expect(result.entries.length).toBe(2);
      expect(result.entries.every(e => e.success)).toBe(true);
    });

    it('应该只查询失败的操作', () => {
      const result = auditManager.query({ failureOnly: true });
      expect(result.entries.length).toBe(1);
      expect(result.entries.every(e => !e.success)).toBe(true);
    });

    it('应该支持分页查询', () => {
      const result = auditManager.query({ page: 1, pageSize: 2 });
      expect(result.entries.length).toBe(2);
      expect(result.page).toBe(1);
      expect(result.pageSize).toBe(2);
      expect(result.totalPages).toBe(2);
    });

    it('应该按时间范围查询', () => {
      const now = new Date();
      const yesterday = new Date(now.getTime() - 24 * 60 * 60 * 1000);
      
      const result = auditManager.query({
        startDate: yesterday,
        endDate: now,
      });
      
      expect(result.entries.length).toBe(3);
    });
  });

  describe('根据ID获取日志', () => {
    it('应该根据ID获取日志', () => {
      const created = auditManager.log({
        eventType: AuditEventType.USER_LOGIN,
        userId: 'user1',
        success: true,
      });

      const found = auditManager.getById(created.id);
      expect(found).not.toBeNull();
      expect(found?.id).toBe(created.id);
      expect(found?.eventType).toBe(AuditEventType.USER_LOGIN);
    });

    it('未找到时应返回null', () => {
      const found = auditManager.getById('nonexistent');
      expect(found).toBeNull();
    });
  });

  describe('用户最近活动', () => {
    it('应该获取用户最近活动', () => {
      for (let i = 0; i < 15; i++) {
        auditManager.log({
          eventType: AuditEventType.RESOURCE_READ,
          userId: 'user1',
          resourceType: ResourceType.TOOL,
          resourceId: `tool${i}`,
          action: Action.READ,
          success: true,
        });
      }

      const activity = auditManager.getUserRecentActivity('user1', 10);
      expect(activity.length).toBe(10);
      expect(activity.every(e => e.userId === 'user1')).toBe(true);
    });
  });

  describe('资源操作历史', () => {
    it('应该获取资源的操作历史', () => {
      auditManager.log({
        eventType: AuditEventType.RESOURCE_CREATE,
        userId: 'user1',
        resourceType: ResourceType.TOOL,
        resourceId: 'tool1',
        action: Action.CREATE,
        success: true,
      });

      auditManager.log({
        eventType: AuditEventType.RESOURCE_UPDATE,
        userId: 'user1',
        resourceType: ResourceType.TOOL,
        resourceId: 'tool1',
        action: Action.UPDATE,
        success: true,
      });

      const history = auditManager.getResourceHistory(ResourceType.TOOL, 'tool1');
      expect(history.length).toBe(2);
      expect(history.every(e => e.resourceId === 'tool1')).toBe(true);
    });
  });

  describe('删除旧日志', () => {
    it('应该删除指定日期之前的日志', () => {
      // 创建一些日志
      for (let i = 0; i < 5; i++) {
        auditManager.log({
          eventType: AuditEventType.USER_LOGIN,
          userId: 'user1',
          success: true,
        });
      }

      // 删除未来日期之前的所有日志（实际删除所有）
      const future = new Date(Date.now() + 24 * 60 * 60 * 1000);
      const deleted = auditManager.deleteOldLogs(future);
      
      expect(deleted).toBe(5);
      
      const result = auditManager.query({});
      expect(result.entries.length).toBe(0);
    });
  });
});
