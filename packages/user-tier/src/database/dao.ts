// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-15
// Task: 实现数据访问层(DAO)，提供用户、订阅、组织、使用量的CRUD操作

/**
 * 数据访问对象 (DAO)
 * 
 * 封装所有数据库操作，提供类型安全的CRUD接口
 */

import Database from 'better-sqlite3';
import { User, UserTier, SubscriptionStatus, UserRole, Organization, Department } from '../types.js';

/**
 * 数据库行类型定义
 */
interface UserRow {
  id: string;
  email: string;
  name: string;
  tier: string;
  organization_id: string | null;
  role: string | null;
  created_at: number;
  updated_at: number;
}

interface SubscriptionRow {
  id: string;
  user_id: string;
  status: string;
  start_date: number;
  end_date: number;
  auto_renew: number;
  created_at: number;
  updated_at: number;
}

interface UsageStatsRow {
  id: string;
  user_id: string;
  storage_used: number;
  validation_runs: number;
  active_tasks: number;
  tools_configured: number;
  cloud_templates: number;
  month: string;
  created_at: number;
  updated_at: number;
}

interface OrganizationRow {
  id: string;
  name: string;
  tier: string;
  owner_id: string;
  seats_total: number;
  seats_used: number;
  subscription_id: string | null;
  allow_public_templates: number;
  require_approval: number;
  sso_enabled: number;
  created_at: number;
  updated_at: number;
}

/**
 * 用户数据访问对象
 */
export class UserDAO {
  constructor(private db: Database.Database) {}

  /**
   * 创建用户
   */
  create(user: Omit<User, 'createdAt' | 'updatedAt'>): User {
    const now = Date.now();
    const stmt = this.db.prepare(`
      INSERT INTO users (id, email, name, tier, organization_id, role, created_at, updated_at)
      VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    `);

    stmt.run(
      user.id,
      user.email,
      user.name,
      user.tier,
      user.organizationId || null,
      user.role || null,
      now,
      now
    );

    return {
      ...user,
      createdAt: new Date(now),
      updatedAt: new Date(now),
    };
  }

  /**
   * 根据ID获取用户
   */
  findById(id: string): User | null {
    const stmt = this.db.prepare(`
      SELECT * FROM users WHERE id = ?
    `);
    const row = stmt.get(id) as UserRow | undefined;
    
    if (!row) return null;
    return this.rowToUser(row);
  }

  /**
   * 根据邮箱获取用户
   */
  findByEmail(email: string): User | null {
    const stmt = this.db.prepare(`
      SELECT * FROM users WHERE email = ?
    `);
    const row = stmt.get(email) as UserRow | undefined;
    
    if (!row) return null;
    return this.rowToUser(row);
  }

  /**
   * 获取所有用户
   */
  findAll(): User[] {
    const stmt = this.db.prepare(`
      SELECT * FROM users ORDER BY created_at DESC
    `);
    const rows = stmt.all() as UserRow[];
    return rows.map(row => this.rowToUser(row));
  }

  /**
   * 更新用户
   */
  update(id: string, updates: Partial<Omit<User, 'id' | 'createdAt' | 'updatedAt'>>): boolean {
    const fields: string[] = [];
    const values: any[] = [];

    if (updates.email !== undefined) {
      fields.push('email = ?');
      values.push(updates.email);
    }
    if (updates.name !== undefined) {
      fields.push('name = ?');
      values.push(updates.name);
    }
    if (updates.tier !== undefined) {
      fields.push('tier = ?');
      values.push(updates.tier);
    }
    if (updates.organizationId !== undefined) {
      fields.push('organization_id = ?');
      values.push(updates.organizationId);
    }
    if (updates.role !== undefined) {
      fields.push('role = ?');
      values.push(updates.role);
    }

    if (fields.length === 0) return false;

    fields.push('updated_at = ?');
    values.push(Date.now());
    values.push(id);

    const stmt = this.db.prepare(`
      UPDATE users SET ${fields.join(', ')} WHERE id = ?
    `);

    const result = stmt.run(...values);
    return result.changes > 0;
  }

  /**
   * 删除用户
   */
  delete(id: string): boolean {
    const stmt = this.db.prepare('DELETE FROM users WHERE id = ?');
    const result = stmt.run(id);
    return result.changes > 0;
  }

  /**
   * 将数据库行转换为User对象
   */
  private rowToUser(row: UserRow): User {
    // 获取订阅信息
    const subscription = new SubscriptionDAO(this.db).findByUserId(row.id);
    
    // 获取使用量信息
    const currentMonth = new Date().toISOString().slice(0, 7);
    const usage = new UsageStatsDAO(this.db).findByUserAndMonth(row.id, currentMonth);

    return {
      id: row.id,
      email: row.email,
      name: row.name,
      tier: row.tier as UserTier,
      organizationId: row.organization_id || undefined,
      role: row.role as UserRole | undefined,
      subscription: subscription || {
        status: SubscriptionStatus.ACTIVE,
        startDate: new Date(row.created_at),
        endDate: new Date('2099-12-31'),
        autoRenew: false,
      },
      usage: usage || {
        storageUsed: 0,
        validationRunsThisMonth: 0,
        activeTasks: 0,
        toolsConfigured: 0,
        cloudTemplates: 0,
      },
      createdAt: new Date(row.created_at),
      updatedAt: new Date(row.updated_at),
    };
  }
}

/**
 * 订阅数据访问对象
 */
export class SubscriptionDAO {
  constructor(private db: Database.Database) {}

  /**
   * 创建订阅
   */
  create(data: {
    id: string;
    userId: string;
    status: SubscriptionStatus;
    startDate: Date;
    endDate: Date;
    autoRenew: boolean;
  }): void {
    const now = Date.now();
    const stmt = this.db.prepare(`
      INSERT INTO subscriptions (id, user_id, status, start_date, end_date, auto_renew, created_at, updated_at)
      VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    `);

    stmt.run(
      data.id,
      data.userId,
      data.status,
      data.startDate.getTime(),
      data.endDate.getTime(),
      data.autoRenew ? 1 : 0,
      now,
      now
    );
  }

  /**
   * 根据用户ID获取订阅
   */
  findByUserId(userId: string): User['subscription'] | null {
    const stmt = this.db.prepare(`
      SELECT * FROM subscriptions WHERE user_id = ? ORDER BY created_at DESC LIMIT 1
    `);
    const row = stmt.get(userId) as SubscriptionRow | undefined;
    
    if (!row) return null;

    return {
      status: row.status as SubscriptionStatus,
      startDate: new Date(row.start_date),
      endDate: new Date(row.end_date),
      autoRenew: row.auto_renew === 1,
    };
  }

  /**
   * 更新订阅状态
   */
  updateStatus(userId: string, status: SubscriptionStatus): boolean {
    const stmt = this.db.prepare(`
      UPDATE subscriptions SET status = ?, updated_at = ? WHERE user_id = ?
    `);
    const result = stmt.run(status, Date.now(), userId);
    return result.changes > 0;
  }
}

/**
 * 使用量统计数据访问对象
 */
export class UsageStatsDAO {
  constructor(private db: Database.Database) {}

  /**
   * 创建或更新使用量统计
   */
  upsert(data: {
    userId: string;
    month: string;
    storageUsed?: number;
    validationRuns?: number;
    activeTasks?: number;
    toolsConfigured?: number;
    cloudTemplates?: number;
  }): void {
    const existing = this.findByUserAndMonth(data.userId, data.month);
    
    if (existing) {
      // 更新
      const fields: string[] = [];
      const values: any[] = [];

      if (data.storageUsed !== undefined) {
        fields.push('storage_used = ?');
        values.push(data.storageUsed);
      }
      if (data.validationRuns !== undefined) {
        fields.push('validation_runs = ?');
        values.push(data.validationRuns);
      }
      if (data.activeTasks !== undefined) {
        fields.push('active_tasks = ?');
        values.push(data.activeTasks);
      }
      if (data.toolsConfigured !== undefined) {
        fields.push('tools_configured = ?');
        values.push(data.toolsConfigured);
      }
      if (data.cloudTemplates !== undefined) {
        fields.push('cloud_templates = ?');
        values.push(data.cloudTemplates);
      }

      if (fields.length === 0) return;

      fields.push('updated_at = ?');
      values.push(Date.now());
      values.push(data.userId);
      values.push(data.month);

      const stmt = this.db.prepare(`
        UPDATE usage_stats SET ${fields.join(', ')} WHERE user_id = ? AND month = ?
      `);
      stmt.run(...values);
    } else {
      // 插入
      const now = Date.now();
      const id = `usage-${data.userId}-${data.month}`;
      const stmt = this.db.prepare(`
        INSERT INTO usage_stats 
        (id, user_id, storage_used, validation_runs, active_tasks, tools_configured, cloud_templates, month, created_at, updated_at)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
      `);

      stmt.run(
        id,
        data.userId,
        data.storageUsed || 0,
        data.validationRuns || 0,
        data.activeTasks || 0,
        data.toolsConfigured || 0,
        data.cloudTemplates || 0,
        data.month,
        now,
        now
      );
    }
  }

  /**
   * 获取用户某月的使用量
   */
  findByUserAndMonth(userId: string, month: string): User['usage'] | null {
    const stmt = this.db.prepare(`
      SELECT * FROM usage_stats WHERE user_id = ? AND month = ?
    `);
    const row = stmt.get(userId, month) as UsageStatsRow | undefined;
    
    if (!row) return null;

    return {
      storageUsed: row.storage_used,
      validationRunsThisMonth: row.validation_runs,
      activeTasks: row.active_tasks,
      toolsConfigured: row.tools_configured,
      cloudTemplates: row.cloud_templates,
    };
  }

  /**
   * 增量更新使用量
   */
  increment(userId: string, month: string, field: string, amount: number): void {
    const existing = this.findByUserAndMonth(userId, month);
    
    // 字段映射：从 API 字段名到数据库字段名
    const fieldMap: Record<string, keyof User['usage']> = {
      validationRuns: 'validationRunsThisMonth',
      storageUsed: 'storageUsed',
      activeTasks: 'activeTasks',
      toolsConfigured: 'toolsConfigured',
      cloudTemplates: 'cloudTemplates',
    };
    
    const usageField = fieldMap[field] || field;
    
    if (!existing) {
      this.upsert({ userId, month, [field]: amount });
    } else {
      const currentValue = (existing as any)[usageField] || 0;
      this.upsert({ userId, month, [field]: currentValue + amount });
    }
  }
}

/**
 * 组织数据访问对象
 */
export class OrganizationDAO {
  constructor(private db: Database.Database) {}

  /**
   * 创建组织
   */
  create(org: Omit<Organization, 'createdAt' | 'updatedAt' | 'departments'> & { ownerId: string }): Organization {
    const now = Date.now();
    const stmt = this.db.prepare(`
      INSERT INTO organizations 
      (id, name, tier, owner_id, seats_total, seats_used, allow_public_templates, require_approval, sso_enabled, created_at, updated_at)
      VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    `);

    stmt.run(
      org.id,
      org.name,
      org.tier,
      org.ownerId,
      org.seats.total,
      org.seats.used,
      org.settings.allowPublicTemplates ? 1 : 0,
      org.settings.requireApproval ? 1 : 0,
      org.settings.ssoEnabled ? 1 : 0,
      now,
      now
    );

    return {
      ...org,
      departments: [],
      createdAt: new Date(now),
      updatedAt: new Date(now),
    };
  }

  /**
   * 根据ID获取组织
   */
  findById(id: string): Organization | null {
    const stmt = this.db.prepare(`
      SELECT * FROM organizations WHERE id = ?
    `);
    const row = stmt.get(id) as OrganizationRow | undefined;
    
    if (!row) return null;
    return this.rowToOrganization(row);
  }

  /**
   * 更新组织席位使用量
   */
  updateSeatsUsed(id: string, seatsUsed: number): boolean {
    const stmt = this.db.prepare(`
      UPDATE organizations SET seats_used = ?, updated_at = ? WHERE id = ?
    `);
    const result = stmt.run(seatsUsed, Date.now(), id);
    return result.changes > 0;
  }

  /**
   * 将数据库行转换为Organization对象
   */
  private rowToOrganization(row: OrganizationRow): Organization {
    // 获取订阅信息（如果有）
    let subscription: Organization['subscription'] = {
      status: SubscriptionStatus.ACTIVE,
      startDate: new Date(row.created_at),
      endDate: new Date('2099-12-31'),
      autoRenew: false,
    };
    
    if (row.subscription_id) {
      const subStmt = this.db.prepare('SELECT * FROM subscriptions WHERE id = ?');
      const subRow = subStmt.get(row.subscription_id) as SubscriptionRow | undefined;
      if (subRow) {
        subscription = {
          status: subRow.status as SubscriptionStatus,
          startDate: new Date(subRow.start_date),
          endDate: new Date(subRow.end_date),
          autoRenew: subRow.auto_renew === 1,
        };
      }
    }

    return {
      id: row.id,
      name: row.name,
      tier: row.tier as UserTier.TEAM | UserTier.ENTERPRISE,
      seats: {
        total: row.seats_total,
        used: row.seats_used,
      },
      subscription,
      departments: [],
      settings: {
        allowPublicTemplates: row.allow_public_templates === 1,
        requireApproval: row.require_approval === 1,
        ssoEnabled: row.sso_enabled === 1,
      },
      createdAt: new Date(row.created_at),
      updatedAt: new Date(row.updated_at),
    };
  }
}
