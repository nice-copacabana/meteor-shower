// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-15
// Task: 编写数据库功能的集成测试，验证CRUD操作和数据完整性

/**
 * 数据库集成测试
 */

import { describe, it, expect, beforeEach, afterEach } from 'vitest';
import { DatabaseManager, createDatabaseManager } from '../manager.js';
import { UserTier, SubscriptionStatus, UserRole } from '../../types.js';

describe('DatabaseManager', () => {
  let dbManager: DatabaseManager;

  beforeEach(() => {
    // 使用内存数据库进行测试
    dbManager = createDatabaseManager({
      path: ':memory:',
      memory: true,
    });
  });

  afterEach(() => {
    dbManager.close();
  });

  describe('初始化和连接', () => {
    it('应该成功创建数据库连接', () => {
      expect(dbManager).toBeDefined();
      expect(dbManager.users).toBeDefined();
      expect(dbManager.subscriptions).toBeDefined();
      expect(dbManager.usageStats).toBeDefined();
      expect(dbManager.organizations).toBeDefined();
    });

    it('应该返回正确的数据库统计信息', () => {
      const stats = dbManager.getStats();
      expect(stats).toEqual({
        users: 0,
        organizations: 0,
        subscriptions: 0,
        usageRecords: 0,
      });
    });
  });

  describe('用户CRUD操作', () => {
    it('应该成功创建用户', () => {
      const user = dbManager.users.create({
        id: 'user-1',
        email: 'test@example.com',
        name: '测试用户',
        tier: UserTier.FREE,
        subscription: {
          status: SubscriptionStatus.ACTIVE,
          startDate: new Date(),
          endDate: new Date('2099-12-31'),
          autoRenew: false,
        },
        usage: {
          storageUsed: 0,
          validationRunsThisMonth: 0,
          activeTasks: 0,
          toolsConfigured: 0,
          cloudTemplates: 0,
        },
      });

      expect(user.id).toBe('user-1');
      expect(user.email).toBe('test@example.com');
      expect(user.tier).toBe(UserTier.FREE);
    });

    it('应该根据ID查找用户', () => {
      dbManager.users.create({
        id: 'user-2',
        email: 'user2@example.com',
        name: '用户2',
        tier: UserTier.PRO,
        subscription: {
          status: SubscriptionStatus.ACTIVE,
          startDate: new Date(),
          endDate: new Date('2099-12-31'),
          autoRenew: true,
        },
        usage: {
          storageUsed: 0,
          validationRunsThisMonth: 0,
          activeTasks: 0,
          toolsConfigured: 0,
          cloudTemplates: 0,
        },
      });

      const found = dbManager.users.findById('user-2');
      expect(found).toBeDefined();
      expect(found?.email).toBe('user2@example.com');
      expect(found?.tier).toBe(UserTier.PRO);
    });

    it('应该根据邮箱查找用户', () => {
      dbManager.users.create({
        id: 'user-3',
        email: 'unique@example.com',
        name: '唯一用户',
        tier: UserTier.TEAM,
        subscription: {
          status: SubscriptionStatus.ACTIVE,
          startDate: new Date(),
          endDate: new Date('2099-12-31'),
          autoRenew: false,
        },
        usage: {
          storageUsed: 0,
          validationRunsThisMonth: 0,
          activeTasks: 0,
          toolsConfigured: 0,
          cloudTemplates: 0,
        },
      });

      const found = dbManager.users.findByEmail('unique@example.com');
      expect(found).toBeDefined();
      expect(found?.id).toBe('user-3');
    });

    it('应该成功更新用户信息', () => {
      dbManager.users.create({
        id: 'user-4',
        email: 'update@example.com',
        name: '待更新用户',
        tier: UserTier.FREE,
        subscription: {
          status: SubscriptionStatus.ACTIVE,
          startDate: new Date(),
          endDate: new Date('2099-12-31'),
          autoRenew: false,
        },
        usage: {
          storageUsed: 0,
          validationRunsThisMonth: 0,
          activeTasks: 0,
          toolsConfigured: 0,
          cloudTemplates: 0,
        },
      });

      const updated = dbManager.users.update('user-4', {
        name: '已更新用户',
        tier: UserTier.PRO,
      });

      expect(updated).toBe(true);

      const found = dbManager.users.findById('user-4');
      expect(found?.name).toBe('已更新用户');
      expect(found?.tier).toBe(UserTier.PRO);
    });

    it('应该成功删除用户', () => {
      dbManager.users.create({
        id: 'user-5',
        email: 'delete@example.com',
        name: '待删除用户',
        tier: UserTier.FREE,
        subscription: {
          status: SubscriptionStatus.ACTIVE,
          startDate: new Date(),
          endDate: new Date('2099-12-31'),
          autoRenew: false,
        },
        usage: {
          storageUsed: 0,
          validationRunsThisMonth: 0,
          activeTasks: 0,
          toolsConfigured: 0,
          cloudTemplates: 0,
        },
      });

      const deleted = dbManager.users.delete('user-5');
      expect(deleted).toBe(true);

      const found = dbManager.users.findById('user-5');
      expect(found).toBeNull();
    });

    it('应该获取所有用户', () => {
      dbManager.users.create({
        id: 'user-6',
        email: 'user6@example.com',
        name: '用户6',
        tier: UserTier.FREE,
        subscription: {
          status: SubscriptionStatus.ACTIVE,
          startDate: new Date(),
          endDate: new Date('2099-12-31'),
          autoRenew: false,
        },
        usage: {
          storageUsed: 0,
          validationRunsThisMonth: 0,
          activeTasks: 0,
          toolsConfigured: 0,
          cloudTemplates: 0,
        },
      });

      dbManager.users.create({
        id: 'user-7',
        email: 'user7@example.com',
        name: '用户7',
        tier: UserTier.PRO,
        subscription: {
          status: SubscriptionStatus.ACTIVE,
          startDate: new Date(),
          endDate: new Date('2099-12-31'),
          autoRenew: false,
        },
        usage: {
          storageUsed: 0,
          validationRunsThisMonth: 0,
          activeTasks: 0,
          toolsConfigured: 0,
          cloudTemplates: 0,
        },
      });

      const allUsers = dbManager.users.findAll();
      expect(allUsers.length).toBeGreaterThanOrEqual(2);
    });
  });

  describe('订阅管理', () => {
    beforeEach(() => {
      dbManager.users.create({
        id: 'sub-user-1',
        email: 'sub@example.com',
        name: '订阅用户',
        tier: UserTier.PRO,
        subscription: {
          status: SubscriptionStatus.ACTIVE,
          startDate: new Date(),
          endDate: new Date('2099-12-31'),
          autoRenew: false,
        },
        usage: {
          storageUsed: 0,
          validationRunsThisMonth: 0,
          activeTasks: 0,
          toolsConfigured: 0,
          cloudTemplates: 0,
        },
      });
    });

    it('应该创建订阅记录', () => {
      dbManager.subscriptions.create({
        id: 'sub-1',
        userId: 'sub-user-1',
        status: SubscriptionStatus.ACTIVE,
        startDate: new Date(),
        endDate: new Date('2025-12-31'),
        autoRenew: true,
      });

      const subscription = dbManager.subscriptions.findByUserId('sub-user-1');
      expect(subscription).toBeDefined();
      expect(subscription?.status).toBe(SubscriptionStatus.ACTIVE);
      expect(subscription?.autoRenew).toBe(true);
    });

    it('应该更新订阅状态', () => {
      dbManager.subscriptions.create({
        id: 'sub-2',
        userId: 'sub-user-1',
        status: SubscriptionStatus.ACTIVE,
        startDate: new Date(),
        endDate: new Date('2025-12-31'),
        autoRenew: false,
      });

      const updated = dbManager.subscriptions.updateStatus('sub-user-1', SubscriptionStatus.EXPIRED);
      expect(updated).toBe(true);

      const subscription = dbManager.subscriptions.findByUserId('sub-user-1');
      expect(subscription?.status).toBe(SubscriptionStatus.EXPIRED);
    });
  });

  describe('使用量统计', () => {
    beforeEach(() => {
      dbManager.users.create({
        id: 'usage-user-1',
        email: 'usage@example.com',
        name: '使用量用户',
        tier: UserTier.PRO,
        subscription: {
          status: SubscriptionStatus.ACTIVE,
          startDate: new Date(),
          endDate: new Date('2099-12-31'),
          autoRenew: false,
        },
        usage: {
          storageUsed: 0,
          validationRunsThisMonth: 0,
          activeTasks: 0,
          toolsConfigured: 0,
          cloudTemplates: 0,
        },
      });
    });

    it('应该创建使用量记录', () => {
      const month = '2025-10';
      
      dbManager.usageStats.upsert({
        userId: 'usage-user-1',
        month,
        toolsConfigured: 5,
        cloudTemplates: 10,
      });

      const usage = dbManager.usageStats.findByUserAndMonth('usage-user-1', month);
      expect(usage).toBeDefined();
      expect(usage?.toolsConfigured).toBe(5);
      expect(usage?.cloudTemplates).toBe(10);
    });

    it('应该更新已存在的使用量记录', () => {
      const month = '2025-10';
      
      dbManager.usageStats.upsert({
        userId: 'usage-user-1',
        month,
        toolsConfigured: 3,
      });

      dbManager.usageStats.upsert({
        userId: 'usage-user-1',
        month,
        toolsConfigured: 8,
      });

      const usage = dbManager.usageStats.findByUserAndMonth('usage-user-1', month);
      expect(usage?.toolsConfigured).toBe(8);
    });

    it('应该增量更新使用量', () => {
      const month = '2025-10';
      
      dbManager.usageStats.upsert({
        userId: 'usage-user-1',
        month,
        validationRuns: 10,
      });

      dbManager.usageStats.increment('usage-user-1', month, 'validationRuns', 5);

      const usage = dbManager.usageStats.findByUserAndMonth('usage-user-1', month);
      expect(usage?.validationRunsThisMonth).toBe(15);
    });
  });

  describe('组织管理', () => {
    beforeEach(() => {
      // 创建 owner 用户
      dbManager.users.create({
        id: 'owner-1',
        email: 'owner1@example.com',
        name: 'Owner 1',
        tier: UserTier.TEAM,
        subscription: {
          status: SubscriptionStatus.ACTIVE,
          startDate: new Date(),
          endDate: new Date('2099-12-31'),
          autoRenew: false,
        },
        usage: {
          storageUsed: 0,
          validationRunsThisMonth: 0,
          activeTasks: 0,
          toolsConfigured: 0,
          cloudTemplates: 0,
        },
      });

      dbManager.users.create({
        id: 'owner-2',
        email: 'owner2@example.com',
        name: 'Owner 2',
        tier: UserTier.ENTERPRISE,
        subscription: {
          status: SubscriptionStatus.ACTIVE,
          startDate: new Date(),
          endDate: new Date('2099-12-31'),
          autoRenew: false,
        },
        usage: {
          storageUsed: 0,
          validationRunsThisMonth: 0,
          activeTasks: 0,
          toolsConfigured: 0,
          cloudTemplates: 0,
        },
      });

      dbManager.users.create({
        id: 'owner-3',
        email: 'owner3@example.com',
        name: 'Owner 3',
        tier: UserTier.TEAM,
        subscription: {
          status: SubscriptionStatus.ACTIVE,
          startDate: new Date(),
          endDate: new Date('2099-12-31'),
          autoRenew: false,
        },
        usage: {
          storageUsed: 0,
          validationRunsThisMonth: 0,
          activeTasks: 0,
          toolsConfigured: 0,
          cloudTemplates: 0,
        },
      });
    });

    it('应该创建组织', () => {
      const org = dbManager.organizations.create({
        id: 'org-1',
        name: '测试组织',
        tier: UserTier.TEAM,
        ownerId: 'owner-1',
        seats: {
          total: 10,
          used: 0,
        },
        subscription: {
          status: SubscriptionStatus.ACTIVE,
          startDate: new Date(),
          endDate: new Date('2099-12-31'),
          autoRenew: true,
        },
        settings: {
          allowPublicTemplates: true,
          requireApproval: false,
          ssoEnabled: false,
        },
      });

      expect(org.id).toBe('org-1');
      expect(org.name).toBe('测试组织');
      expect(org.seats.total).toBe(10);
    });

    it('应该根据ID查找组织', () => {
      dbManager.organizations.create({
        id: 'org-2',
        name: '组织2',
        tier: UserTier.ENTERPRISE,
        ownerId: 'owner-2',
        seats: {
          total: 50,
          used: 5,
        },
        subscription: {
          status: SubscriptionStatus.ACTIVE,
          startDate: new Date(),
          endDate: new Date('2099-12-31'),
          autoRenew: true,
        },
        settings: {
          allowPublicTemplates: false,
          requireApproval: true,
          ssoEnabled: true,
        },
      });

      const found = dbManager.organizations.findById('org-2');
      expect(found).toBeDefined();
      expect(found?.name).toBe('组织2');
      expect(found?.tier).toBe(UserTier.ENTERPRISE);
      expect(found?.settings.ssoEnabled).toBe(true);
    });

    it('应该更新组织席位使用量', () => {
      dbManager.organizations.create({
        id: 'org-3',
        name: '组织3',
        tier: UserTier.TEAM,
        ownerId: 'owner-3',
        seats: {
          total: 20,
          used: 5,
        },
        subscription: {
          status: SubscriptionStatus.ACTIVE,
          startDate: new Date(),
          endDate: new Date('2099-12-31'),
          autoRenew: false,
        },
        settings: {
          allowPublicTemplates: true,
          requireApproval: false,
          ssoEnabled: false,
        },
      });

      const updated = dbManager.organizations.updateSeatsUsed('org-3', 10);
      expect(updated).toBe(true);

      const org = dbManager.organizations.findById('org-3');
      expect(org?.seats.used).toBe(10);
    });
  });

  describe('事务处理', () => {
    it('应该在事务中执行多个操作', () => {
      const result = dbManager.transaction(() => {
        dbManager.users.create({
          id: 'tx-user-1',
          email: 'tx1@example.com',
          name: '事务用户1',
          tier: UserTier.FREE,
          subscription: {
            status: SubscriptionStatus.ACTIVE,
            startDate: new Date(),
            endDate: new Date('2099-12-31'),
            autoRenew: false,
          },
          usage: {
            storageUsed: 0,
            validationRunsThisMonth: 0,
            activeTasks: 0,
            toolsConfigured: 0,
            cloudTemplates: 0,
          },
        });

        dbManager.users.create({
          id: 'tx-user-2',
          email: 'tx2@example.com',
          name: '事务用户2',
          tier: UserTier.PRO,
          subscription: {
            status: SubscriptionStatus.ACTIVE,
            startDate: new Date(),
            endDate: new Date('2099-12-31'),
            autoRenew: false,
          },
          usage: {
            storageUsed: 0,
            validationRunsThisMonth: 0,
            activeTasks: 0,
            toolsConfigured: 0,
            cloudTemplates: 0,
          },
        });

        return 'success';
      });

      expect(result).toBe('success');
      expect(dbManager.users.findById('tx-user-1')).toBeDefined();
      expect(dbManager.users.findById('tx-user-2')).toBeDefined();
    });
  });
});
