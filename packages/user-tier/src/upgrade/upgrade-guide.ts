// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-15
// Task: M6 Phase3 - 升级引导流程

import chalk from 'chalk';
import { UserTier } from '../types.js';
import { FeatureManager, Feature } from '../features/feature-flags.js';
import { QuotaManager, QuotaType } from '../quota/quota-manager.js';

/**
 * 升级原因
 */
export enum UpgradeReason {
  /** 配额不足 */
  QUOTA_LIMIT = 'quota_limit',
  
  /** 功能限制 */
  FEATURE_LIMIT = 'feature_limit',
  
  /** 主动升级 */
  PROACTIVE = 'proactive',
}

/**
 * 升级建议
 */
export interface UpgradeSuggestion {
  /** 当前层级 */
  currentTier: UserTier;
  
  /** 建议升级到的层级 */
  suggestedTier: UserTier;
  
  /** 升级原因 */
  reason: UpgradeReason;
  
  /** 详细原因描述 */
  details: string;
  
  /** 升级后的好处 */
  benefits: string[];
  
  /** 定价信息 */
  pricing?: {
    monthly: number;
    yearly: number;
    savings?: number;
  };
}

/**
 * 升级引导管理器
 */
export class UpgradeGuide {
  constructor(
    private featureManager: FeatureManager,
    private quotaManager: QuotaManager
  ) {}

  /**
   * 获取升级建议
   */
  async getUpgradeSuggestion(
    userId: string,
    tier: UserTier,
    reason?: UpgradeReason,
    context?: { quotaType?: QuotaType; feature?: Feature }
  ): Promise<UpgradeSuggestion | null> {
    // 如果已是企业版，无需升级
    if (tier === UserTier.ENTERPRISE) {
      return null;
    }

    let suggestedTier: UserTier;
    let details: string;
    let benefits: string[] = [];

    if (reason === UpgradeReason.QUOTA_LIMIT && context?.quotaType) {
      // 配额限制导致的升级建议
      const quota = await this.quotaManager.checkQuota(userId, context.quotaType);
      details = `${this.getQuotaName(context.quotaType)}已达上限 (${quota.limit})`;
      
      // 根据当前层级推荐下一级
      suggestedTier = this.getNextTier(tier);
      benefits = this.getQuotaBenefits(tier, suggestedTier, context.quotaType);
      
    } else if (reason === UpgradeReason.FEATURE_LIMIT && context?.feature) {
      // 功能限制导致的升级建议
      const featureCheck = this.featureManager.checkFeature(tier, context.feature);
      details = `当前层级不支持功能: ${this.featureManager.getFeatureDescription(context.feature)}`;
      
      // 找到支持该功能的最低层级
      suggestedTier = featureCheck.upgradeRecommendation?.suggestedTier || this.getNextTier(tier);
      benefits = featureCheck.upgradeRecommendation?.benefits || [];
      
    } else {
      // 主动升级建议
      details = '升级以获取更多功能和配额';
      suggestedTier = this.getNextTier(tier);
      benefits = this.getAllBenefits(tier, suggestedTier);
    }

    return {
      currentTier: tier,
      suggestedTier,
      reason: reason || UpgradeReason.PROACTIVE,
      details,
      benefits,
      pricing: this.getPricing(suggestedTier),
    };
  }

  /**
   * 显示升级引导
   */
  async displayUpgradeGuide(suggestion: UpgradeSuggestion): Promise<void> {
    console.log(chalk.cyan.bold('\n💎 升级建议\n'));
    
    // 当前状态
    console.log(chalk.gray(`当前层级: ${this.getTierDisplayName(suggestion.currentTier)}`));
    console.log(chalk.yellow(`升级原因: ${suggestion.details}\n`));
    
    // 推荐层级
    console.log(chalk.cyan.bold(`推荐升级到: ${this.getTierDisplayName(suggestion.suggestedTier)}\n`));
    
    // 升级后的好处
    if (suggestion.benefits.length > 0) {
      console.log(chalk.green('✨ 升级后您将获得:\n'));
      for (const benefit of suggestion.benefits) {
        console.log(chalk.gray(`  • ${benefit}`));
      }
      console.log('');
    }
    
    // 定价信息
    if (suggestion.pricing) {
      console.log(chalk.white.bold('💰 定价信息:\n'));
      console.log(chalk.gray(`  月付: ¥${suggestion.pricing.monthly}/月`));
      console.log(chalk.gray(`  年付: ¥${suggestion.pricing.yearly}/年`));
      
      if (suggestion.pricing.savings) {
        console.log(chalk.green(`  💰 年付节省: ¥${suggestion.pricing.savings} (${((suggestion.pricing.savings / (suggestion.pricing.monthly * 12)) * 100).toFixed(0)}%)`));
      }
      console.log('');
    }
    
    // 升级链接
    console.log(chalk.cyan('🔗 了解更多: https://meteor-shower.dev/pricing'));
    console.log(chalk.cyan('📧 联系销售: sales@meteor-shower.dev\n'));
  }

  /**
   * 显示层级对比
   */
  displayTierComparison(currentTier: UserTier, targetTier: UserTier): void {
    console.log(chalk.cyan.bold('\n📊 层级对比\n'));
    
    const comparison = this.featureManager.compareFeatures(currentTier, targetTier);
    
    // 显示共同功能
    if (comparison.common.length > 0) {
      console.log(chalk.green('✅ 共同功能:\n'));
      for (const feature of comparison.common) {
        console.log(chalk.gray(`  • ${this.featureManager.getFeatureDescription(feature)}`));
      }
      console.log('');
    }
    
    // 显示新增功能
    if (comparison.onlyInTier2.length > 0) {
      console.log(chalk.yellow('⭐ 新增功能:\n'));
      for (const feature of comparison.onlyInTier2) {
        console.log(chalk.gray(`  • ${this.featureManager.getFeatureDescription(feature)}`));
      }
      console.log('');
    }
  }

  /**
   * 获取下一级层级
   */
  private getNextTier(currentTier: UserTier): UserTier {
    const tiers = [UserTier.FREE, UserTier.PROFESSIONAL, UserTier.TEAM, UserTier.ENTERPRISE];
    const currentIndex = tiers.indexOf(currentTier);
    
    if (currentIndex === -1 || currentIndex === tiers.length - 1) {
      return currentTier;
    }
    
    return tiers[currentIndex + 1]!;
  }

  /**
   * 获取配额相关的好处
   */
  private getQuotaBenefits(fromTier: UserTier, toTier: UserTier, quotaType: QuotaType): string[] {
    const benefits: string[] = [];
    
    // 根据配额类型添加具体好处
    switch (quotaType) {
      case QuotaType.TOOLS:
        benefits.push('无限工具配置数量');
        break;
      case QuotaType.TEMPLATES:
        benefits.push('无限云端模板存储');
        break;
      case QuotaType.SHARES:
        if (toTier === UserTier.TEAM || toTier === UserTier.ENTERPRISE) {
          benefits.push('无限月分享次数');
        } else {
          benefits.push('更多月分享次数 (100次)');
        }
        break;
      case QuotaType.VALIDATIONS:
        if (toTier === UserTier.ENTERPRISE) {
          benefits.push('无限月验证次数');
        } else {
          benefits.push(`更多月验证次数 (${toTier === UserTier.PROFESSIONAL ? '500次' : '2000次'})`);
        }
        break;
      case QuotaType.TEAM_MEMBERS:
        benefits.push(`支持更多团队成员 (最多${toTier === UserTier.TEAM ? 50 : '无限'}人)`);
        break;
    }
    
    // 添加其他通用好处
    benefits.push(...this.getAdditionalBenefits(toTier));
    
    return benefits;
  }

  /**
   * 获取所有升级好处
   */
  private getAllBenefits(fromTier: UserTier, toTier: UserTier): string[] {
    const comparison = this.featureManager.compareFeatures(fromTier, toTier);
    return comparison.onlyInTier2.map(f => this.featureManager.getFeatureDescription(f));
  }

  /**
   * 获取额外好处
   */
  private getAdditionalBenefits(tier: UserTier): string[] {
    const benefits: Record<UserTier, string[]> = {
      [UserTier.FREE]: [],
      [UserTier.PROFESSIONAL]: [
        '优先技术支持',
        'AI增强功能',
        '私有云端存储',
      ],
      [UserTier.TEAM]: [
        '团队协作功能',
        '审计日志 (90天)',
        '批量操作',
        '高级分析',
      ],
      [UserTier.ENTERPRISE]: [
        'SSO单点登录',
        'RBAC权限管理',
        '私有化部署选项',
        '审计日志 (365天)',
        '专属客户经理',
      ],
    };
    
    return benefits[tier] || [];
  }

  /**
   * 获取定价信息
   */
  private getPricing(tier: UserTier): { monthly: number; yearly: number; savings?: number } | undefined {
    const pricing: Record<UserTier, { monthly: number; yearly: number }> = {
      [UserTier.FREE]: { monthly: 0, yearly: 0 },
      [UserTier.PROFESSIONAL]: { monthly: 99, yearly: 999 },
      [UserTier.TEAM]: { monthly: 299, yearly: 2999 },
      [UserTier.ENTERPRISE]: { monthly: 0, yearly: 0 }, // 联系销售
    };
    
    const price = pricing[tier];
    if (!price) return undefined;
    
    if (tier === UserTier.FREE || tier === UserTier.ENTERPRISE) {
      return undefined;
    }
    
    const savings = price.monthly * 12 - price.yearly;
    
    return {
      monthly: price.monthly,
      yearly: price.yearly,
      savings: savings > 0 ? savings : undefined,
    };
  }

  /**
   * 获取配额名称
   */
  private getQuotaName(quotaType: QuotaType): string {
    const names: Record<QuotaType, string> = {
      [QuotaType.TOOLS]: '工具配置',
      [QuotaType.TEMPLATES]: '云端模板',
      [QuotaType.SHARES]: '月分享',
      [QuotaType.VALIDATIONS]: '月验证',
      [QuotaType.TEAM_MEMBERS]: '团队成员',
    };
    return names[quotaType] || quotaType;
  }

  /**
   * 获取层级显示名称
   */
  private getTierDisplayName(tier: UserTier): string {
    const names: Record<UserTier, string> = {
      [UserTier.FREE]: '免费版 (Free)',
      [UserTier.PROFESSIONAL]: '专业版 (Professional)',
      [UserTier.TEAM]: '团队版 (Team)',
      [UserTier.ENTERPRISE]: '企业版 (Enterprise)',
    };
    return names[tier] || tier;
  }
}
