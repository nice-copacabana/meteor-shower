// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-17
// Task: 实现UserTierManager核心类，管理用户层级、订阅和配额

/**
 * 用户层级管理器V2
 * 
 * 根据设计文档实现用户层级、订阅和组织管理
 */

import Database from 'better-sqlite3';
import { randomUUID } from 'crypto';
import { UserModel, SubscriptionModel, OrganizationModel } from './database/models.js';

/**
 * 用户层级类型
 */
export type UserTier = 'FREE' | 'PROFESSIONAL' | 'TEAM' | 'ENTERPRISE';

/**
 * 订阅状态类型
 */
export type SubscriptionStatus = 'ACTIVE' | 'CANCELLED' | 'EXPIRED';

/**
 * 支付方式类型
 */
export type PaymentMethod = 'ALIPAY' | 'WECHAT' | 'STRIPE';

/**
 * 用户层级功能矩阵
 */
export interface TierFeatures {
  maxTools: number;               // 最多工具数
  maxCloudTemplates: number;      // 云端模板数量
  maxValidationRuns: number;      // 月验证次数
  privateCloudStorage: boolean;   // 私有云端存储
  aiEnhanced: boolean;            // AI增强功能
  teamCollaboration: boolean;     // 团队协作
  permissionManagement: boolean;  // 权限管理
  auditLogDays: number;           // 审计日志保留天数
  ssoEnabled: boolean;            // SSO单点登录
  approvalFlow: boolean;          // 审批流程
  dedicatedSupport: boolean;      // 专属支持
  privateDeploy: boolean;         // 私有化部署
}

/**
 * 预定义的层级功能
 */
export const TIER_FEATURES: Record<UserTier, TierFeatures> = {
  FREE: {
    maxTools: 3,
    maxCloudTemplates: 5,
    maxValidationRuns: 20,
    privateCloudStorage: false,
    aiEnhanced: false,
    teamCollaboration: false,
    permissionManagement: false,
    auditLogDays: 0,
    ssoEnabled: false,
    approvalFlow: false,
    dedicatedSupport: false,
    privateDeploy: false,
  },
  PROFESSIONAL: {
    maxTools: Infinity,
    maxCloudTemplates: Infinity,
    maxValidationRuns: 500,
    privateCloudStorage: true,
    aiEnhanced: true,
    teamCollaboration: false,
    permissionManagement: false,
    auditLogDays: 0,
    ssoEnabled: false,
    approvalFlow: false,
    dedicatedSupport: false,
    privateDeploy: false,
  },
  TEAM: {
    maxTools: Infinity,
    maxCloudTemplates: Infinity,
    maxValidationRuns: 5000,
    privateCloudStorage: true,
    aiEnhanced: true,
    teamCollaboration: true,
    permissionManagement: true,
    auditLogDays: 90,
    ssoEnabled: false,
    approvalFlow: false,
    dedicatedSupport: false,
    privateDeploy: false,
  },
  ENTERPRISE: {
    maxTools: Infinity,
    maxCloudTemplates: Infinity,
    maxValidationRuns: Infinity,
    privateCloudStorage: true,
    aiEnhanced: true,
    teamCollaboration: true,
    permissionManagement: true,
    auditLogDays: 365,
    ssoEnabled: true,
    approvalFlow: true,
    dedicatedSupport: true,
    privateDeploy: true,
  },
};

/**
 * 用户层级管理器V2
 */
export class UserTierManagerV2 {
  constructor(private db: Database.Database) {}

  /**
   * 创建用户
   */
  createUser(params: {
    email: string;
    password: string;
    tier?: UserTier;
  }): UserModel {
    const userId = randomUUID();
    const now = Date.now();
    
    // 密码哈希（生产环境应使用bcrypt等）
    const passwordHash = Buffer.from(params.password).toString('base64');
    
    const stmt = this.db.prepare(`
      INSERT INTO users (id, email, password_hash, tier, created_at, updated_at, last_login_at)
      VALUES (?, ?, ?, ?, ?, ?, ?)
    `);
    
    stmt.run(
      userId,
      params.email,
      passwordHash,
      params.tier || 'FREE',
      now,
      now,
      null
    );
    
    return this.getUserById(userId)!;
  }

  /**
   * 通过ID获取用户
   */
  getUserById(userId: string): UserModel | null {
    const stmt = this.db.prepare('SELECT * FROM users WHERE id = ?');
    return stmt.get(userId) as UserModel | null;
  }

  /**
   * 通过邮箱获取用户
   */
  getUserByEmail(email: string): UserModel | null {
    const stmt = this.db.prepare('SELECT * FROM users WHERE email = ?');
    return stmt.get(email) as UserModel | null;
  }

  /**
   * 验证用户登录
   */
  loginUser(email: string, password: string): { success: boolean; user?: UserModel; token?: string } {
    const user = this.getUserByEmail(email);
    
    if (!user) {
      return { success: false };
    }
    
    // 验证密码（生产环境应使用bcrypt.compare）
    const passwordHash = Buffer.from(password).toString('base64');
    if (user.password_hash !== passwordHash) {
      return { success: false };
    }
    
    // 更新最后登录时间
    const stmt = this.db.prepare('UPDATE users SET last_login_at = ? WHERE id = ?');
    stmt.run(Date.now(), user.id);
    
    // 生成简单token（生产环境应使用JWT）
    const token = Buffer.from(`${user.id}:${Date.now()}`).toString('base64');
    
    return {
      success: true,
      user,
      token,
    };
  }

  /**
   * 升级用户层级
   */
  upgradeUserTier(userId: string, newTier: UserTier, paymentInfo?: {
    paymentMethod: PaymentMethod;
    startDate?: string;
    endDate?: string;
  }): { success: boolean; subscription?: SubscriptionModel } {
    const user = this.getUserById(userId);
    
    if (!user) {
      return { success: false };
    }
    
    // 更新用户层级
    const updateStmt = this.db.prepare('UPDATE users SET tier = ?, updated_at = ? WHERE id = ?');
    updateStmt.run(newTier, Date.now(), userId);
    
    // 如果是付费层级，创建订阅记录
    if (newTier !== 'FREE' && paymentInfo) {
      const subscriptionId = randomUUID();
      const now = Date.now();
      const startDate = paymentInfo.startDate || new Date().toISOString().split('T')[0];
      const endDate = paymentInfo.endDate || new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];
      
      const subscriptionStmt = this.db.prepare(`
        INSERT INTO subscriptions (id, user_id, tier, status, start_date, end_date, auto_renew, payment_method, created_at)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
      `);
      
      subscriptionStmt.run(
        subscriptionId,
        userId,
        newTier,
        'ACTIVE',
        startDate,
        endDate,
        1,
        paymentInfo.paymentMethod,
        now
      );
      
      const subscription = this.db.prepare('SELECT * FROM subscriptions WHERE id = ?').get(subscriptionId) as SubscriptionModel;
      
      return { success: true, subscription };
    }
    
    return { success: true };
  }

  /**
   * 获取用户层级功能
   */
  getUserFeatures(userId: string): TierFeatures | null {
    const user = this.getUserById(userId);
    if (!user) {
      return null;
    }
    
    return TIER_FEATURES[user.tier];
  }

  /**
   * 检查用户是否拥有某项功能
   */
  hasFeature(userId: string, feature: keyof TierFeatures): boolean {
    const features = this.getUserFeatures(userId);
    if (!features) {
      return false;
    }
    
    return !!features[feature];
  }

  /**
   * 创建组织
   */
  createOrganization(params: {
    name: string;
    tier: 'TEAM' | 'ENTERPRISE';
    ownerId: string;
    maxMembers?: number;
  }): OrganizationModel {
    const orgId = randomUUID();
    const now = Date.now();
    
    const defaultMaxMembers = params.tier === 'TEAM' ? 50 : 999;
    
    const stmt = this.db.prepare(`
      INSERT INTO organizations (id, name, tier, owner_id, member_count, created_at, max_members)
      VALUES (?, ?, ?, ?, ?, ?, ?)
    `);
    
    stmt.run(
      orgId,
      params.name,
      params.tier,
      params.ownerId,
      1,
      now,
      params.maxMembers || defaultMaxMembers
    );
    
    return this.db.prepare('SELECT * FROM organizations WHERE id = ?').get(orgId) as OrganizationModel;
  }

  /**
   * 获取组织信息
   */
  getOrganizationById(orgId: string): OrganizationModel | null {
    const stmt = this.db.prepare('SELECT * FROM organizations WHERE id = ?');
    return stmt.get(orgId) as OrganizationModel | null;
  }

  /**
   * 获取用户的活跃订阅
   */
  getUserActiveSubscription(userId: string): SubscriptionModel | null {
    const stmt = this.db.prepare(`
      SELECT * FROM subscriptions 
      WHERE user_id = ? AND status = 'ACTIVE'
      ORDER BY created_at DESC
      LIMIT 1
    `);
    return stmt.get(userId) as SubscriptionModel | null;
  }

  /**
   * 取消订阅
   */
  cancelSubscription(subscriptionId: string): boolean {
    const stmt = this.db.prepare(`
      UPDATE subscriptions SET status = 'CANCELLED' WHERE id = ?
    `);
    const result = stmt.run(subscriptionId);
    return result.changes > 0;
  }

  /**
   * 获取所有用户（分页）
   */
  getAllUsers(params?: {
    page?: number;
    pageSize?: number;
    tier?: UserTier;
  }): { users: UserModel[]; total: number; page: number; pageSize: number } {
    const page = params?.page || 1;
    const pageSize = params?.pageSize || 20;
    const offset = (page - 1) * pageSize;
    
    let whereClauses: string[] = [];
    let queryParams: any[] = [];
    
    if (params?.tier) {
      whereClauses.push('tier = ?');
      queryParams.push(params.tier);
    }
    
    const whereClause = whereClauses.length > 0 ? `WHERE ${whereClauses.join(' AND ')}` : '';
    
    // 查询总数
    const countStmt = this.db.prepare(`SELECT COUNT(*) as count FROM users ${whereClause}`);
    const countResult = countStmt.get(...queryParams) as { count: number };
    
    // 查询分页数据
    const stmt = this.db.prepare(`
      SELECT * FROM users ${whereClause}
      ORDER BY created_at DESC
      LIMIT ? OFFSET ?
    `);
    const users = stmt.all(...queryParams, pageSize, offset) as UserModel[];
    
    return {
      users,
      total: countResult.count,
      page,
      pageSize,
    };
  }
}
