// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-15
// Task: M6 Phase4 - 账单和发票管理

import { nanoid } from 'nanoid';

/**
 * 账单状态
 */
export enum BillStatus {
  /** 待支付 */
  PENDING = 'pending',
  
  /** 已支付 */
  PAID = 'paid',
  
  /** 已逾期 */
  OVERDUE = 'overdue',
  
  /** 已取消 */
  CANCELLED = 'cancelled',
  
  /** 已退款 */
  REFUNDED = 'refunded',
}

/**
 * 发票类型
 */
export enum InvoiceType {
  /** 增值税普通发票 */
  VAT_NORMAL = 'vat_normal',
  
  /** 增值税专用发票 */
  VAT_SPECIAL = 'vat_special',
  
  /** 电子发票 */
  ELECTRONIC = 'electronic',
}

/**
 * 账单
 */
export interface Bill {
  /** 账单ID */
  id: string;
  
  /** 用户ID */
  userId: string;
  
  /** 订阅ID */
  subscriptionId: string;
  
  /** 计费周期开始 */
  periodStart: Date;
  
  /** 计费周期结束 */
  periodEnd: Date;
  
  /** 金额 (分) */
  amount: number;
  
  /** 状态 */
  status: BillStatus;
  
  /** 支付订单ID */
  paymentOrderId?: string;
  
  /** 支付时间 */
  paidAt?: Date;
  
  /** 到期时间 */
  dueDate: Date;
  
  /** 创建时间 */
  createdAt: Date;
  
  /** 明细 */
  items: BillItem[];
}

/**
 * 账单明细
 */
export interface BillItem {
  /** 描述 */
  description: string;
  
  /** 数量 */
  quantity: number;
  
  /** 单价 (分) */
  unitPrice: number;
  
  /** 小计 (分) */
  amount: number;
}

/**
 * 发票
 */
export interface Invoice {
  /** 发票ID */
  id: string;
  
  /** 账单ID */
  billId: string;
  
  /** 用户ID */
  userId: string;
  
  /** 发票类型 */
  type: InvoiceType;
  
  /** 发票抬头 */
  title: string;
  
  /** 税号 */
  taxId: string;
  
  /** 发票金额 (分) */
  amount: number;
  
  /** 发票号码 */
  invoiceNumber?: string;
  
  /** 开票时间 */
  issuedAt?: Date;
  
  /** 发票URL (PDF) */
  pdfUrl?: string;
  
  /** 创建时间 */
  createdAt: Date;
  
  /** 状态 */
  status: 'pending' | 'issued' | 'cancelled';
}

/**
 * 账单管理器
 */
export class BillingManager {
  /**
   * 创建账单
   */
  async createBill(
    userId: string,
    subscriptionId: string,
    amount: number,
    periodStart: Date,
    periodEnd: Date,
    items: BillItem[]
  ): Promise<Bill> {
    const billId = nanoid();
    const now = new Date();
    const dueDate = new Date(periodStart);
    dueDate.setDate(dueDate.getDate() + 3); // 3天内支付

    const bill: Bill = {
      id: billId,
      userId,
      subscriptionId,
      periodStart,
      periodEnd,
      amount,
      status: BillStatus.PENDING,
      dueDate,
      createdAt: now,
      items,
    };

    // TODO: 保存到数据库
    return bill;
  }

  /**
   * 获取用户账单列表
   */
  async getUserBills(userId: string, limit: number = 10): Promise<Bill[]> {
    // TODO: 从数据库查询
    return [];
  }

  /**
   * 获取账单详情
   */
  async getBill(billId: string): Promise<Bill | null> {
    // TODO: 从数据库查询
    return null;
  }

  /**
   * 标记账单为已支付
   */
  async markBillAsPaid(billId: string, paymentOrderId: string): Promise<void> {
    // TODO: 更新数据库
  }

  /**
   * 申请发票
   */
  async requestInvoice(
    billId: string,
    type: InvoiceType,
    title: string,
    taxId: string
  ): Promise<Invoice> {
    const bill = await this.getBill(billId);
    if (!bill) {
      throw new Error('账单不存在');
    }

    if (bill.status !== BillStatus.PAID) {
      throw new Error('只能为已支付的账单开具发票');
    }

    const invoiceId = nanoid();
    const now = new Date();

    const invoice: Invoice = {
      id: invoiceId,
      billId,
      userId: bill.userId,
      type,
      title,
      taxId,
      amount: bill.amount,
      createdAt: now,
      status: 'pending',
    };

    // TODO: 保存到数据库
    // TODO: 调用第三方发票服务

    return invoice;
  }

  /**
   * 获取用户发票列表
   */
  async getUserInvoices(userId: string): Promise<Invoice[]> {
    // TODO: 从数据库查询
    return [];
  }

  /**
   * 下载发票PDF
   */
  async downloadInvoice(invoiceId: string): Promise<string> {
    // TODO: 从数据库查询发票
    // TODO: 返回PDF URL或生成PDF
    return '';
  }

  /**
   * 检查逾期账单
   */
  async checkOverdueBills(): Promise<void> {
    const now = new Date();
    
    // TODO: 查询所有待支付的账单
    // 如果dueDate < now，标记为逾期
    // 发送逾期通知
  }

  /**
   * 生成账单摘要
   */
  async getBillingSummary(userId: string, year: number, month?: number): Promise<{
    totalAmount: number;
    paidAmount: number;
    pendingAmount: number;
    billCount: number;
  }> {
    // TODO: 统计用户的账单数据
    return {
      totalAmount: 0,
      paidAmount: 0,
      pendingAmount: 0,
      billCount: 0,
    };
  }
}
