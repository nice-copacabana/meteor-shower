// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-15
// Task: M6 Phase1 - A3: 数据治理功能 - 权限矩阵实现

import { UserRole, ResourceType, Action, Permission, PermissionCheckResult, PermissionContext } from './types.js';

/**
 * 权限矩阵 - 定义每个角色对每种资源的操作权限
 */
const PERMISSION_MATRIX: Record<UserRole, Record<ResourceType, Action[]>> = {
  // 企业管理员 - 拥有所有权限
  [UserRole.ENTERPRISE_ADMIN]: {
    [ResourceType.TOOL]: [Action.CREATE, Action.READ, Action.UPDATE, Action.DELETE, Action.SHARE, Action.MANAGE],
    [ResourceType.TEMPLATE]: [Action.CREATE, Action.READ, Action.UPDATE, Action.DELETE, Action.SHARE, Action.MANAGE],
    [ResourceType.USER]: [Action.CREATE, Action.READ, Action.UPDATE, Action.DELETE, Action.MANAGE],
    [ResourceType.ORGANIZATION]: [Action.CREATE, Action.READ, Action.UPDATE, Action.DELETE, Action.MANAGE],
    [ResourceType.USAGE_STATS]: [Action.READ, Action.MANAGE],
    [ResourceType.SUBSCRIPTION]: [Action.CREATE, Action.READ, Action.UPDATE, Action.DELETE, Action.MANAGE],
  },
  
  // 部门管理员 - 管理部门内资源
  [UserRole.DEPARTMENT_ADMIN]: {
    [ResourceType.TOOL]: [Action.CREATE, Action.READ, Action.UPDATE, Action.DELETE, Action.SHARE],
    [ResourceType.TEMPLATE]: [Action.CREATE, Action.READ, Action.UPDATE, Action.DELETE, Action.SHARE],
    [ResourceType.USER]: [Action.READ, Action.UPDATE], // 只能查看和更新部门用户
    [ResourceType.ORGANIZATION]: [Action.READ], // 只能查看组织信息
    [ResourceType.USAGE_STATS]: [Action.READ], // 可查看部门统计
    [ResourceType.SUBSCRIPTION]: [Action.READ],
  },
  
  // 团队管理员 - 管理团队资源
  [UserRole.TEAM_ADMIN]: {
    [ResourceType.TOOL]: [Action.CREATE, Action.READ, Action.UPDATE, Action.DELETE, Action.SHARE],
    [ResourceType.TEMPLATE]: [Action.CREATE, Action.READ, Action.UPDATE, Action.DELETE, Action.SHARE],
    [ResourceType.USER]: [Action.READ], // 只能查看团队成员
    [ResourceType.ORGANIZATION]: [Action.READ],
    [ResourceType.USAGE_STATS]: [Action.READ], // 可查看团队统计
    [ResourceType.SUBSCRIPTION]: [Action.READ],
  },
  
  // 普通成员 - 基本操作权限
  [UserRole.MEMBER]: {
    [ResourceType.TOOL]: [Action.CREATE, Action.READ, Action.UPDATE, Action.DELETE], // 可管理自己的工具
    [ResourceType.TEMPLATE]: [Action.CREATE, Action.READ, Action.SHARE], // 可创建、查看和分享模板
    [ResourceType.USER]: [Action.READ], // 可查看用户信息
    [ResourceType.ORGANIZATION]: [Action.READ],
    [ResourceType.USAGE_STATS]: [Action.READ], // 可查看自己的统计
    [ResourceType.SUBSCRIPTION]: [Action.READ],
  },
  
  // 访客 - 只读权限
  [UserRole.GUEST]: {
    [ResourceType.TOOL]: [Action.READ], // 只能查看公开工具
    [ResourceType.TEMPLATE]: [Action.READ], // 只能查看公开模板
    [ResourceType.USER]: [], // 无权限
    [ResourceType.ORGANIZATION]: [],
    [ResourceType.USAGE_STATS]: [],
    [ResourceType.SUBSCRIPTION]: [],
  },
};

/**
 * 权限管理器
 */
export class PermissionManager {
  /**
   * 检查基本权限（不考虑资源所有权）
   */
  checkBasePermission(role: UserRole, resourceType: ResourceType, action: Action): boolean {
    const allowedActions = PERMISSION_MATRIX[role]?.[resourceType] || [];
    return allowedActions.includes(action);
  }

  /**
   * 检查资源所有权
   */
  checkResourceOwnership(userId: string, resource: { ownerId: string; organizationId?: string; isPublic?: boolean }): 'owner' | 'organization' | 'public' | 'none' {
    // 是所有者
    if (resource.ownerId === userId) {
      return 'owner';
    }
    
    // 同组织
    if (resource.organizationId) {
      return 'organization';
    }
    
    // 公开资源
    if (resource.isPublic) {
      return 'public';
    }
    
    return 'none';
  }

  /**
   * 检查用户权限（考虑角色和资源所有权）
   */
  checkPermission(context: PermissionContext): PermissionCheckResult {
    const { userId, userRole, action, resourceType, resource } = context;
    
    const permission: Permission = `${resourceType}:${action}`;
    
    // 1. 检查基本角色权限
    const hasBasePermission = this.checkBasePermission(userRole, resourceType, action);
    
    if (!hasBasePermission) {
      return {
        allowed: false,
        reason: `角色 ${userRole} 没有权限执行操作 ${permission}`,
        role: userRole,
        permission,
      };
    }
    
    // 2. 如果有资源信息，检查资源所有权
    if (resource) {
      const ownership = this.checkResourceOwnership(userId, resource);
      
      // 对于修改/删除操作，需要是所有者或管理员
      if (action === Action.UPDATE || action === Action.DELETE) {
        const isOwner = ownership === 'owner';
        const isAdmin = userRole === UserRole.ENTERPRISE_ADMIN || 
                       userRole === UserRole.DEPARTMENT_ADMIN ||
                       userRole === UserRole.TEAM_ADMIN;
        
        if (!isOwner && !isAdmin) {
          return {
            allowed: false,
            reason: '只有资源所有者或管理员可以修改/删除资源',
            role: userRole,
            permission,
          };
        }
      }
      
      // 对于读取操作，检查是否有访问权限
      if (action === Action.READ) {
        if (ownership === 'none') {
          // 只有管理员可以访问私有资源
          const isAdmin = userRole === UserRole.ENTERPRISE_ADMIN || 
                         userRole === UserRole.DEPARTMENT_ADMIN;
          
          if (!isAdmin) {
            return {
              allowed: false,
              reason: '无权访问该资源',
              role: userRole,
              permission,
            };
          }
        }
      }
    }
    
    // 3. 权限检查通过
    return {
      allowed: true,
      role: userRole,
      permission,
    };
  }

  /**
   * 获取角色的所有权限
   */
  getRolePermissions(role: UserRole): Permission[] {
    const permissions: Permission[] = [];
    const roleMatrix = PERMISSION_MATRIX[role];
    
    if (!roleMatrix) {
      return permissions;
    }
    
    for (const [resourceType, actions] of Object.entries(roleMatrix)) {
      for (const action of actions) {
        permissions.push(`${resourceType}:${action}` as Permission);
      }
    }
    
    return permissions;
  }

  /**
   * 获取权限矩阵（用于文档或调试）
   */
  getPermissionMatrix(): Record<UserRole, Record<ResourceType, Action[]>> {
    return PERMISSION_MATRIX;
  }

  /**
   * 检查角色层级（用于判断是否可以管理其他角色）
   */
  getRoleLevel(role: UserRole): number {
    const levels: Record<UserRole, number> = {
      [UserRole.ENTERPRISE_ADMIN]: 5,
      [UserRole.DEPARTMENT_ADMIN]: 4,
      [UserRole.TEAM_ADMIN]: 3,
      [UserRole.MEMBER]: 2,
      [UserRole.GUEST]: 1,
    };
    return levels[role] || 0;
  }

  /**
   * 检查是否可以管理目标角色
   */
  canManageRole(managerRole: UserRole, targetRole: UserRole): boolean {
    return this.getRoleLevel(managerRole) > this.getRoleLevel(targetRole);
  }
}
