// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-17
// Task: 实现权限矩阵和AuditLogger审计日志记录器

/**
 * 权限管理器V2
 * 
 * 实现权限矩阵：Owner/Admin/Member/Guest
 */

import Database from 'better-sqlite3';
import { randomUUID } from 'crypto';

/**
 * 用户角色
 */
export type UserRole = 'OWNER' | 'ADMIN' | 'MEMBER' | 'GUEST';

/**
 * 权限操作
 */
export type Permission = 'READ' | 'WRITE' | 'DELETE' | 'MANAGE' | 'SHARE';

/**
 * 权限矩阵
 */
const PERMISSION_MATRIX: Record<UserRole, Record<Permission, boolean>> = {
  OWNER: {
    READ: true,
    WRITE: true,
    DELETE: true,
    MANAGE: true,
    SHARE: true,
  },
  ADMIN: {
    READ: true,
    WRITE: true,
    DELETE: true,
    MANAGE: true,
    SHARE: true,
  },
  MEMBER: {
    READ: true,
    WRITE: true,
    DELETE: false,
    MANAGE: false,
    SHARE: true,
  },
  GUEST: {
    READ: true,
    WRITE: false,
    DELETE: false,
    MANAGE: false,
    SHARE: false,
  },
};

/**
 * 权限管理器
 */
export class PermissionManagerV2 {
  constructor(private db: Database.Database) {}

  /**
   * 检查用户权限
   */
  hasPermission(userId: string, role: UserRole, permission: Permission): boolean {
    return PERMISSION_MATRIX[role][permission];
  }

  /**
   * 获取用户角色
   */
  getUserRole(userId: string, resourceOwnerId: string, organizationId?: string): UserRole {
    // 如果是资源所有者
    if (userId === resourceOwnerId) {
      return 'OWNER';
    }

    // 从users表获取用户角色
    const stmt = this.db.prepare('SELECT role FROM users WHERE id = ?');
    const user = stmt.get(userId) as any;

    if (!user || !user.role) {
      return 'GUEST';
    }

    // 映射角色
    const roleMap: Record<string, UserRole> = {
      'enterprise_admin': 'ADMIN',
      'department_admin': 'ADMIN',
      'team_admin': 'ADMIN',
      'member': 'MEMBER',
      'guest': 'GUEST',
    };

    return roleMap[user.role] || 'GUEST';
  }

  /**
   * 批量检查权限
   */
  checkPermissions(userId: string, role: UserRole, permissions: Permission[]): Record<Permission, boolean> {
    const result: any = {};
    
    for (const permission of permissions) {
      result[permission] = this.hasPermission(userId, role, permission);
    }
    
    return result;
  }
}

/**
 * 审计日志记录器V2
 */
export class AuditLoggerV2 {
  constructor(private db: Database.Database) {}

  /**
   * 记录审计日志
   */
  log(params: {
    userId: string;
    action: string;
    resourceType: string;
    resourceId?: string;
    ipAddress?: string;
    metadata?: Record<string, any>;
  }): void {
    const logId = randomUUID();
    const now = Date.now();

    const stmt = this.db.prepare(`
      INSERT INTO audit_logs (id, user_id, action, resource_type, resource_id, timestamp, ip_address, metadata)
      VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    `);

    stmt.run(
      logId,
      params.userId,
      params.action,
      params.resourceType,
      params.resourceId || null,
      now,
      params.ipAddress || null,
      params.metadata ? JSON.stringify(params.metadata) : null
    );
  }

  /**
   * 查询审计日志
   */
  getLogs(params: {
    userId?: string;
    startDate?: number;
    endDate?: number;
    page?: number;
    pageSize?: number;
  }): { logs: any[]; total: number } {
    const page = params.page || 1;
    const pageSize = params.pageSize || 20;
    const offset = (page - 1) * pageSize;

    let whereClauses: string[] = [];
    let queryParams: any[] = [];

    if (params.userId) {
      whereClauses.push('user_id = ?');
      queryParams.push(params.userId);
    }

    if (params.startDate) {
      whereClauses.push('timestamp >= ?');
      queryParams.push(params.startDate);
    }

    if (params.endDate) {
      whereClauses.push('timestamp <= ?');
      queryParams.push(params.endDate);
    }

    const whereClause = whereClauses.length > 0 ? `WHERE ${whereClauses.join(' AND ')}` : '';

    // 查询总数
    const countStmt = this.db.prepare(`SELECT COUNT(*) as count FROM audit_logs ${whereClause}`);
    const countResult = countStmt.get(...queryParams) as { count: number };

    // 查询分页数据
    const stmt = this.db.prepare(`
      SELECT * FROM audit_logs ${whereClause}
      ORDER BY timestamp DESC
      LIMIT ? OFFSET ?
    `);
    const logs = stmt.all(...queryParams, pageSize, offset);

    return {
      logs,
      total: countResult.count,
    };
  }

  /**
   * 导出审计日志
   */
  exportLogs(params: {
    userId?: string;
    startDate?: number;
    endDate?: number;
    format: 'JSON' | 'CSV';
  }): string {
    const { logs } = this.getLogs({
      userId: params.userId,
      startDate: params.startDate,
      endDate: params.endDate,
      page: 1,
      pageSize: 10000,
    });

    if (params.format === 'JSON') {
      return JSON.stringify(logs, null, 2);
    }

    // CSV格式
    const headers = ['id', 'user_id', 'action', 'resource_type', 'resource_id', 'timestamp', 'ip_address'];
    const csvLines = [headers.join(',')];

    for (const log of logs) {
      const values = headers.map(h => log[h] || '');
      csvLines.push(values.join(','));
    }

    return csvLines.join('\n');
  }
}
