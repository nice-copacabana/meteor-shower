// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-15
// Task: M6 Phase1 - A3: 数据治理功能 - 审计日志管理器实现

import Database from 'better-sqlite3';
import { nanoid } from 'nanoid';
import { AuditLogEntry, AuditEventType, AuditLogQuery, AuditLogQueryResult } from './audit-types.js';
import { ResourceType, Action } from './types.js';

/**
 * 审计日志数据库Schema
 */
export const AUDIT_LOG_SCHEMA = `
  CREATE TABLE IF NOT EXISTS audit_logs (
    id TEXT PRIMARY KEY,
    event_type TEXT NOT NULL,
    user_id TEXT NOT NULL,
    resource_type TEXT,
    resource_id TEXT,
    action TEXT,
    before_data TEXT,
    after_data TEXT,
    metadata TEXT,
    ip_address TEXT,
    user_agent TEXT,
    success INTEGER NOT NULL,
    failure_reason TEXT,
    timestamp INTEGER NOT NULL,
    
    -- 索引优化
    FOREIGN KEY (user_id) REFERENCES users(id)
  );
  
  -- 索引
  CREATE INDEX IF NOT EXISTS idx_audit_user_id ON audit_logs(user_id);
  CREATE INDEX IF NOT EXISTS idx_audit_event_type ON audit_logs(event_type);
  CREATE INDEX IF NOT EXISTS idx_audit_resource ON audit_logs(resource_type, resource_id);
  CREATE INDEX IF NOT EXISTS idx_audit_timestamp ON audit_logs(timestamp);
`;

/**
 * 审计日志管理器
 */
export class AuditLogManager {
  constructor(private db: Database.Database) {}

  /**
   * 记录审计日志
   */
  log(entry: Omit<AuditLogEntry, 'id' | 'timestamp'>): AuditLogEntry {
    const id = nanoid();
    const timestamp = Date.now();
    
    const stmt = this.db.prepare(`
      INSERT INTO audit_logs (
        id, event_type, user_id, resource_type, resource_id, action,
        before_data, after_data, metadata, ip_address, user_agent,
        success, failure_reason, timestamp
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    `);
    
    stmt.run(
      id,
      entry.eventType,
      entry.userId,
      entry.resourceType || null,
      entry.resourceId || null,
      entry.action || null,
      entry.before ? JSON.stringify(entry.before) : null,
      entry.after ? JSON.stringify(entry.after) : null,
      entry.metadata ? JSON.stringify(entry.metadata) : null,
      entry.ipAddress || null,
      entry.userAgent || null,
      entry.success ? 1 : 0,
      entry.failureReason || null,
      timestamp
    );
    
    return {
      ...entry,
      id,
      timestamp: new Date(timestamp),
    };
  }

  /**
   * 查询审计日志
   */
  query(query: AuditLogQuery = {}): AuditLogQueryResult {
    const {
      userId,
      eventType,
      resourceType,
      resourceId,
      startDate,
      endDate,
      successOnly,
      failureOnly,
      page = 1,
      pageSize = 50,
    } = query;

    // 构建WHERE子句
    const conditions: string[] = [];
    const params: any[] = [];

    if (userId) {
      conditions.push('user_id = ?');
      params.push(userId);
    }

    if (eventType) {
      conditions.push('event_type = ?');
      params.push(eventType);
    }

    if (resourceType) {
      conditions.push('resource_type = ?');
      params.push(resourceType);
    }

    if (resourceId) {
      conditions.push('resource_id = ?');
      params.push(resourceId);
    }

    if (startDate) {
      conditions.push('timestamp >= ?');
      params.push(startDate.getTime());
    }

    if (endDate) {
      conditions.push('timestamp <= ?');
      params.push(endDate.getTime());
    }

    if (successOnly) {
      conditions.push('success = 1');
    }

    if (failureOnly) {
      conditions.push('success = 0');
    }

    const whereClause = conditions.length > 0 ? 'WHERE ' + conditions.join(' AND ') : '';

    // 查询总数
    const countStmt = this.db.prepare(`SELECT COUNT(*) as count FROM audit_logs ${whereClause}`);
    const { count } = countStmt.get(...params) as { count: number };

    // 分页查询
    const offset = (page - 1) * pageSize;
    const dataStmt = this.db.prepare(`
      SELECT * FROM audit_logs ${whereClause}
      ORDER BY timestamp DESC
      LIMIT ? OFFSET ?
    `);

    const rows = dataStmt.all(...params, pageSize, offset) as any[];

    // 转换为AuditLogEntry对象
    const entries: AuditLogEntry[] = rows.map(row => ({
      id: row.id,
      eventType: row.event_type as AuditEventType,
      userId: row.user_id,
      resourceType: row.resource_type as ResourceType | undefined,
      resourceId: row.resource_id || undefined,
      action: row.action as Action | undefined,
      before: row.before_data ? JSON.parse(row.before_data) : undefined,
      after: row.after_data ? JSON.parse(row.after_data) : undefined,
      metadata: row.metadata ? JSON.parse(row.metadata) : undefined,
      ipAddress: row.ip_address || undefined,
      userAgent: row.user_agent || undefined,
      success: row.success === 1,
      failureReason: row.failure_reason || undefined,
      timestamp: new Date(row.timestamp),
    }));

    return {
      entries,
      total: count,
      page,
      pageSize,
      totalPages: Math.ceil(count / pageSize),
    };
  }

  /**
   * 根据ID获取审计日志
   */
  getById(id: string): AuditLogEntry | null {
    const stmt = this.db.prepare('SELECT * FROM audit_logs WHERE id = ?');
    const row = stmt.get(id) as any;

    if (!row) {
      return null;
    }

    return {
      id: row.id,
      eventType: row.event_type as AuditEventType,
      userId: row.user_id,
      resourceType: row.resource_type as ResourceType | undefined,
      resourceId: row.resource_id || undefined,
      action: row.action as Action | undefined,
      before: row.before_data ? JSON.parse(row.before_data) : undefined,
      after: row.after_data ? JSON.parse(row.after_data) : undefined,
      metadata: row.metadata ? JSON.parse(row.metadata) : undefined,
      ipAddress: row.ip_address || undefined,
      userAgent: row.user_agent || undefined,
      success: row.success === 1,
      failureReason: row.failure_reason || undefined,
      timestamp: new Date(row.timestamp),
    };
  }

  /**
   * 删除旧的审计日志（用于日志清理）
   */
  deleteOldLogs(beforeDate: Date): number {
    const stmt = this.db.prepare('DELETE FROM audit_logs WHERE timestamp < ?');
    const result = stmt.run(beforeDate.getTime());
    return result.changes;
  }

  /**
   * 获取用户的最近活动
   */
  getUserRecentActivity(userId: string, limit: number = 10): AuditLogEntry[] {
    const stmt = this.db.prepare(`
      SELECT * FROM audit_logs
      WHERE user_id = ?
      ORDER BY timestamp DESC
      LIMIT ?
    `);

    const rows = stmt.all(userId, limit) as any[];

    return rows.map(row => ({
      id: row.id,
      eventType: row.event_type as AuditEventType,
      userId: row.user_id,
      resourceType: row.resource_type as ResourceType | undefined,
      resourceId: row.resource_id || undefined,
      action: row.action as Action | undefined,
      before: row.before_data ? JSON.parse(row.before_data) : undefined,
      after: row.after_data ? JSON.parse(row.after_data) : undefined,
      metadata: row.metadata ? JSON.parse(row.metadata) : undefined,
      ipAddress: row.ip_address || undefined,
      userAgent: row.user_agent || undefined,
      success: row.success === 1,
      failureReason: row.failure_reason || undefined,
      timestamp: new Date(row.timestamp),
    }));
  }

  /**
   * 获取资源的操作历史
   */
  getResourceHistory(resourceType: ResourceType, resourceId: string, limit: number = 20): AuditLogEntry[] {
    const stmt = this.db.prepare(`
      SELECT * FROM audit_logs
      WHERE resource_type = ? AND resource_id = ?
      ORDER BY timestamp DESC
      LIMIT ?
    `);

    const rows = stmt.all(resourceType, resourceId, limit) as any[];

    return rows.map(row => ({
      id: row.id,
      eventType: row.event_type as AuditEventType,
      userId: row.user_id,
      resourceType: row.resource_type as ResourceType | undefined,
      resourceId: row.resource_id || undefined,
      action: row.action as Action | undefined,
      before: row.before_data ? JSON.parse(row.before_data) : undefined,
      after: row.after_data ? JSON.parse(row.after_data) : undefined,
      metadata: row.metadata ? JSON.parse(row.metadata) : undefined,
      ipAddress: row.ip_address || undefined,
      userAgent: row.user_agent || undefined,
      success: row.success === 1,
      failureReason: row.failure_reason || undefined,
      timestamp: new Date(row.timestamp),
    }));
  }
}
