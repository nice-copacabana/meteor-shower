// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-15
// Task: M6 Phase3 - 使用量统计显示

import chalk from 'chalk';
import { QuotaManager, QuotaType, QuotaCheckResult } from './quota-manager.js';
import { UserTier } from '../types.js';

/**
 * 使用量显示配置
 */
export interface UsageDisplayOptions {
  /** 是否显示百分比 */
  showPercentage?: boolean;
  
  /** 是否显示进度条 */
  showProgressBar?: boolean;
  
  /** 进度条长度 */
  barLength?: number;
  
  /** 是否显示颜色 */
  colored?: boolean;
}

/**
 * 使用量统计显示器
 */
export class UsageDisplay {
  constructor(private quotaManager: QuotaManager) {}

  /**
   * 显示单个配额使用情况
   */
  async displayQuota(
    userId: string,
    quotaType: QuotaType,
    options: UsageDisplayOptions = {}
  ): Promise<void> {
    const {
      showPercentage = true,
      showProgressBar = true,
      barLength = 20,
      colored = true,
    } = options;

    const quota = await this.quotaManager.checkQuota(userId, quotaType);
    
    console.log(chalk.bold(`\n${this.getQuotaDisplayName(quotaType)}:`));
    
    // 显示数值
    if (quota.limit === -1) {
      console.log(chalk.gray(`  当前使用: ${quota.current} (无限制)`));
    } else {
      console.log(chalk.gray(`  当前使用: ${quota.current} / ${quota.limit}`));
      console.log(chalk.gray(`  剩余配额: ${quota.remaining}`));
      
      // 显示百分比
      if (showPercentage) {
        const percentage = (quota.current / quota.limit) * 100;
        const percentColor = this.getPercentageColor(percentage, colored);
        console.log(percentColor(`  使用率: ${percentage.toFixed(1)}%`));
      }
      
      // 显示进度条
      if (showProgressBar) {
        const bar = this.generateProgressBar(quota, barLength, colored);
        console.log(`  进度: ${bar}`);
      }
    }
    
    // 显示警告
    if (!quota.allowed) {
      console.log(chalk.red(`  ⚠️  ${quota.reason}`));
    } else if (quota.limit !== -1 && quota.remaining < quota.limit * 0.2) {
      console.log(chalk.yellow(`  ⚠️  配额即将用尽，建议升级`));
    }
  }

  /**
   * 显示所有配额使用情况
   */
  async displayAllQuotas(
    userId: string,
    options: UsageDisplayOptions = {}
  ): Promise<void> {
    console.log(chalk.cyan.bold('\n📊 配额使用情况\n'));
    
    const quotas = await this.quotaManager.getAllQuotas(userId);
    
    for (const [type, quota] of Object.entries(quotas)) {
      await this.displayQuota(userId, type as QuotaType, options);
    }
    
    console.log('');
  }

  /**
   * 显示配额摘要
   */
  async displayQuotaSummary(userId: string): Promise<void> {
    const quotas = await this.quotaManager.getAllQuotas(userId);
    const tier = quotas[QuotaType.TOOLS]?.tier || UserTier.FREE;
    
    console.log(chalk.cyan.bold('\n📊 配额摘要\n'));
    console.log(chalk.white(`当前层级: ${this.getTierDisplayName(tier)}\n`));
    
    // 计算总体使用情况
    let totalQuotas = 0;
    let nearLimitQuotas = 0;
    let atLimitQuotas = 0;
    
    for (const quota of Object.values(quotas)) {
      if (quota.limit === -1) continue; // 跳过无限配额
      
      totalQuotas++;
      const percentage = (quota.current / quota.limit) * 100;
      
      if (percentage >= 100) {
        atLimitQuotas++;
      } else if (percentage >= 80) {
        nearLimitQuotas++;
      }
    }
    
    console.log(chalk.gray(`总配额项: ${totalQuotas}`));
    console.log(chalk.red(`已达上限: ${atLimitQuotas}`));
    console.log(chalk.yellow(`接近上限 (≥80%): ${nearLimitQuotas}`));
    console.log(chalk.green(`正常使用: ${totalQuotas - atLimitQuotas - nearLimitQuotas}`));
    
    // 显示建议
    if (atLimitQuotas > 0 || nearLimitQuotas > 0) {
      console.log(chalk.yellow('\n💡 建议: 考虑升级到更高层级以获得更多配额'));
    }
    
    console.log('');
  }

  /**
   * 生成进度条
   */
  private generateProgressBar(
    quota: QuotaCheckResult,
    length: number = 20,
    colored: boolean = true
  ): string {
    if (quota.limit === -1) {
      return chalk.gray('∞ 无限制');
    }
    
    const percentage = (quota.current / quota.limit) * 100;
    const filled = Math.round((percentage / 100) * length);
    const empty = length - filled;
    
    let barColor: (text: string) => string;
    if (!colored) {
      barColor = (text: string) => text;
    } else if (percentage >= 100) {
      barColor = chalk.red;
    } else if (percentage >= 80) {
      barColor = chalk.yellow;
    } else if (percentage >= 50) {
      barColor = chalk.blue;
    } else {
      barColor = chalk.green;
    }
    
    const filledBar = barColor('█'.repeat(filled));
    const emptyBar = chalk.gray('░'.repeat(empty));
    
    return `${filledBar}${emptyBar} ${percentage.toFixed(0)}%`;
  }

  /**
   * 获取百分比颜色
   */
  private getPercentageColor(percentage: number, colored: boolean): (text: string) => string {
    if (!colored) {
      return chalk.white;
    }
    
    if (percentage >= 100) {
      return chalk.red;
    } else if (percentage >= 80) {
      return chalk.yellow;
    } else if (percentage >= 50) {
      return chalk.blue;
    } else {
      return chalk.green;
    }
  }

  /**
   * 获取配额显示名称
   */
  private getQuotaDisplayName(quotaType: QuotaType): string {
    const names: Record<QuotaType, string> = {
      [QuotaType.TOOLS]: '🔧 工具配置数量',
      [QuotaType.TEMPLATES]: '📄 云端模板数量',
      [QuotaType.SHARES]: '🔗 月分享次数',
      [QuotaType.VALIDATIONS]: '✅ 月验证次数',
      [QuotaType.TEAM_MEMBERS]: '👥 团队成员数量',
    };
    return names[quotaType] || quotaType;
  }

  /**
   * 获取层级显示名称
   */
  private getTierDisplayName(tier: UserTier): string {
    const names: Record<UserTier, string> = {
      [UserTier.FREE]: '免费版 (Free)',
      [UserTier.PROFESSIONAL]: '专业版 (Professional)',
      [UserTier.TEAM]: '团队版 (Team)',
      [UserTier.ENTERPRISE]: '企业版 (Enterprise)',
    };
    return names[tier] || tier;
  }
}
