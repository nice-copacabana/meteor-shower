// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-15
// Task: M6 Phase3 - 配额管理系统实现

import { DatabaseManager } from '../database/manager.js';
import { UserTier } from '../types.js';

/**
 * 配额类型枚举
 */
export enum QuotaType {
  /** 工具配置数量 */
  TOOLS = 'tools',
  
  /** 云端模板数量 */
  TEMPLATES = 'templates',
  
  /** 月分享次数 */
  SHARES = 'shares',
  
  /** 月验证次数 */
  VALIDATIONS = 'validations',
  
  /** 团队成员数量 */
  TEAM_MEMBERS = 'team_members',
}

/**
 * 配额限制定义
 */
export const QUOTA_LIMITS: Record<UserTier, Record<QuotaType, number>> = {
  [UserTier.FREE]: {
    [QuotaType.TOOLS]: 3,
    [QuotaType.TEMPLATES]: 5,
    [QuotaType.SHARES]: 10,
    [QuotaType.VALIDATIONS]: 20,
    [QuotaType.TEAM_MEMBERS]: 1,
  },
  
  [UserTier.PROFESSIONAL]: {
    [QuotaType.TOOLS]: Infinity,
    [QuotaType.TEMPLATES]: Infinity,
    [QuotaType.SHARES]: 100,
    [QuotaType.VALIDATIONS]: 500,
    [QuotaType.TEAM_MEMBERS]: 1,
  },
  
  [UserTier.TEAM]: {
    [QuotaType.TOOLS]: Infinity,
    [QuotaType.TEMPLATES]: Infinity,
    [QuotaType.SHARES]: Infinity,
    [QuotaType.VALIDATIONS]: 2000,
    [QuotaType.TEAM_MEMBERS]: 50,
  },
  
  [UserTier.ENTERPRISE]: {
    [QuotaType.TOOLS]: Infinity,
    [QuotaType.TEMPLATES]: Infinity,
    [QuotaType.SHARES]: Infinity,
    [QuotaType.VALIDATIONS]: Infinity,
    [QuotaType.TEAM_MEMBERS]: Infinity,
  },
};

/**
 * 配额检查结果
 */
export interface QuotaCheckResult {
  /** 是否允许 */
  allowed: boolean;
  
  /** 配额类型 */
  type: QuotaType;
  
  /** 当前使用量 */
  current: number;
  
  /** 配额限制 (-1表示无限) */
  limit: number;
  
  /** 剩余配额 (-1表示无限) */
  remaining: number;
  
  /** 用户层级 */
  tier: UserTier;
  
  /** 拒绝原因 */
  reason?: string;
}

/**
 * 配额使用记录
 */
export interface QuotaUsage {
  userId: string;
  type: QuotaType;
  period: string; // YYYY-MM格式
  current: number;
}

/**
 * 配额管理器
 */
export class QuotaManager {
  constructor(private dbManager: DatabaseManager) {}

  /**
   * 检查配额是否可用
   */
  async checkQuota(
    userId: string,
    quotaType: QuotaType,
    incrementBy: number = 0
  ): Promise<QuotaCheckResult> {
    // 获取用户信息
    const user = this.dbManager.users.findById(userId);
    if (!user) {
      return {
        allowed: false,
        type: quotaType,
        current: 0,
        limit: 0,
        remaining: 0,
        tier: UserTier.FREE,
        reason: '用户不存在',
      };
    }

    // 获取配额限制
    const limit = QUOTA_LIMITS[user.tier][quotaType];
    
    // 无限配额直接允许
    if (limit === Infinity) {
      return {
        allowed: true,
        type: quotaType,
        current: 0,
        limit: -1,
        remaining: -1,
        tier: user.tier,
      };
    }

    // 获取当前使用量
    const current = await this.getCurrentUsage(userId, quotaType);
    const newUsage = current + incrementBy;
    
    // 检查是否超限
    const allowed = newUsage <= limit;
    const remaining = Math.max(0, limit - newUsage);

    return {
      allowed,
      type: quotaType,
      current: newUsage,
      limit,
      remaining,
      tier: user.tier,
      reason: allowed ? undefined : `已达到${this.getQuotaName(quotaType)}上限 (${limit})`,
    };
  }

  /**
   * 消费配额
   */
  async consumeQuota(
    userId: string,
    quotaType: QuotaType,
    amount: number = 1
  ): Promise<boolean> {
    const check = await this.checkQuota(userId, quotaType, amount);
    
    if (!check.allowed) {
      return false;
    }

    // 更新使用量
    await this.incrementUsage(userId, quotaType, amount);
    return true;
  }

  /**
   * 获取当前使用量
   */
  async getCurrentUsage(userId: string, quotaType: QuotaType): Promise<number> {
    const currentMonth = this.getCurrentPeriod();
    const stats = this.dbManager.usageStats.findByUserAndMonth(userId, currentMonth);
    
    if (!stats) {
      return 0;
    }

    switch (quotaType) {
      case QuotaType.TOOLS:
        return stats.toolsConfigured;
      case QuotaType.TEMPLATES:
        return stats.templatesCreated;
      case QuotaType.SHARES:
        return stats.sharesCount;
      case QuotaType.VALIDATIONS:
        return stats.validationsRun;
      case QuotaType.TEAM_MEMBERS:
        // 团队成员数需要从组织表查询
        return this.getTeamMemberCount(userId);
      default:
        return 0;
    }
  }

  /**
   * 增加使用量
   */
  async incrementUsage(
    userId: string,
    quotaType: QuotaType,
    amount: number = 1
  ): Promise<void> {
    const currentMonth = this.getCurrentPeriod();
    let stats = this.dbManager.usageStats.findByUserAndMonth(userId, currentMonth);

    if (!stats) {
      // 创建新的统计记录
      stats = this.dbManager.usageStats.create({
        id: `usage_${userId}_${currentMonth}`,
        userId,
        period: currentMonth,
        toolsConfigured: 0,
        templatesCreated: 0,
        sharesCount: 0,
        validationsRun: 0,
      });
    }

    // 更新对应的使用量
    const updates: any = {};
    switch (quotaType) {
      case QuotaType.TOOLS:
        updates.toolsConfigured = stats.toolsConfigured + amount;
        break;
      case QuotaType.TEMPLATES:
        updates.templatesCreated = stats.templatesCreated + amount;
        break;
      case QuotaType.SHARES:
        updates.sharesCount = stats.sharesCount + amount;
        break;
      case QuotaType.VALIDATIONS:
        updates.validationsRun = stats.validationsRun + amount;
        break;
    }

    if (Object.keys(updates).length > 0) {
      this.dbManager.usageStats.update(stats.id, updates);
    }
  }

  /**
   * 获取所有配额状态
   */
  async getAllQuotas(userId: string): Promise<Record<QuotaType, QuotaCheckResult>> {
    const results: any = {};
    
    for (const quotaType of Object.values(QuotaType)) {
      results[quotaType] = await this.checkQuota(userId, quotaType as QuotaType);
    }
    
    return results;
  }

  /**
   * 重置月度配额
   */
  async resetMonthlyQuotas(userId: string): Promise<void> {
    const currentMonth = this.getCurrentPeriod();
    const stats = this.dbManager.usageStats.findByUserAndMonth(userId, currentMonth);
    
    if (stats) {
      this.dbManager.usageStats.update(stats.id, {
        sharesCount: 0,
        validationsRun: 0,
      });
    }
  }

  /**
   * 获取配额使用百分比
   */
  async getUsagePercentage(userId: string, quotaType: QuotaType): Promise<number> {
    const check = await this.checkQuota(userId, quotaType);
    
    if (check.limit === -1) {
      return 0; // 无限配额
    }
    
    return (check.current / check.limit) * 100;
  }

  /**
   * 检查是否接近配额限制
   */
  async isNearingLimit(userId: string, quotaType: QuotaType, threshold: number = 80): Promise<boolean> {
    const percentage = await this.getUsagePercentage(userId, quotaType);
    return percentage >= threshold;
  }

  /**
   * 获取配额名称
   */
  private getQuotaName(quotaType: QuotaType): string {
    const names: Record<QuotaType, string> = {
      [QuotaType.TOOLS]: '工具配置',
      [QuotaType.TEMPLATES]: '云端模板',
      [QuotaType.SHARES]: '月分享',
      [QuotaType.VALIDATIONS]: '月验证',
      [QuotaType.TEAM_MEMBERS]: '团队成员',
    };
    return names[quotaType] || quotaType;
  }

  /**
   * 获取当前周期 (YYYY-MM)
   */
  private getCurrentPeriod(): string {
    return new Date().toISOString().slice(0, 7);
  }

  /**
   * 获取团队成员数量
   */
  private getTeamMemberCount(userId: string): number {
    const user = this.dbManager.users.findById(userId);
    if (!user || !user.organizationId) {
      return 1; // 只有自己
    }

    // 查询同组织的用户数量
    const orgUsers = this.dbManager.users.findByOrganization(user.organizationId);
    return orgUsers.length;
  }
}
