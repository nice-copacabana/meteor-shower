// Generated by Qoder AI (Model: claude-sonnet-4-20250514) - 2025-10-14
// Task: 为模板验证器创建单元测试

import { describe, it, expect, beforeEach } from 'vitest';
import { TemplateValidator } from '../src/validator.js';

describe('TemplateValidator', () => {
  let validator: TemplateValidator;

  beforeEach(() => {
    validator = new TemplateValidator();
  });

  describe('基本验证', () => {
    it('应该验证有效的模板', async () => {
      const validTemplate = {
        id: 'test-template',
        name: 'Test Template',
        version: '1.0.0',
        targets: ['gemini'],
        variables: {
          projectName: 'test-project',
          persona: 'You are a test assistant'
        }
      };

      const result = await validator.validate(validTemplate);

      expect(result.valid).toBe(true);
      expect(result.errors).toHaveLength(0);
    });

    it('应该检测缺少必需字段', async () => {
      const invalidTemplate = {
        name: 'Test Template'
        // 缺少 id, version, targets
      };

      const result = await validator.validate(invalidTemplate);

      expect(result.valid).toBe(false);
      expect(result.errors.length).toBeGreaterThan(0);
    });

    it('应该检测无效的targets', async () => {
      const invalidTemplate = {
        id: 'test',
        name: 'Test',
        version: '1.0.0',
        targets: ['invalid-tool']
      };

      const result = await validator.validate(invalidTemplate);

      expect(result.valid).toBe(false);
      const targetError = result.errors.find(e => e.path.includes('targets'));
      expect(targetError).toBeDefined();
    });
  });

  describe('自动修复', () => {
    it('应该自动添加缺失的必需字段', async () => {
      const incompleteTemplate = {
        name: 'Test Template'
      };

      const result = await validator.validateAndFix(incompleteTemplate);

      expect(result.fixed).toBe(true);
      expect(result.fixedTemplate).toBeDefined();
      expect(result.fixedTemplate.id).toBeDefined();
      expect(result.fixedTemplate.version).toBeDefined();
      expect(result.fixedTemplate.targets).toBeDefined();
    });

    it('应该修复无效的ID格式', async () => {
      const template = {
        id: 'Invalid ID With Spaces',
        name: 'Test',
        version: '1.0.0',
        targets: ['gemini']
      };

      const result = await validator.validateAndFix(template);

      expect(result.fixed).toBe(true);
      expect(result.fixedTemplate.id).toMatch(/^[a-z0-9-]+$/);
    });

    it('应该过滤无效的targets并保留有效的', async () => {
      const template = {
        id: 'test',
        name: 'Test',
        version: '1.0.0',
        targets: ['gemini', 'invalid-tool', 'claude']
      };

      const result = await validator.validateAndFix(template);

      expect(result.fixed).toBe(true);
      expect(result.fixedTemplate.targets).toEqual(['gemini', 'claude']);
    });

    it('应该添加默认变量', async () => {
      const template = {
        id: 'test',
        name: 'Test',
        version: '1.0.0',
        targets: ['gemini'],
        variables: {}
      };

      const result = await validator.validateAndFix(template);

      expect(result.fixed).toBe(true);
      expect(result.fixedTemplate.variables.projectName).toBeDefined();
      expect(result.fixedTemplate.variables.persona).toBeDefined();
    });
  });

  describe('业务规则验证', () => {
    it('应该验证ID格式', async () => {
      const template = {
        id: 'Invalid_ID',
        name: 'Test',
        version: '1.0.0',
        targets: ['gemini']
      };

      const result = await validator.validate(template);

      const idError = result.errors.find(e => e.path === '/id');
      expect(idError).toBeDefined();
      expect(idError?.suggestions).toBeDefined();
    });

    it('应该验证版本格式', async () => {
      const template = {
        id: 'test',
        name: 'Test',
        version: 'invalid',
        targets: ['gemini']
      };

      const result = await validator.validate(template);

      const versionError = result.errors.find(e => e.path === '/version');
      expect(versionError).toBeDefined();
    });

    it('应该检查targets非空', async () => {
      const template = {
        id: 'test',
        name: 'Test',
        version: '1.0.0',
        targets: []
      };

      const result = await validator.validate(template);

      const targetsError = result.errors.find(e => e.path === '/targets');
      expect(targetsError).toBeDefined();
    });
  });

  describe('警告检查', () => {
    it('应该建议添加描述', async () => {
      const template = {
        id: 'test',
        name: 'Test',
        version: '1.0.0',
        targets: ['gemini'],
        variables: {}
      };

      const result = await validator.validate(template);

      expect(result.warnings.length).toBeGreaterThan(0);
      const descWarning = result.warnings.find(w => w.path === '/description');
      expect(descWarning).toBeDefined();
    });

    it('应该建议添加category', async () => {
      const template = {
        id: 'test',
        name: 'Test',
        version: '1.0.0',
        targets: ['gemini'],
        variables: {}
      };

      const result = await validator.validate(template);

      const categoryWarning = result.warnings.find(w => w.path === '/category');
      expect(categoryWarning).toBeDefined();
    });

    it('应该建议添加tags', async () => {
      const template = {
        id: 'test',
        name: 'Test',
        version: '1.0.0',
        targets: ['gemini'],
        variables: {}
      };

      const result = await validator.validate(template);

      const tagsWarning = result.warnings.find(w => w.path === '/tags');
      expect(tagsWarning).toBeDefined();
    });
  });

  describe('完整模板验证', () => {
    it('应该验证包含所有字段的完整模板', async () => {
      const completeTemplate = {
        id: 'full-stack-app',
        name: 'Full Stack App',
        description: 'A complete full stack application template',
        version: '1.0.0',
        category: 'web-development',
        targets: ['gemini', 'claude'],
        variables: {
          projectName: 'my-app',
          persona: 'You are a full stack developer',
          techStack: ['React', 'Node.js']
        },
        tags: ['web', 'full-stack'],
        metadata: {
          author: 'Test Author',
          createdAt: '2025-10-14'
        }
      };

      const result = await validator.validate(completeTemplate);

      expect(result.valid).toBe(true);
      expect(result.errors).toHaveLength(0);
      expect(result.warnings.length).toBeLessThan(3); // 可能还有一些小警告
    });

    it('应该处理复杂的variables结构', async () => {
      const template = {
        id: 'test',
        name: 'Test',
        version: '1.0.0',
        targets: ['gemini'],
        variables: {
          projectName: 'test',
          persona: 'test',
          techStack: ['React', 'Node.js'],
          codingRules: ['rule1', 'rule2'],
          nestedObject: {
            key: 'value'
          }
        }
      };

      const result = await validator.validate(template);

      expect(result.valid).toBe(true);
    });
  });

  describe('错误格式化', () => {
    it('应该提供清晰的错误消息', async () => {
      const template = {
        id: 'test',
        version: '1.0.0'
        // 缺少 name 和 targets
      };

      const result = await validator.validate(template);

      expect(result.errors.length).toBeGreaterThan(0);
      result.errors.forEach(error => {
        expect(error.path).toBeDefined();
        expect(error.message).toBeDefined();
        expect(error.severity).toBeDefined();
      });
    });

    it('应该提供修复建议', async () => {
      const template = {
        id: 'Invalid ID',
        name: 'Test',
        version: '1.0.0',
        targets: ['gemini']
      };

      const result = await validator.validate(template);

      const idError = result.errors.find(e => e.path === '/id');
      expect(idError?.suggestions).toBeDefined();
      expect(idError?.suggestions?.length).toBeGreaterThan(0);
    });
  });

  describe('ID生成', () => {
    it('应该生成有效的ID', async () => {
      const template = {
        id: 'Test Template With Spaces!!!',
        name: 'Test',
        version: '1.0.0',
        targets: ['gemini']
      };

      const result = await validator.validateAndFix(template);

      expect(result.fixedTemplate.id).toMatch(/^[a-z0-9-]+$/);
      expect(result.fixedTemplate.id).not.toContain(' ');
      expect(result.fixedTemplate.id).not.toContain('!');
    });

    it('应该移除前后的连字符', async () => {
      const template = {
        id: '-test-template-',
        name: 'Test',
        version: '1.0.0',
        targets: ['gemini']
      };

      const result = await validator.validateAndFix(template);

      expect(result.fixedTemplate.id).not.toMatch(/^-/);
      expect(result.fixedTemplate.id).not.toMatch(/-$/);
    });
  });
});
