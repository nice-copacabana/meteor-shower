// Generated by Qoder AI (Model: claude-sonnet-4-20250514) - 2025-10-14
// Task: 实现模板Schema验证和自动修复功能

import Ajv, { ValidateFunction, ErrorObject } from 'ajv';
import addFormats from 'ajv-formats';
import fs from 'fs/promises';
import path from 'path';
import chalk from 'chalk';

/**
 * 模板验证结果接口
 */
export interface ValidationResult {
  valid: boolean;
  errors: ValidationError[];
  warnings: ValidationWarning[];
  fixed?: boolean;
  fixedTemplate?: any;
}

/**
 * 验证错误接口
 */
export interface ValidationError {
  path: string;
  message: string;
  severity: 'error' | 'warning';
  suggestions?: string[];
}

/**
 * 验证警告接口
 */
export interface ValidationWarning {
  path: string;
  message: string;
  autoFixable: boolean;
}

/**
 * 模板Schema验证器
 * 负责验证模板文件是否符合Schema定义，并提供自动修复功能
 */
export class TemplateValidator {
  private ajv: Ajv;
  private validator: ValidateFunction | null = null;
  private schema: any = null;

  constructor() {
    this.ajv = new Ajv({ 
      allErrors: true, 
      strict: false,
      coerceTypes: true  // 自动类型转换
    });
    addFormats(this.ajv);
  }

  /**
   * 加载Schema定义
   */
  async loadSchema(schemaPath?: string): Promise<void> {
    const defaultSchemaPath = path.join(
      __dirname,
      '../../templates/schemas/template.schema.json'
    );
    
    const finalSchemaPath = schemaPath || defaultSchemaPath;
    
    try {
      const schemaContent = await fs.readFile(finalSchemaPath, 'utf-8');
      this.schema = JSON.parse(schemaContent);
      this.validator = this.ajv.compile(this.schema);
    } catch (error) {
      throw new Error(`Failed to load schema: ${error}`);
    }
  }

  /**
   * 验证模板
   */
  async validate(templateData: any): Promise<ValidationResult> {
    if (!this.validator) {
      await this.loadSchema();
    }

    const result: ValidationResult = {
      valid: false,
      errors: [],
      warnings: []
    };

    // 基本Schema验证
    const valid = this.validator!(templateData);
    
    if (!valid && this.validator!.errors) {
      result.errors = this.convertAjvErrors(this.validator!.errors);
    }

    // 额外的业务规则验证
    const businessErrors = this.validateBusinessRules(templateData);
    result.errors.push(...businessErrors);

    // 检查警告
    result.warnings = this.checkWarnings(templateData);

    result.valid = result.errors.filter(e => e.severity === 'error').length === 0;

    return result;
  }

  /**
   * 验证并尝试自动修复
   */
  async validateAndFix(templateData: any): Promise<ValidationResult> {
    const validationResult = await this.validate(templateData);

    if (!validationResult.valid) {
      // 尝试自动修复
      const fixResult = this.autoFix(templateData, validationResult);
      
      if (fixResult.fixed) {
        // 重新验证修复后的模板
        const revalidationResult = await this.validate(fixResult.template);
        
        return {
          ...revalidationResult,
          fixed: true,
          fixedTemplate: fixResult.template
        };
      }
    }

    return validationResult;
  }

  /**
   * 自动修复模板
   */
  private autoFix(templateData: any, validationResult: ValidationResult): { fixed: boolean; template: any } {
    const template = JSON.parse(JSON.stringify(templateData)); // Deep copy
    let fixed = false;

    // 修复缺失的必需字段
    if (!template.id) {
      template.id = this.generateId(template.name || 'template');
      fixed = true;
    }

    if (!template.name) {
      template.name = template.id || 'Unnamed Template';
      fixed = true;
    }

    if (!template.version) {
      template.version = '1.0.0';
      fixed = true;
    }

    if (!template.targets || !Array.isArray(template.targets)) {
      template.targets = ['gemini'];
      fixed = true;
    }

    // 修复无效的targets
    if (template.targets) {
      const validTargets = ['gemini', 'claude', 'cursor', 'openai'];
      const filteredTargets = template.targets.filter((t: string) => 
        validTargets.includes(t)
      );
      
      if (filteredTargets.length !== template.targets.length) {
        template.targets = filteredTargets.length > 0 ? filteredTargets : ['gemini'];
        fixed = true;
      }
    }

    // 确保variables是对象
    if (!template.variables || typeof template.variables !== 'object') {
      template.variables = {};
      fixed = true;
    }

    // 添加默认的基础变量
    if (!template.variables.projectName) {
      template.variables.projectName = 'my-project';
      fixed = true;
    }

    if (!template.variables.persona) {
      template.variables.persona = '你是一名AI编程助手';
      fixed = true;
    }

    // 修复metadata
    if (!template.metadata) {
      template.metadata = {
        author: 'Unknown',
        createdAt: new Date().toISOString().split('T')[0],
        updatedAt: new Date().toISOString().split('T')[0]
      };
      fixed = true;
    }

    return { fixed, template };
  }

  /**
   * 验证业务规则
   */
  private validateBusinessRules(templateData: any): ValidationError[] {
    const errors: ValidationError[] = [];

    // 检查ID格式
    if (templateData.id && !/^[a-z0-9-]+$/.test(templateData.id)) {
      errors.push({
        path: '/id',
        message: 'ID应只包含小写字母、数字和连字符',
        severity: 'error',
        suggestions: [this.generateId(templateData.id)]
      });
    }

    // 检查版本格式
    if (templateData.version && !/^\d+\.\d+\.\d+$/.test(templateData.version)) {
      errors.push({
        path: '/version',
        message: '版本号应遵循语义化版本格式 (x.y.z)',
        severity: 'error',
        suggestions: ['1.0.0']
      });
    }

    // 检查targets不为空
    if (templateData.targets && templateData.targets.length === 0) {
      errors.push({
        path: '/targets',
        message: 'targets数组不能为空',
        severity: 'error',
        suggestions: [['gemini']]
      });
    }

    // 检查variables中的必需字段
    if (templateData.variables) {
      const requiredVars = ['projectName', 'persona'];
      requiredVars.forEach(varName => {
        if (!templateData.variables[varName]) {
          errors.push({
            path: `/variables/${varName}`,
            message: `缺少推荐的变量: ${varName}`,
            severity: 'warning',
            suggestions: varName === 'projectName' ? ['my-project'] : ['你是一名AI编程助手']
          });
        }
      });
    }

    return errors;
  }

  /**
   * 检查警告
   */
  private checkWarnings(templateData: any): ValidationWarning[] {
    const warnings: ValidationWarning[] = [];

    // 检查描述
    if (!templateData.description) {
      warnings.push({
        path: '/description',
        message: '建议添加模板描述',
        autoFixable: false
      });
    }

    // 检查category
    if (!templateData.category) {
      warnings.push({
        path: '/category',
        message: '建议添加模板分类',
        autoFixable: false
      });
    }

    // 检查tags
    if (!templateData.tags || templateData.tags.length === 0) {
      warnings.push({
        path: '/tags',
        message: '建议添加标签以便搜索',
        autoFixable: false
      });
    }

    // 检查metadata
    if (!templateData.metadata) {
      warnings.push({
        path: '/metadata',
        message: '建议添加元数据信息',
        autoFixable: true
      });
    }

    return warnings;
  }

  /**
   * 转换Ajv错误为标准格式
   */
  private convertAjvErrors(ajvErrors: ErrorObject[]): ValidationError[] {
    return ajvErrors.map(error => ({
      path: error.instancePath || '/',
      message: this.formatErrorMessage(error),
      severity: 'error' as const,
      suggestions: this.getSuggestions(error)
    }));
  }

  /**
   * 格式化错误消息
   */
  private formatErrorMessage(error: ErrorObject): string {
    const fieldName = error.instancePath.split('/').pop() || 'root';
    
    switch (error.keyword) {
      case 'required':
        return `缺少必需字段: ${error.params.missingProperty}`;
      case 'type':
        return `${fieldName} 类型错误，期望 ${error.params.type}`;
      case 'enum':
        return `${fieldName} 值无效，可选值: ${error.params.allowedValues.join(', ')}`;
      case 'minItems':
        return `${fieldName} 数组至少需要 ${error.params.limit} 个元素`;
      default:
        return error.message || '未知错误';
    }
  }

  /**
   * 获取修复建议
   */
  private getSuggestions(error: ErrorObject): string[] {
    const suggestions: string[] = [];

    switch (error.keyword) {
      case 'enum':
        suggestions.push(...error.params.allowedValues);
        break;
      case 'type':
        if (error.params.type === 'array') {
          suggestions.push('[]');
        } else if (error.params.type === 'object') {
          suggestions.push('{}');
        }
        break;
    }

    return suggestions;
  }

  /**
   * 生成有效的ID
   */
  private generateId(name: string): string {
    return name
      .toLowerCase()
      .replace(/[^a-z0-9-]/g, '-')
      .replace(/-+/g, '-')
      .replace(/^-|-$/g, '');
  }

  /**
   * 打印验证结果
   */
  printValidationResult(result: ValidationResult): void {
    if (result.valid) {
      console.log(chalk.green('✅ 模板验证通过'));
      
      if (result.warnings.length > 0) {
        console.log(chalk.yellow(`\n⚠️  ${result.warnings.length} 个警告:`));
        result.warnings.forEach(warning => {
          console.log(chalk.yellow(`  • ${warning.path}: ${warning.message}`));
          if (warning.autoFixable) {
            console.log(chalk.gray(`    (可自动修复)`));
          }
        });
      }
    } else {
      console.log(chalk.red(`❌ 模板验证失败 (${result.errors.length} 个错误)`));
      
      result.errors.forEach(error => {
        const color = error.severity === 'error' ? 'red' : 'yellow';
        console.log(chalk[color](`  • ${error.path}: ${error.message}`));
        
        if (error.suggestions && error.suggestions.length > 0) {
          console.log(chalk.gray(`    建议: ${error.suggestions.join(', ')}`));
        }
      });

      if (result.fixed && result.fixedTemplate) {
        console.log(chalk.green('\n✅ 已自动修复部分错误'));
      }
    }
  }
}
