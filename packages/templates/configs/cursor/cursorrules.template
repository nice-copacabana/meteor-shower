# {{projectName}} - Cursor 规则

<!-- Generated by Qoder AI (Model: claude-sonnet-4-20250514) - 2025-10-14 -->
<!-- Task: Cursor IDE 配置规则模板 -->

## 🤖 AI 角色设定

{{persona}}

## 🛠️ 技术栈

项目使用以下技术栈：

{{#each techStack}}
- {{this}}
{{/each}}

## 📐 代码风格

### 编码规范

**主要风格**: {{codingStyle}}

### 基本原则

1. **清晰性优先**: 代码应该易于理解和维护
2. **一致性**: 遵循项目既定的编码风格
3. **简洁性**: 避免不必要的复杂性
4. **可测试性**: 编写易于测试的代码

### 命名规范

```
- 变量和函数: camelCase
- 类和接口: PascalCase
- 常量: UPPER_SNAKE_CASE
- 私有成员: _privateMethod
- 文件名: kebab-case
```

### TypeScript 特定规范

```typescript
// 优先使用接口而非类型别名
interface User {
  id: string;
  name: string;
}

// 使用明确的类型注解
function processUser(user: User): void {
  // ...
}

// 避免使用 any，使用 unknown 代替
function handleData(data: unknown): void {
  // ...
}
```

## 🧪 测试要求

### 测试覆盖

- 单元测试覆盖率 > 80%
- 核心业务逻辑必须有测试
- 边界条件和错误情况要测试

### 测试命名

```typescript
describe('UserService', () => {
  describe('createUser', () => {
    it('should create user with valid data', () => {
      // ...
    });

    it('should throw error when email is invalid', () => {
      // ...
    });
  });
});
```

## 📝 注释规范

### JSDoc 格式

```typescript
/**
 * 处理用户数据
 * @param userId - 用户唯一标识符
 * @param options - 处理选项
 * @returns 处理结果
 * @throws {ValidationError} 当用户数据无效时
 */
function processUserData(
  userId: string,
  options: ProcessOptions
): ProcessResult {
  // ...
}
```

### 注释原则

- 解释"为什么"而非"是什么"
- 复杂算法添加说明
- TODO 注释包含负责人和日期

## 🔒 安全要求

### 输入验证

```typescript
// 总是验证外部输入
function createUser(data: unknown): User {
  const validated = userSchema.parse(data);
  // ...
}
```

### 敏感数据

```typescript
// 使用环境变量
const apiKey = process.env.API_KEY;

// 不要在代码中硬编码密钥
// ❌ const apiKey = "sk-1234567890";
```

## 🚀 性能优化

### 异步操作

```typescript
// 优先使用 async/await
async function fetchUserData(userId: string): Promise<User> {
  const response = await fetch(`/api/users/${userId}`);
  return response.json();
}

// 并行执行独立操作
const [users, posts] = await Promise.all([
  fetchUsers(),
  fetchPosts(),
]);
```

### 资源管理

```typescript
// 及时释放资源
try {
  const connection = await createConnection();
  // 使用连接
} finally {
  await connection.close();
}
```

## 📦 依赖管理

### 导入顺序

```typescript
// 1. Node.js 内置模块
import fs from 'fs';
import path from 'path';

// 2. 第三方依赖
import express from 'express';
import chalk from 'chalk';

// 3. 项目内部模块
import { UserService } from '@/services/user';
import { logger } from '@/utils/logger';

// 4. 类型导入
import type { User } from '@/types';
```

## 🔧 错误处理

### 错误类型

```typescript
// 定义明确的错误类型
class ValidationError extends Error {
  constructor(message: string) {
    super(message);
    this.name = 'ValidationError';
  }
}

// 使用特定错误类型
if (!isValid(data)) {
  throw new ValidationError('Invalid user data');
}
```

### 错误处理

```typescript
// 在适当的层级处理错误
try {
  await processData();
} catch (error) {
  if (error instanceof ValidationError) {
    // 处理验证错误
  } else {
    // 处理其他错误
    logger.error('Unexpected error', error);
    throw error;
  }
}
```

## 📋 提交规范

### Commit 消息格式

```
<type>(<scope>): <subject>

<body>

<footer>
```

### 类型说明

- `feat`: 新功能
- `fix`: Bug 修复
- `docs`: 文档更新
- `style`: 代码格式（不影响代码运行的变动）
- `refactor`: 重构
- `test`: 测试相关
- `chore`: 构建过程或辅助工具的变动

### 示例

```
feat(auth): add JWT authentication

- Implement JWT token generation
- Add middleware for token verification
- Update user model with token field

Closes #123
```

## 🎯 代码审查清单

在提交代码前检查：

- [ ] 代码符合项目风格指南
- [ ] 添加了必要的测试
- [ ] 所有测试通过
- [ ] 更新了相关文档
- [ ] 没有遗留 console.log 或调试代码
- [ ] 处理了所有 TODO 或添加了 issue
- [ ] 检查了类型安全
- [ ] 验证了错误处理

## 🔗 项目特定配置

### 环境变量

参考 `.env.example` 文件配置必要的环境变量。

### 构建和运行

```bash
# 安装依赖
npm install

# 开发模式
npm run dev

# 运行测试
npm test

# 构建生产版本
npm run build
```

## 💡 最佳实践

### DRY (Don't Repeat Yourself)

避免代码重复，提取公共逻辑到函数或模块。

### SOLID 原则

- **S**ingle Responsibility: 单一职责
- **O**pen/Closed: 开闭原则
- **L**iskov Substitution: 里氏替换
- **I**nterface Segregation: 接口隔离
- **D**ependency Inversion: 依赖倒置

### 函数式编程

```typescript
// 优先使用纯函数
const add = (a: number, b: number): number => a + b;

// 使用不可变数据
const updatedUser = { ...user, name: newName };

// 使用数组方法
const activeUsers = users.filter(user => user.isActive);
```

## 🔍 调试技巧

### 日志级别

```typescript
logger.debug('Detailed info for debugging');
logger.info('General information');
logger.warn('Warning messages');
logger.error('Error messages');
```

### 断点使用

在复杂逻辑处设置断点，逐步调试。

## 📚 参考资源

- 项目文档: [链接]
- API 文档: [链接]
- 团队规范: [链接]
