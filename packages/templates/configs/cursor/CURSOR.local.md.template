# 本地 Cursor 配置覆盖

<!-- Generated by Qoder AI (Model: claude-sonnet-4-20250514) - 2025-10-14 -->
<!-- 此文件用于本地开发环境覆盖 .cursorrules，不应提交到版本控制 -->

## 📝 说明

此文件用于定义仅在本地开发环境生效的 Cursor IDE 配置，会覆盖 `.cursorrules` 中的相应设置。

建议将此文件添加到 `.gitignore` 中：

```
# .gitignore
CURSOR.local.md
.cursor/rules.txt
```

## 🎨 个人编码偏好

### AI 助手行为

```markdown
在我的本地环境中，请：

1. 提供更详细的代码注释
2. 在重构时保持向后兼容
3. 优先考虑代码性能而非简洁性
4. 使用函数式编程风格
5. 在不确定时询问而不是假设
```

### 代码生成偏好

```typescript
// 我偏好的代码风格示例：

// ✅ 显式的类型注解
function processData(input: string): ProcessedData {
  // ...
}

// ✅ 详细的错误处理
try {
  const result = await fetchData();
  return result;
} catch (error) {
  if (error instanceof NetworkError) {
    logger.error('Network error:', error);
    throw new UserFacingError('无法连接到服务器');
  }
  throw error;
}

// ✅ 不可变的数据操作
const updatedState = {
  ...state,
  user: {
    ...state.user,
    name: newName,
  },
};
```

## 🔧 开发环境配置

### 编辑器设置

```json
{
  "editor.formatOnSave": true,
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": true,
    "source.organizeImports": true
  },
  "editor.tabSize": 2,
  "editor.insertSpaces": true,
  "files.trimTrailingWhitespace": true,
  "files.insertFinalNewline": true
}
```

### 快捷键偏好

- 格式化代码: `Shift+Alt+F`
- 组织导入: `Shift+Alt+O`
- 重构: `Ctrl+Shift+R`
- 查找引用: `Shift+F12`

## 🧪 测试偏好

### 测试风格

```typescript
// 我偏好的测试结构
describe('UserService', () => {
  // 使用 beforeEach 设置测试环境
  beforeEach(async () => {
    await setupTestDatabase();
  });

  // 清晰的测试描述
  it('should create a new user with valid email', async () => {
    // Arrange - 准备测试数据
    const userData = {
      email: 'test@example.com',
      name: 'Test User',
    };

    // Act - 执行被测试的操作
    const user = await userService.create(userData);

    // Assert - 验证结果
    expect(user.id).toBeDefined();
    expect(user.email).toBe(userData.email);
    expect(user.name).toBe(userData.name);
  });

  // 清理测试环境
  afterEach(async () => {
    await cleanupTestDatabase();
  });
});
```

### 测试覆盖目标

- 单元测试: > 90%
- 集成测试: > 70%
- E2E 测试: 关键路径覆盖

## 🐛 调试配置

### 日志偏好

```typescript
// 开发环境使用详细日志
logger.setLevel('debug');

// 记录关键操作
logger.debug('Fetching user data', { userId });
logger.info('User created successfully', { user });
logger.warn('Rate limit approaching', { remaining });
logger.error('Failed to process payment', { error, orderId });
```

### 断点策略

1. 在函数入口设置断点验证参数
2. 在错误处理逻辑设置条件断点
3. 在复杂计算前后设置断点对比状态

## 📦 依赖管理偏好

### 版本策略

```json
{
  "dependencies": {
    // 固定主版本
    "express": "^4.18.0",
    // 锁定确切版本（关键依赖）
    "react": "18.2.0"
  }
}
```

### 审查清单

新增依赖前检查：
- [ ] 是否有更轻量的替代方案？
- [ ] 最近一次更新是否在 6 个月内？
- [ ] GitHub stars > 1000？
- [ ] 是否有安全漏洞？
- [ ] 是否支持 TypeScript？

## 🎯 代码审查偏好

### 自审清单

提交前自己检查：
- [ ] 代码格式化
- [ ] 类型检查通过
- [ ] 所有测试通过
- [ ] 移除调试代码
- [ ] 更新相关文档
- [ ] 添加必要的注释
- [ ] 检查性能影响

### 审查他人代码时关注

1. 逻辑正确性
2. 边界条件处理
3. 错误处理完整性
4. 测试覆盖
5. 性能影响
6. 安全问题

## 💡 个人快捷工作流

### Git 工作流

```bash
# 开始新功能
git checkout -b feature/my-feature

# 提交变更
git add .
git commit -m "feat: add new feature"

# 推送前先拉取
git pull --rebase origin main
git push origin feature/my-feature
```

### 常用命令别名

```bash
# 在 .bashrc 或 .zshrc 中添加
alias gs='git status'
alias gc='git commit'
alias gp='git push'
alias gl='git log --oneline --graph'
alias nt='npm test'
alias nr='npm run'
```

## 🔗 个人资源链接

- 技术笔记: [链接]
- 学习资源: [链接]
- 代码片段: [链接]
- 常见问题: [链接]

## 📝 项目特定笔记

记录在此项目中学到的经验和遇到的问题：

### 常见陷阱

1. 

### 最佳实践

1. 

### 待办事项

- [ ] 
- [ ] 

## 🚀 性能优化笔记

记录性能优化的想法和实验：

### 已优化

1. 

### 待优化

1. 

## 🔍 调试技巧记录

记录在此项目中有用的调试技巧：

1. 

## 📚 学习记录

在此项目中学习到的新知识：

### 新技术

1. 

### 新模式

1. 

### 有用的库

1. 
