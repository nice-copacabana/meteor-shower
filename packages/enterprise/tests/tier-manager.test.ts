// Generated by Qoder AI (Model: claude-sonnet-4-20250514) - 2025-10-14
// Task: M6 Phase1 - 为UserTierManager补充完整单元测试

import { describe, it, expect, beforeEach, afterEach } from 'vitest';
import Database from 'better-sqlite3';
import { UserTierManager } from '../src/tier/tier-manager.js';
import { DatabaseSchema, UserTier, UserRole, DEFAULT_QUOTAS } from '../src/database/schema.js';
import { v4 as uuidv4 } from 'uuid';

describe('UserTierManager', () => {
  let db: Database.Database;
  let schema: DatabaseSchema;
  let tierManager: UserTierManager;

  beforeEach(() => {
    // 使用内存数据库进行测试
    db = new Database(':memory:');
    schema = new DatabaseSchema(db);
    schema.initializeTables();
    tierManager = new UserTierManager(db);
    
    // 创建所有资源表
    db.exec(`
      CREATE TABLE IF NOT EXISTS templates (
        id TEXT PRIMARY KEY,
        user_id TEXT NOT NULL,
        name TEXT NOT NULL,
        created_at INTEGER NOT NULL
      )
    `);
    
    db.exec(`
      CREATE TABLE IF NOT EXISTS configs (
        id TEXT PRIMARY KEY,
        user_id TEXT NOT NULL,
        name TEXT NOT NULL,
        created_at INTEGER NOT NULL
      )
    `);
    
    db.exec(`
      CREATE TABLE IF NOT EXISTS shares (
        id TEXT PRIMARY KEY,
        user_id TEXT NOT NULL,
        name TEXT NOT NULL,
        created_at INTEGER NOT NULL
      )
    `);
  });

  afterEach(() => {
    db.close();
  });

  /**
   * 创建测试用户
   */
  function createTestUser(tier: UserTier = UserTier.FREE): string {
    const userId = uuidv4();
    const quotas = DEFAULT_QUOTAS[tier];
    
    db.prepare(`
      INSERT INTO users (
        id, email, username, password_hash, tier, role,
        quota_templates, quota_configs, quota_shares,
        created_at, updated_at, is_active, metadata
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    `).run(
      userId,
      `test-${userId}@example.com`,
      `testuser-${userId}`,
      'hashed_password',
      tier,
      UserRole.USER,
      quotas.templates,
      quotas.configs,
      quotas.shares,
      Date.now(),
      Date.now(),
      1,
      '{}'
    );

    return userId;
  }

  /**
   * 创建模板（模拟资源使用）
   */
  function createTemplate(userId: string, count: number = 1): void {
    for (let i = 0; i < count; i++) {
      db.prepare(`
        INSERT INTO templates (id, user_id, name, created_at)
        VALUES (?, ?, ?, ?)
      `).run(uuidv4(), userId, `template-${i}`, Date.now());
    }
  }

  /**
   * 创建配置（模拟资源使用）
   */
  function createConfig(userId: string, count: number = 1): void {
    for (let i = 0; i < count; i++) {
      db.prepare(`
        INSERT INTO configs (id, user_id, name, created_at)
        VALUES (?, ?, ?, ?)
      `).run(uuidv4(), userId, `config-${i}`, Date.now());
    }
  }

  /**
   * 创建分享（模拟资源使用）
   */
  function createShare(userId: string, count: number = 1): void {
    for (let i = 0; i < count; i++) {
      db.prepare(`
        INSERT INTO shares (id, user_id, name, created_at)
        VALUES (?, ?, ?, ?)
      `).run(uuidv4(), userId, `share-${i}`, Date.now());
    }
  }

  describe('checkTemplateQuota', () => {
    it('应该允许创建模板，当配额未用完时', () => {
      const userId = createTestUser(UserTier.FREE);
      createTemplate(userId, 2); // FREE层级限制5个

      const result = tierManager.checkTemplateQuota(userId);

      expect(result.allowed).toBe(true);
      expect(result.current).toBe(2);
      expect(result.limit).toBe(5);
      expect(result.remaining).toBe(3);
    });

    it('应该拒绝创建模板，当配额已满时', () => {
      const userId = createTestUser(UserTier.FREE);
      createTemplate(userId, 5); // 达到限制

      const result = tierManager.checkTemplateQuota(userId);

      expect(result.allowed).toBe(false);
      expect(result.reason).toContain('quota exceeded');
      expect(result.current).toBe(5);
      expect(result.limit).toBe(5);
      expect(result.remaining).toBe(0);
    });

    it('应该允许无限创建，对于Enterprise层级', () => {
      const userId = createTestUser(UserTier.ENTERPRISE);
      createTemplate(userId, 100);

      const result = tierManager.checkTemplateQuota(userId);

      expect(result.allowed).toBe(true);
      expect(result.limit).toBe(-1);
      expect(result.remaining).toBe(-1);
    });

    it('应该返回错误，当用户不存在时', () => {
      const result = tierManager.checkTemplateQuota('non-existent-user');

      expect(result.allowed).toBe(false);
      expect(result.reason).toBe('User not found');
    });
  });

  describe('checkConfigQuota', () => {
    it('应该允许创建配置，当配额未用完时', () => {
      const userId = createTestUser(UserTier.PROFESSIONAL);
      createConfig(userId, 50); // PROFESSIONAL层级限制100个

      const result = tierManager.checkConfigQuota(userId);

      expect(result.allowed).toBe(true);
      expect(result.current).toBe(50);
      expect(result.limit).toBe(100);
      expect(result.remaining).toBe(50);
    });

    it('应该拒绝创建配置，当配额已满时', () => {
      const userId = createTestUser(UserTier.FREE);
      createConfig(userId, 10); // FREE层级限制10个

      const result = tierManager.checkConfigQuota(userId);

      expect(result.allowed).toBe(false);
      expect(result.reason).toContain('quota exceeded');
    });

    it('应该允许无限创建，对于Enterprise层级', () => {
      const userId = createTestUser(UserTier.ENTERPRISE);
      createConfig(userId, 1000);

      const result = tierManager.checkConfigQuota(userId);

      expect(result.allowed).toBe(true);
      expect(result.limit).toBe(-1);
    });
  });

  describe('checkShareQuota', () => {
    it('应该允许分享，当本月配额未用完时', () => {
      const userId = createTestUser(UserTier.FREE);
      createShare(userId, 2); // FREE层级限制3个/月

      const result = tierManager.checkShareQuota(userId);

      expect(result.allowed).toBe(true);
      expect(result.current).toBe(2);
      expect(result.limit).toBe(3);
      expect(result.remaining).toBe(1);
    });

    it('应该拒绝分享，当本月配额已满时', () => {
      const userId = createTestUser(UserTier.FREE);
      createShare(userId, 3);

      const result = tierManager.checkShareQuota(userId);

      expect(result.allowed).toBe(false);
      expect(result.reason).toContain('this month');
    });

    it('应该允许无限分享，对于Enterprise层级', () => {
      const userId = createTestUser(UserTier.ENTERPRISE);
      createShare(userId, 100);

      const result = tierManager.checkShareQuota(userId);

      expect(result.allowed).toBe(true);
      expect(result.limit).toBe(-1);
    });
  });

  describe('getUserQuotas', () => {
    it('应该返回完整的配额信息', () => {
      const userId = createTestUser(UserTier.TEAM);
      createTemplate(userId, 10);
      createConfig(userId, 50);
      createShare(userId, 5);

      const quotas = tierManager.getUserQuotas(userId);

      expect(quotas).not.toBeNull();
      expect(quotas!.tier).toBe(UserTier.TEAM);
      expect(quotas!.templates.current).toBe(10);
      expect(quotas!.configs.current).toBe(50);
      expect(quotas!.shares.current).toBe(5);
    });

    it('应该返回null，当用户不存在时', () => {
      const quotas = tierManager.getUserQuotas('non-existent');
      expect(quotas).toBeNull();
    });
  });

  describe('getUpgradeSuggestion', () => {
    it('应该建议升级，当配额接近用完时', () => {
      const userId = createTestUser(UserTier.FREE);
      createTemplate(userId, 4); // 5个中用了4个

      const suggestion = tierManager.getUpgradeSuggestion(userId);

      expect(suggestion.shouldUpgrade).toBe(true);
      expect(suggestion.currentTier).toBe(UserTier.FREE);
      expect(suggestion.suggestedTier).toBe(UserTier.PROFESSIONAL);
      expect(suggestion.reasons.length).toBeGreaterThan(0);
    });

    it('应该不建议升级，当配额充足时', () => {
      const userId = createTestUser(UserTier.PROFESSIONAL);
      createTemplate(userId, 10); // 50个中用了10个

      const suggestion = tierManager.getUpgradeSuggestion(userId);

      expect(suggestion.shouldUpgrade).toBe(false);
      expect(suggestion.currentTier).toBe(UserTier.PROFESSIONAL);
    });

    it('应该不建议升级，对于Enterprise层级', () => {
      const userId = createTestUser(UserTier.ENTERPRISE);
      createTemplate(userId, 1000);

      const suggestion = tierManager.getUpgradeSuggestion(userId);

      expect(suggestion.shouldUpgrade).toBe(false);
      expect(suggestion.suggestedTier).toBeUndefined();
    });
  });

  describe('getTierComparison', () => {
    it('应该返回所有层级的对比信息', () => {
      const comparison = tierManager.getTierComparison();

      expect(comparison).toHaveProperty(UserTier.FREE);
      expect(comparison).toHaveProperty(UserTier.PROFESSIONAL);
      expect(comparison).toHaveProperty(UserTier.TEAM);
      expect(comparison).toHaveProperty(UserTier.ENTERPRISE);

      // 验证FREE层级
      expect(comparison[UserTier.FREE].quotas.templates).toBe(5);
      expect(comparison[UserTier.FREE].features.length).toBeGreaterThan(0);

      // 验证Enterprise层级
      expect(comparison[UserTier.ENTERPRISE].quotas.templates).toBe(-1);
      expect(comparison[UserTier.ENTERPRISE].features.length).toBeGreaterThan(
        comparison[UserTier.FREE].features.length
      );
    });
  });

  describe('validatePermission', () => {
    it('应该允许操作，当配额充足时', async () => {
      const userId = createTestUser(UserTier.PROFESSIONAL);

      const result = await tierManager.validatePermission(userId, 'create_template');

      expect(result.allowed).toBe(true);
      expect(result.reason).toBeUndefined();
    });

    it('应该拒绝操作，当配额已满时', async () => {
      const userId = createTestUser(UserTier.FREE);
      createTemplate(userId, 5);

      const result = await tierManager.validatePermission(userId, 'create_template');

      expect(result.allowed).toBe(false);
      expect(result.reason).toBeDefined();
    });

    it('应该拒绝操作，当账户未激活时', async () => {
      const userId = createTestUser(UserTier.PROFESSIONAL);
      
      // 禁用账户
      db.prepare('UPDATE users SET is_active = 0 WHERE id = ?').run(userId);

      const result = await tierManager.validatePermission(userId, 'create_template');

      expect(result.allowed).toBe(false);
      expect(result.reason).toBe('Account is inactive');
    });

    it('应该拒绝创建组织，对于FREE层级', async () => {
      const userId = createTestUser(UserTier.FREE);

      const result = await tierManager.validatePermission(userId, 'create_organization');

      expect(result.allowed).toBe(false);
      expect(result.reason).toContain('Team or Enterprise tier');
    });

    it('应该允许创建组织，对于TEAM层级', async () => {
      const userId = createTestUser(UserTier.TEAM);

      const result = await tierManager.validatePermission(userId, 'create_organization');

      expect(result.allowed).toBe(true);
    });

    it('应该允许创建组织，对于ENTERPRISE层级', async () => {
      const userId = createTestUser(UserTier.ENTERPRISE);

      const result = await tierManager.validatePermission(userId, 'create_organization');

      expect(result.allowed).toBe(true);
    });

    it('应该返回错误，当用户不存在时', async () => {
      const result = await tierManager.validatePermission('non-existent', 'create_template');

      expect(result.allowed).toBe(false);
      expect(result.reason).toBe('User not found');
    });
  });

  describe('边界情况测试', () => {
    it('应该正确处理刚好达到限制的情况', () => {
      const userId = createTestUser(UserTier.FREE);
      createTemplate(userId, 4); // 差1个达到限制

      const result1 = tierManager.checkTemplateQuota(userId);
      expect(result1.allowed).toBe(true);
      expect(result1.remaining).toBe(1);

      // 再创建1个
      createTemplate(userId, 1);

      const result2 = tierManager.checkTemplateQuota(userId);
      expect(result2.allowed).toBe(false);
      expect(result2.remaining).toBe(0);
    });

    it('应该正确处理0使用量的情况', () => {
      const userId = createTestUser(UserTier.PROFESSIONAL);

      const result = tierManager.checkTemplateQuota(userId);

      expect(result.allowed).toBe(true);
      expect(result.current).toBe(0);
      expect(result.remaining).toBe(50);
    });

    it('应该正确处理层级升级后的配额变化', () => {
      const userId = createTestUser(UserTier.FREE);
      createTemplate(userId, 4);

      // 升级到Professional
      const newQuotas = DEFAULT_QUOTAS[UserTier.PROFESSIONAL];
      db.prepare(`
        UPDATE users SET 
          tier = ?,
          quota_templates = ?,
          quota_configs = ?,
          quota_shares = ?
        WHERE id = ?
      `).run(
        UserTier.PROFESSIONAL,
        newQuotas.templates,
        newQuotas.configs,
        newQuotas.shares,
        userId
      );

      const result = tierManager.checkTemplateQuota(userId);

      expect(result.allowed).toBe(true);
      expect(result.limit).toBe(50);
      expect(result.remaining).toBe(46);
    });
  });

  describe('集成测试', () => {
    it('应该正确处理完整的用户生命周期', async () => {
      // 1. 创建免费用户
      const userId = createTestUser(UserTier.FREE);

      // 2. 检查初始配额
      let quotas = tierManager.getUserQuotas(userId);
      expect(quotas!.tier).toBe(UserTier.FREE);

      // 3. 创建一些资源
      createTemplate(userId, 3);
      createConfig(userId, 5);

      // 4. 检查使用情况
      quotas = tierManager.getUserQuotas(userId);
      expect(quotas!.templates.current).toBe(3);
      expect(quotas!.configs.current).toBe(5);

      // 5. 获取升级建议
      createTemplate(userId, 1); // 再创建1个，达到4个
      let suggestion = tierManager.getUpgradeSuggestion(userId);
      expect(suggestion.shouldUpgrade).toBe(true);

      // 6. 升级到Professional
      const newQuotas = DEFAULT_QUOTAS[UserTier.PROFESSIONAL];
      db.prepare(`
        UPDATE users SET tier = ?, quota_templates = ?, quota_configs = ?, quota_shares = ?
        WHERE id = ?
      `).run(
        UserTier.PROFESSIONAL,
        newQuotas.templates,
        newQuotas.configs,
        newQuotas.shares,
        userId
      );

      // 7. 验证升级后的配额
      quotas = tierManager.getUserQuotas(userId);
      expect(quotas!.tier).toBe(UserTier.PROFESSIONAL);
      expect(quotas!.templates.limit).toBe(50);

      // 8. 升级后不再建议升级
      suggestion = tierManager.getUpgradeSuggestion(userId);
      expect(suggestion.shouldUpgrade).toBe(false);
    });
  });
});
