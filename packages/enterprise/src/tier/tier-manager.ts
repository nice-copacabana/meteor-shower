// Generated by Qoder AI (Model: claude-sonnet-4-20250514) - 2025-10-14
// Task: M6 Phase1 - 集成用户层级检查到CLI命令中

import { Database } from 'better-sqlite3';
import { User, UserTier, DEFAULT_QUOTAS } from '../database/schema.js';

/**
 * 配额检查结果
 */
export interface QuotaCheckResult {
  allowed: boolean;
  reason?: string;
  current: number;
  limit: number;
  remaining: number;
}

/**
 * 用户层级管理器
 * 负责检查和管理用户配额限制
 */
export class UserTierManager {
  private db: Database;

  constructor(db: Database) {
    this.db = db;
  }

  /**
   * 检查模板创建权限
   * @param userId 用户ID
   * @returns 配额检查结果
   */
  checkTemplateQuota(userId: string): QuotaCheckResult {
    const user = this.getUserById(userId);
    if (!user) {
      return {
        allowed: false,
        reason: 'User not found',
        current: 0,
        limit: 0,
        remaining: 0
      };
    }

    // 查询当前使用情况
    const result = this.db.prepare(
      'SELECT COUNT(*) as count FROM templates WHERE user_id = ?'
    ).get(userId) as { count: number } | undefined;

    const current = result?.count || 0;
    const limit = user.quota_templates;

    // -1 表示无限制
    if (limit === -1) {
      return {
        allowed: true,
        current,
        limit: -1,
        remaining: -1
      };
    }

    const allowed = current < limit;
    return {
      allowed,
      reason: allowed ? undefined : `Template quota exceeded (${current}/${limit})`,
      current,
      limit,
      remaining: Math.max(0, limit - current)
    };
  }

  /**
   * 检查配置创建权限
   * @param userId 用户ID
   * @returns 配额检查结果
   */
  checkConfigQuota(userId: string): QuotaCheckResult {
    const user = this.getUserById(userId);
    if (!user) {
      return {
        allowed: false,
        reason: 'User not found',
        current: 0,
        limit: 0,
        remaining: 0
      };
    }

    // 查询当前使用情况
    const result = this.db.prepare(
      'SELECT COUNT(*) as count FROM configs WHERE user_id = ?'
    ).get(userId) as { count: number } | undefined;

    const current = result?.count || 0;
    const limit = user.quota_configs;

    if (limit === -1) {
      return {
        allowed: true,
        current,
        limit: -1,
        remaining: -1
      };
    }

    const allowed = current < limit;
    return {
      allowed,
      reason: allowed ? undefined : `Config quota exceeded (${current}/${limit})`,
      current,
      limit,
      remaining: Math.max(0, limit - current)
    };
  }

  /**
   * 检查分享权限
   * @param userId 用户ID
   * @returns 配额检查结果
   */
  checkShareQuota(userId: string): QuotaCheckResult {
    const user = this.getUserById(userId);
    if (!user) {
      return {
        allowed: false,
        reason: 'User not found',
        current: 0,
        limit: 0,
        remaining: 0
      };
    }

    // 查询本月分享次数
    const monthStart = new Date();
    monthStart.setDate(1);
    monthStart.setHours(0, 0, 0, 0);

    const result = this.db.prepare(`
      SELECT COUNT(*) as count FROM shares 
      WHERE user_id = ? AND created_at >= ?
    `).get(userId, monthStart.getTime()) as { count: number } | undefined;

    const current = result?.count || 0;
    const limit = user.quota_shares;

    if (limit === -1) {
      return {
        allowed: true,
        current,
        limit: -1,
        remaining: -1
      };
    }

    const allowed = current < limit;
    return {
      allowed,
      reason: allowed ? undefined : `Share quota exceeded (${current}/${limit} this month)`,
      current,
      limit,
      remaining: Math.max(0, limit - current)
    };
  }

  /**
   * 获取用户完整配额信息
   * @param userId 用户ID
   */
  getUserQuotas(userId: string): {
    tier: UserTier;
    templates: QuotaCheckResult;
    configs: QuotaCheckResult;
    shares: QuotaCheckResult;
  } | null {
    const user = this.getUserById(userId);
    if (!user) {
      return null;
    }

    return {
      tier: user.tier as UserTier,
      templates: this.checkTemplateQuota(userId),
      configs: this.checkConfigQuota(userId),
      shares: this.checkShareQuota(userId)
    };
  }

  /**
   * 增加配额使用计数（内部使用）
   * @param userId 用户ID
   * @param type 配额类型
   */
  async incrementQuotaUsage(userId: string, type: 'template' | 'config' | 'share'): Promise<void> {
    // 这个方法在创建资源时调用，确保配额统计准确
    // 实际使用中，资源表需要有 user_id 字段用于统计
  }

  /**
   * 获取用户层级升级建议
   */
  getUpgradeSuggestion(userId: string): {
    shouldUpgrade: boolean;
    currentTier: UserTier;
    suggestedTier?: UserTier;
    reasons: string[];
  } {
    const user = this.getUserById(userId);
    if (!user) {
      return {
        shouldUpgrade: false,
        currentTier: UserTier.FREE,
        reasons: ['User not found']
      };
    }

    const quotas = this.getUserQuotas(userId);
    if (!quotas) {
      return {
        shouldUpgrade: false,
        currentTier: UserTier.FREE,
        reasons: ['Cannot retrieve quotas']
      };
    }

    const reasons: string[] = [];
    let shouldUpgrade = false;

    // 检查是否接近配额限制
    if (quotas.templates.limit !== -1 && quotas.templates.remaining < 2) {
      reasons.push(`Template quota almost full (${quotas.templates.current}/${quotas.templates.limit})`);
      shouldUpgrade = true;
    }

    if (quotas.configs.limit !== -1 && quotas.configs.remaining < 5) {
      reasons.push(`Config quota almost full (${quotas.configs.current}/${quotas.configs.limit})`);
      shouldUpgrade = true;
    }

    if (quotas.shares.limit !== -1 && quotas.shares.remaining < 1) {
      reasons.push(`Share quota almost full (${quotas.shares.current}/${quotas.shares.limit})`);
      shouldUpgrade = true;
    }

    // 建议下一个层级
    let suggestedTier: UserTier | undefined;
    if (shouldUpgrade) {
      const tierOrder = [UserTier.FREE, UserTier.PROFESSIONAL, UserTier.TEAM, UserTier.ENTERPRISE];
      const currentIndex = tierOrder.indexOf(user.tier as UserTier);
      if (currentIndex < tierOrder.length - 1) {
        suggestedTier = tierOrder[currentIndex + 1];
      }
    }

    return {
      shouldUpgrade,
      currentTier: user.tier as UserTier,
      suggestedTier,
      reasons
    };
  }

  /**
   * 获取层级功能对比
   */
  getTierComparison(): Record<UserTier, {
    name: string;
    description: string;
    quotas: {
      templates: number;
      configs: number;
      shares: number;
      max_members: number;
    };
    features: string[];
  }> {
    return {
      [UserTier.FREE]: {
        name: 'Free',
        description: '适合个人开发者试用',
        quotas: DEFAULT_QUOTAS[UserTier.FREE],
        features: [
          '基础配置管理',
          '本地配置同步',
          '社区模板访问'
        ]
      },
      [UserTier.PROFESSIONAL]: {
        name: 'Professional',
        description: '适合专业开发者',
        quotas: DEFAULT_QUOTAS[UserTier.PROFESSIONAL],
        features: [
          'Free 层所有功能',
          '云端配置备份',
          '私有模板存储',
          '优先技术支持'
        ]
      },
      [UserTier.TEAM]: {
        name: 'Team',
        description: '适合开发团队',
        quotas: DEFAULT_QUOTAS[UserTier.TEAM],
        features: [
          'Professional 层所有功能',
          '团队协作功能',
          '配置审批流程',
          '团队模板共享',
          '审计日志'
        ]
      },
      [UserTier.ENTERPRISE]: {
        name: 'Enterprise',
        description: '适合大型企业',
        quotas: DEFAULT_QUOTAS[UserTier.ENTERPRISE],
        features: [
          'Team 层所有功能',
          '无限配额',
          '私有部署支持',
          'SSO 单点登录',
          'RBAC 权限管理',
          '专属客户成功经理'
        ]
      }
    };
  }

  /**
   * 获取用户信息（私有辅助方法）
   */
  private getUserById(userId: string): User | undefined {
    return this.db.prepare(`
      SELECT * FROM users WHERE id = ?
    `).get(userId) as User | undefined;
  }

  /**
   * 验证用户是否有权限执行操作
   * @param userId 用户ID
   * @param operation 操作类型
   */
  async validatePermission(
    userId: string,
    operation: 'create_template' | 'create_config' | 'share' | 'create_organization'
  ): Promise<{ allowed: boolean; reason?: string }> {
    const user = this.getUserById(userId);
    if (!user) {
      return { allowed: false, reason: 'User not found' };
    }

    if (!user.is_active) {
      return { allowed: false, reason: 'Account is inactive' };
    }

    // 根据操作类型检查配额
    switch (operation) {
      case 'create_template': {
        const quota = this.checkTemplateQuota(userId);
        return { allowed: quota.allowed, reason: quota.reason };
      }
      case 'create_config': {
        const quota = this.checkConfigQuota(userId);
        return { allowed: quota.allowed, reason: quota.reason };
      }
      case 'share': {
        const quota = this.checkShareQuota(userId);
        return { allowed: quota.allowed, reason: quota.reason };
      }
      case 'create_organization': {
        // 只有 Team 及以上层级才能创建组织
        if (user.tier === UserTier.FREE || user.tier === UserTier.PROFESSIONAL) {
          return {
            allowed: false,
            reason: 'Organization creation requires Team or Enterprise tier'
          };
        }
        return { allowed: true };
      }
      default:
        return { allowed: false, reason: 'Unknown operation' };
    }
  }
}
