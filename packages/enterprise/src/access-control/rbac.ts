// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-15
// Task: M6 Phase2 - 实现基于角色的访问控制（RBAC）权限矩阵

import { Database } from 'better-sqlite3';
import { UserRole } from '../database/schema.js';

/**
 * 权限操作类型
 */
export enum Permission {
  // 资源查看权限
  VIEW_TEMPLATE = 'view_template',
  VIEW_CONFIG = 'view_config',
  VIEW_USER = 'view_user',
  VIEW_ORGANIZATION = 'view_organization',
  VIEW_AUDIT_LOG = 'view_audit_log',

  // 资源创建权限
  CREATE_TEMPLATE = 'create_template',
  CREATE_CONFIG = 'create_config',
  CREATE_USER = 'create_user',
  CREATE_TEAM = 'create_team',
  CREATE_DEPARTMENT = 'create_department',

  // 资源编辑权限
  EDIT_TEMPLATE = 'edit_template',
  EDIT_CONFIG = 'edit_config',
  EDIT_USER = 'edit_user',
  EDIT_ORGANIZATION = 'edit_organization',

  // 资源删除权限
  DELETE_TEMPLATE = 'delete_template',
  DELETE_CONFIG = 'delete_config',
  DELETE_USER = 'delete_user',
  DELETE_TEAM = 'delete_team',

  // 分享权限
  SHARE_TEMPLATE = 'share_template',
  SHARE_CONFIG = 'share_config',

  // 管理权限
  MANAGE_USERS = 'manage_users',
  MANAGE_ROLES = 'manage_roles',
  MANAGE_PERMISSIONS = 'manage_permissions',
  MANAGE_ORGANIZATION = 'manage_organization',
  MANAGE_BILLING = 'manage_billing',

  // 系统权限
  SYSTEM_ADMIN = 'system_admin',
  VIEW_SYSTEM_METRICS = 'view_system_metrics',
  CONFIGURE_SYSTEM = 'configure_system'
}

/**
 * 权限检查结果
 */
export interface PermissionCheckResult {
  granted: boolean;
  reason?: string;
  requiredRole?: UserRole;
}

/**
 * 角色权限映射
 */
const ROLE_PERMISSIONS: Record<UserRole, Permission[]> = {
  [UserRole.USER]: [
    // 基础用户权限：只能查看和操作自己的资源
    Permission.VIEW_TEMPLATE,
    Permission.VIEW_CONFIG,
    Permission.CREATE_TEMPLATE,
    Permission.CREATE_CONFIG,
    Permission.EDIT_TEMPLATE,
    Permission.EDIT_CONFIG,
    Permission.DELETE_TEMPLATE,
    Permission.DELETE_CONFIG,
    Permission.SHARE_TEMPLATE,
    Permission.SHARE_CONFIG
  ],

  [UserRole.ADMIN]: [
    // 管理员权限：继承USER所有权限 + 团队管理
    ...ROLE_PERMISSIONS[UserRole.USER],
    Permission.VIEW_USER,
    Permission.VIEW_ORGANIZATION,
    Permission.VIEW_AUDIT_LOG,
    Permission.CREATE_USER,
    Permission.CREATE_TEAM,
    Permission.CREATE_DEPARTMENT,
    Permission.EDIT_USER,
    Permission.EDIT_ORGANIZATION,
    Permission.DELETE_USER,
    Permission.DELETE_TEAM,
    Permission.MANAGE_USERS,
    Permission.MANAGE_ROLES
  ],

  [UserRole.OWNER]: [
    // 所有者权限：继承ADMIN所有权限 + 组织级管理
    ...ROLE_PERMISSIONS[UserRole.ADMIN],
    Permission.MANAGE_PERMISSIONS,
    Permission.MANAGE_ORGANIZATION,
    Permission.MANAGE_BILLING,
    Permission.SYSTEM_ADMIN,
    Permission.VIEW_SYSTEM_METRICS,
    Permission.CONFIGURE_SYSTEM
  ]
};

/**
 * 自定义角色定义
 */
export interface CustomRole {
  id: string;
  name: string;
  description: string;
  permissions: Permission[];
  organization_id: string;
  created_by: string;
  created_at: number;
  updated_at: number;
}

/**
 * 用户角色分配
 */
export interface UserRoleAssignment {
  user_id: string;
  role_id: string;
  scope_type: 'global' | 'organization' | 'team' | 'department';
  scope_id?: string;
  assigned_by: string;
  assigned_at: number;
  expires_at?: number;
}

/**
 * RBAC管理器
 */
export class RBACManager {
  private db: Database;

  constructor(db: Database) {
    this.db = db;
    this.initializeTables();
  }

  /**
   * 初始化RBAC表
   */
  private initializeTables(): void {
    // 自定义角色表
    this.db.exec(`
      CREATE TABLE IF NOT EXISTS custom_roles (
        id TEXT PRIMARY KEY,
        name TEXT NOT NULL,
        description TEXT,
        permissions TEXT NOT NULL,
        organization_id TEXT NOT NULL,
        created_by TEXT NOT NULL,
        created_at INTEGER NOT NULL,
        updated_at INTEGER NOT NULL,
        FOREIGN KEY (organization_id) REFERENCES organizations(id) ON DELETE CASCADE,
        FOREIGN KEY (created_by) REFERENCES users(id) ON DELETE SET NULL
      )
    `);

    // 角色分配表
    this.db.exec(`
      CREATE TABLE IF NOT EXISTS user_role_assignments (
        user_id TEXT NOT NULL,
        role_id TEXT NOT NULL,
        scope_type TEXT NOT NULL,
        scope_id TEXT,
        assigned_by TEXT NOT NULL,
        assigned_at INTEGER NOT NULL,
        expires_at INTEGER,
        PRIMARY KEY (user_id, role_id, scope_type, scope_id),
        FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
        FOREIGN KEY (assigned_by) REFERENCES users(id) ON DELETE SET NULL,
        CHECK (scope_type IN ('global', 'organization', 'team', 'department'))
      )
    `);

    // 创建索引
    this.db.exec(`
      CREATE INDEX IF NOT EXISTS idx_custom_roles_org ON custom_roles(organization_id);
      CREATE INDEX IF NOT EXISTS idx_role_assignments_user ON user_role_assignments(user_id);
      CREATE INDEX IF NOT EXISTS idx_role_assignments_scope ON user_role_assignments(scope_type, scope_id);
    `);
  }

  /**
   * 检查用户是否拥有权限
   */
  hasPermission(userId: string, permission: Permission, context?: {
    organizationId?: string;
    teamId?: string;
    departmentId?: string;
  }): PermissionCheckResult {
    // 获取用户基础角色
    const user = this.db.prepare(`
      SELECT role, organization_id FROM users WHERE id = ?
    `).get(userId) as { role: UserRole; organization_id?: string } | undefined;

    if (!user) {
      return {
        granted: false,
        reason: 'User not found'
      };
    }

    // 检查基础角色权限
    const basePermissions = ROLE_PERMISSIONS[user.role] || [];
    if (basePermissions.includes(permission)) {
      return { granted: true };
    }

    // 检查自定义角色权限
    const customPermissions = this.getCustomPermissions(userId, context);
    if (customPermissions.includes(permission)) {
      return { granted: true };
    }

    // 权限被拒绝
    return {
      granted: false,
      reason: `Permission ${permission} not granted for role ${user.role}`,
      requiredRole: this.getRequiredRole(permission)
    };
  }

  /**
   * 获取用户的自定义权限
   */
  private getCustomPermissions(userId: string, context?: {
    organizationId?: string;
    teamId?: string;
    departmentId?: string;
  }): Permission[] {
    let query = `
      SELECT cr.permissions
      FROM user_role_assignments ura
      JOIN custom_roles cr ON ura.role_id = cr.id
      WHERE ura.user_id = ?
        AND (ura.expires_at IS NULL OR ura.expires_at > ?)
    `;

    const params: any[] = [userId, Date.now()];

    // 添加作用域过滤
    if (context?.organizationId) {
      query += ` AND (ura.scope_type = 'organization' AND ura.scope_id = ?)`;
      params.push(context.organizationId);
    }

    const results = this.db.prepare(query).all(...params) as Array<{ permissions: string }>;

    const permissions: Permission[] = [];
    results.forEach(row => {
      const perms = JSON.parse(row.permissions) as Permission[];
      permissions.push(...perms);
    });

    return [...new Set(permissions)]; // 去重
  }

  /**
   * 获取权限所需的最低角色
   */
  private getRequiredRole(permission: Permission): UserRole | undefined {
    for (const [role, permissions] of Object.entries(ROLE_PERMISSIONS)) {
      if (permissions.includes(permission)) {
        return role as UserRole;
      }
    }
    return undefined;
  }

  /**
   * 创建自定义角色
   */
  createCustomRole(config: {
    id: string;
    name: string;
    description: string;
    permissions: Permission[];
    organizationId: string;
    createdBy: string;
  }): void {
    const now = Date.now();

    this.db.prepare(`
      INSERT INTO custom_roles (
        id, name, description, permissions, organization_id,
        created_by, created_at, updated_at
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
    `).run(
      config.id,
      config.name,
      config.description,
      JSON.stringify(config.permissions),
      config.organizationId,
      config.createdBy,
      now,
      now
    );
  }

  /**
   * 分配角色给用户
   */
  assignRole(config: {
    userId: string;
    roleId: string;
    scopeType: 'global' | 'organization' | 'team' | 'department';
    scopeId?: string;
    assignedBy: string;
    expiresAt?: number;
  }): void {
    this.db.prepare(`
      INSERT OR REPLACE INTO user_role_assignments (
        user_id, role_id, scope_type, scope_id,
        assigned_by, assigned_at, expires_at
      ) VALUES (?, ?, ?, ?, ?, ?, ?)
    `).run(
      config.userId,
      config.roleId,
      config.scopeType,
      config.scopeId || null,
      config.assignedBy,
      Date.now(),
      config.expiresAt || null
    );
  }

  /**
   * 撤销用户角色
   */
  revokeRole(userId: string, roleId: string, scopeType: string, scopeId?: string): boolean {
    const result = this.db.prepare(`
      DELETE FROM user_role_assignments
      WHERE user_id = ? AND role_id = ? AND scope_type = ?
        ${scopeId ? 'AND scope_id = ?' : 'AND scope_id IS NULL'}
    `).run(scopeId ? [userId, roleId, scopeType, scopeId] : [userId, roleId, scopeType]);

    return result.changes > 0;
  }

  /**
   * 获取用户所有权限
   */
  getUserPermissions(userId: string): {
    basePermissions: Permission[];
    customPermissions: Permission[];
    allPermissions: Permission[];
  } {
    // 获取基础权限
    const user = this.db.prepare(`
      SELECT role FROM users WHERE id = ?
    `).get(userId) as { role: UserRole } | undefined;

    const basePermissions = user ? (ROLE_PERMISSIONS[user.role] || []) : [];

    // 获取自定义权限
    const customPermissions = this.getCustomPermissions(userId);

    // 合并所有权限
    const allPermissions = [...new Set([...basePermissions, ...customPermissions])];

    return {
      basePermissions,
      customPermissions,
      allPermissions
    };
  }

  /**
   * 获取角色的所有权限
   */
  getRolePermissions(role: UserRole | string): Permission[] {
    // 检查是否是系统角色
    if (Object.values(UserRole).includes(role as UserRole)) {
      return ROLE_PERMISSIONS[role as UserRole] || [];
    }

    // 查询自定义角色
    const customRole = this.db.prepare(`
      SELECT permissions FROM custom_roles WHERE id = ?
    `).get(role) as { permissions: string } | undefined;

    if (customRole) {
      return JSON.parse(customRole.permissions) as Permission[];
    }

    return [];
  }

  /**
   * 批量检查权限
   */
  checkPermissions(
    userId: string,
    permissions: Permission[],
    context?: {
      organizationId?: string;
      teamId?: string;
      departmentId?: string;
    }
  ): Record<Permission, boolean> {
    const results: Record<Permission, boolean> = {} as any;

    permissions.forEach(permission => {
      const result = this.hasPermission(userId, permission, context);
      results[permission] = result.granted;
    });

    return results;
  }

  /**
   * 获取权限矩阵（用于UI展示）
   */
  getPermissionMatrix(): {
    roles: UserRole[];
    permissions: Permission[];
    matrix: Record<UserRole, Record<Permission, boolean>>;
  } {
    const roles = Object.values(UserRole);
    const allPermissions = Object.values(Permission);

    const matrix: Record<UserRole, Record<Permission, boolean>> = {} as any;

    roles.forEach(role => {
      matrix[role] = {} as any;
      const rolePermissions = ROLE_PERMISSIONS[role] || [];

      allPermissions.forEach(permission => {
        matrix[role][permission] = rolePermissions.includes(permission);
      });
    });

    return {
      roles,
      permissions: allPermissions,
      matrix
    };
  }

  /**
   * 更新自定义角色权限
   */
  updateCustomRole(roleId: string, permissions: Permission[]): boolean {
    const result = this.db.prepare(`
      UPDATE custom_roles
      SET permissions = ?, updated_at = ?
      WHERE id = ?
    `).run(JSON.stringify(permissions), Date.now(), roleId);

    return result.changes > 0;
  }

  /**
   * 删除自定义角色
   */
  deleteCustomRole(roleId: string): boolean {
    const result = this.db.prepare(`
      DELETE FROM custom_roles WHERE id = ?
    `).run(roleId);

    return result.changes > 0;
  }

  /**
   * 获取用户在特定作用域的角色
   */
  getUserRolesInScope(
    userId: string,
    scopeType: 'global' | 'organization' | 'team' | 'department',
    scopeId?: string
  ): UserRoleAssignment[] {
    let query = `
      SELECT * FROM user_role_assignments
      WHERE user_id = ? AND scope_type = ?
        AND (expires_at IS NULL OR expires_at > ?)
    `;

    const params: any[] = [userId, scopeType, Date.now()];

    if (scopeId) {
      query += ` AND scope_id = ?`;
      params.push(scopeId);
    }

    return this.db.prepare(query).all(...params) as UserRoleAssignment[];
  }
}
