// Generated by Qoder AI (Model: claude-sonnet-4-20250514) - 2025-10-14
// Task: M6 Phase2 - 实现五级数据可见性控制机制

import { Database } from 'better-sqlite3';
import { UserRole } from '../database/schema.js';

/**
 * 数据可见性级别枚举
 * 从低到高：Private -> Team -> Department -> Enterprise -> Public
 */
export enum VisibilityLevel {
  PRIVATE = 'private',           // 仅自己可见
  TEAM = 'team',                 // 团队成员可见
  DEPARTMENT = 'department',     // 部门成员可见
  ENTERPRISE = 'enterprise',     // 企业全员可见
  PUBLIC = 'public'              // 公开可见
}

/**
 * 资源类型
 */
export type ResourceType = 'template' | 'config' | 'share' | 'document' | 'file';

/**
 * 资源可见性配置
 */
export interface ResourceVisibility {
  resource_id: string;           // 资源ID
  resource_type: ResourceType;   // 资源类型
  owner_id: string;              // 所有者ID
  visibility_level: VisibilityLevel; // 可见性级别
  organization_id?: string;      // 组织ID
  team_id?: string;              // 团队ID
  department_id?: string;        // 部门ID
  created_at: number;            // 创建时间
  updated_at: number;            // 更新时间
}

/**
 * 可见性检查结果
 */
export interface VisibilityCheckResult {
  canView: boolean;              // 是否可查看
  canEdit: boolean;              // 是否可编辑
  canDelete: boolean;            // 是否可删除
  canShare: boolean;             // 是否可分享
  reason?: string;               // 拒绝原因
}

/**
 * 数据可见性管理器
 */
export class VisibilityManager {
  private db: Database;

  constructor(db: Database) {
    this.db = db;
    this.initializeTables();
  }

  /**
   * 初始化可见性表
   */
  private initializeTables(): void {
    this.db.exec(`
      CREATE TABLE IF NOT EXISTS resource_visibility (
        resource_id TEXT NOT NULL,
        resource_type TEXT NOT NULL,
        owner_id TEXT NOT NULL,
        visibility_level TEXT NOT NULL DEFAULT 'private',
        organization_id TEXT,
        team_id TEXT,
        department_id TEXT,
        created_at INTEGER NOT NULL,
        updated_at INTEGER NOT NULL,
        PRIMARY KEY (resource_id, resource_type),
        FOREIGN KEY (owner_id) REFERENCES users(id) ON DELETE CASCADE,
        FOREIGN KEY (organization_id) REFERENCES organizations(id) ON DELETE CASCADE,
        CHECK (visibility_level IN ('private', 'team', 'department', 'enterprise', 'public'))
      )
    `);

    // 创建索引以优化查询
    this.db.exec(`
      CREATE INDEX IF NOT EXISTS idx_visibility_owner ON resource_visibility(owner_id);
      CREATE INDEX IF NOT EXISTS idx_visibility_level ON resource_visibility(visibility_level);
      CREATE INDEX IF NOT EXISTS idx_visibility_org ON resource_visibility(organization_id);
      CREATE INDEX IF NOT EXISTS idx_visibility_team ON resource_visibility(team_id);
    `);
  }

  /**
   * 设置资源可见性
   */
  setVisibility(config: {
    resourceId: string;
    resourceType: ResourceType;
    ownerId: string;
    visibilityLevel: VisibilityLevel;
    organizationId?: string;
    teamId?: string;
    departmentId?: string;
  }): void {
    const now = Date.now();

    this.db.prepare(`
      INSERT OR REPLACE INTO resource_visibility (
        resource_id, resource_type, owner_id, visibility_level,
        organization_id, team_id, department_id, created_at, updated_at
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    `).run(
      config.resourceId,
      config.resourceType,
      config.ownerId,
      config.visibilityLevel,
      config.organizationId || null,
      config.teamId || null,
      config.departmentId || null,
      now,
      now
    );
  }

  /**
   * 获取资源可见性配置
   */
  getVisibility(resourceId: string, resourceType: ResourceType): ResourceVisibility | null {
    const result = this.db.prepare(`
      SELECT * FROM resource_visibility
      WHERE resource_id = ? AND resource_type = ?
    `).get(resourceId, resourceType) as ResourceVisibility | undefined;

    return result || null;
  }

  /**
   * 检查用户对资源的访问权限
   */
  checkAccess(
    userId: string,
    resourceId: string,
    resourceType: ResourceType
  ): VisibilityCheckResult {
    // 获取资源可见性配置
    const visibility = this.getVisibility(resourceId, resourceType);
    
    if (!visibility) {
      return {
        canView: false,
        canEdit: false,
        canDelete: false,
        canShare: false,
        reason: 'Resource not found'
      };
    }

    // 所有者拥有所有权限
    if (visibility.owner_id === userId) {
      return {
        canView: true,
        canEdit: true,
        canDelete: true,
        canShare: true
      };
    }

    // 获取用户信息
    const user = this.db.prepare(`
      SELECT id, organization_id, role FROM users WHERE id = ?
    `).get(userId) as { id: string; organization_id?: string; role: UserRole } | undefined;

    if (!user) {
      return {
        canView: false,
        canEdit: false,
        canDelete: false,
        canShare: false,
        reason: 'User not found'
      };
    }

    // 根据可见性级别判断权限
    return this.evaluatePermissions(visibility, user);
  }

  /**
   * 评估用户权限
   */
  private evaluatePermissions(
    visibility: ResourceVisibility,
    user: { id: string; organization_id?: string; role: UserRole }
  ): VisibilityCheckResult {
    switch (visibility.visibility_level) {
      case VisibilityLevel.PRIVATE:
        // 仅所有者可访问（已在checkAccess中处理）
        return {
          canView: false,
          canEdit: false,
          canDelete: false,
          canShare: false,
          reason: 'Resource is private'
        };

      case VisibilityLevel.TEAM:
        // 检查是否在同一团队
        const isTeamMember = this.isUserInTeam(user.id, visibility.team_id || '');
        return {
          canView: isTeamMember,
          canEdit: isTeamMember && user.role !== UserRole.USER,
          canDelete: false,
          canShare: isTeamMember && user.role === UserRole.ADMIN,
          reason: isTeamMember ? undefined : 'Not a team member'
        };

      case VisibilityLevel.DEPARTMENT:
        // 检查是否在同一部门
        const isDepartmentMember = this.isUserInDepartment(user.id, visibility.department_id || '');
        return {
          canView: isDepartmentMember,
          canEdit: isDepartmentMember && user.role !== UserRole.USER,
          canDelete: false,
          canShare: isDepartmentMember && user.role === UserRole.ADMIN,
          reason: isDepartmentMember ? undefined : 'Not a department member'
        };

      case VisibilityLevel.ENTERPRISE:
        // 检查是否在同一企业
        const isOrgMember = user.organization_id === visibility.organization_id;
        return {
          canView: isOrgMember,
          canEdit: isOrgMember && user.role !== UserRole.USER,
          canDelete: false,
          canShare: isOrgMember && user.role === UserRole.ADMIN,
          reason: isOrgMember ? undefined : 'Not an organization member'
        };

      case VisibilityLevel.PUBLIC:
        // 所有人可查看，但只有管理员可编辑
        return {
          canView: true,
          canEdit: user.role === UserRole.ADMIN || user.role === UserRole.OWNER,
          canDelete: false,
          canShare: true
        };

      default:
        return {
          canView: false,
          canEdit: false,
          canDelete: false,
          canShare: false,
          reason: 'Invalid visibility level'
        };
    }
  }

  /**
   * 检查用户是否在团队中
   */
  private isUserInTeam(userId: string, teamId: string): boolean {
    if (!teamId) return false;

    const result = this.db.prepare(`
      SELECT COUNT(*) as count FROM team_members
      WHERE user_id = ? AND team_id = ?
    `).get(userId, teamId) as { count: number } | undefined;

    return (result?.count || 0) > 0;
  }

  /**
   * 检查用户是否在部门中
   */
  private isUserInDepartment(userId: string, departmentId: string): boolean {
    if (!departmentId) return false;

    const result = this.db.prepare(`
      SELECT COUNT(*) as count FROM department_members
      WHERE user_id = ? AND department_id = ?
    `).get(userId, departmentId) as { count: number } | undefined;

    return (result?.count || 0) > 0;
  }

  /**
   * 获取用户可访问的资源列表
   */
  getAccessibleResources(
    userId: string,
    resourceType: ResourceType,
    visibilityLevel?: VisibilityLevel
  ): ResourceVisibility[] {
    // 获取用户信息
    const user = this.db.prepare(`
      SELECT id, organization_id, role FROM users WHERE id = ?
    `).get(userId) as { id: string; organization_id?: string; role: UserRole } | undefined;

    if (!user) {
      return [];
    }

    let query = `
      SELECT rv.* FROM resource_visibility rv
      WHERE rv.resource_type = ?
        AND (
          rv.owner_id = ?
          OR rv.visibility_level = 'public'
          OR (rv.visibility_level = 'enterprise' AND rv.organization_id = ?)
        )
    `;

    const params: any[] = [resourceType, userId, user.organization_id];

    if (visibilityLevel) {
      query += ` AND rv.visibility_level = ?`;
      params.push(visibilityLevel);
    }

    query += ` ORDER BY rv.updated_at DESC`;

    return this.db.prepare(query).all(...params) as ResourceVisibility[];
  }

  /**
   * 批量更新可见性级别
   */
  batchUpdateVisibility(
    resourceIds: string[],
    resourceType: ResourceType,
    newLevel: VisibilityLevel
  ): number {
    const placeholders = resourceIds.map(() => '?').join(',');
    const stmt = this.db.prepare(`
      UPDATE resource_visibility
      SET visibility_level = ?, updated_at = ?
      WHERE resource_id IN (${placeholders}) AND resource_type = ?
    `);

    const result = stmt.run(newLevel, Date.now(), ...resourceIds, resourceType);
    return result.changes;
  }

  /**
   * 删除资源可见性配置
   */
  removeVisibility(resourceId: string, resourceType: ResourceType): boolean {
    const result = this.db.prepare(`
      DELETE FROM resource_visibility
      WHERE resource_id = ? AND resource_type = ?
    `).run(resourceId, resourceType);

    return result.changes > 0;
  }

  /**
   * 获取可见性统计信息
   */
  getVisibilityStats(organizationId?: string): Record<VisibilityLevel, number> {
    let query = `
      SELECT visibility_level, COUNT(*) as count
      FROM resource_visibility
    `;

    if (organizationId) {
      query += ` WHERE organization_id = ?`;
    }

    query += ` GROUP BY visibility_level`;

    const results = organizationId
      ? this.db.prepare(query).all(organizationId) as Array<{ visibility_level: VisibilityLevel; count: number }>
      : this.db.prepare(query).all() as Array<{ visibility_level: VisibilityLevel; count: number }>;

    const stats: Record<VisibilityLevel, number> = {
      [VisibilityLevel.PRIVATE]: 0,
      [VisibilityLevel.TEAM]: 0,
      [VisibilityLevel.DEPARTMENT]: 0,
      [VisibilityLevel.ENTERPRISE]: 0,
      [VisibilityLevel.PUBLIC]: 0
    };

    results.forEach(row => {
      stats[row.visibility_level] = row.count;
    });

    return stats;
  }
}
