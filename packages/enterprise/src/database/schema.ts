// Generated by Qoder AI (Model: claude-sonnet-4-20250514) - 2025-10-14
// Task: M6 Phase1 - 设计并实现用户数据库Schema

import { Database } from 'better-sqlite3';

/**
 * 用户层级枚举
 */
export enum UserTier {
  FREE = 'free',
  PROFESSIONAL = 'professional',
  TEAM = 'team',
  ENTERPRISE = 'enterprise'
}

/**
 * 用户角色枚举
 */
export enum UserRole {
  USER = 'user',
  ADMIN = 'admin',
  OWNER = 'owner'
}

/**
 * 用户表Schema
 */
export interface User {
  id: string;                    // UUID
  email: string;                 // 邮箱（唯一）
  username: string;              // 用户名
  password_hash: string;         // 密码哈希
  tier: UserTier;                // 用户层级
  organization_id?: string;      // 所属组织ID
  role: UserRole;                // 角色
  quota_templates: number;       // 模板配额
  quota_configs: number;         // 配置配额
  quota_shares: number;          // 分享配额
  created_at: number;            // 创建时间（Unix时间戳）
  updated_at: number;            // 更新时间
  last_login_at?: number;        // 最后登录时间
  is_active: boolean;            // 是否激活
  metadata: string;              // JSON格式的元数据
}

/**
 * 组织表Schema
 */
export interface Organization {
  id: string;                    // UUID
  name: string;                  // 组织名称
  tier: UserTier;                // 组织层级
  owner_id: string;              // 所有者ID
  member_count: number;          // 成员数量
  max_members: number;           // 最大成员数
  quota_templates: number;       // 组织模板配额
  quota_configs: number;         // 组织配置配额
  created_at: number;            // 创建时间
  updated_at: number;            // 更新时间
  is_active: boolean;            // 是否激活
  settings: string;              // JSON格式的设置
}

/**
 * 审计日志表Schema
 */
export interface AuditLog {
  id: string;                    // UUID
  user_id: string;               // 操作用户ID
  organization_id?: string;      // 组织ID（如果适用）
  action: string;                // 操作类型
  resource_type: string;         // 资源类型
  resource_id?: string;          // 资源ID
  details: string;               // JSON格式的详细信息
  ip_address?: string;           // IP地址
  user_agent?: string;           // User Agent
  timestamp: number;             // 时间戳
  status: 'success' | 'failure'; // 操作状态
}

/**
 * 数据库Schema管理类
 */
export class DatabaseSchema {
  private db: Database;

  constructor(db: Database) {
    this.db = db;
  }

  /**
   * 初始化所有表
   */
  initializeTables(): void {
    this.createUsersTable();
    this.createOrganizationsTable();
    this.createAuditLogsTable();
    this.createIndexes();
  }

  /**
   * 创建用户表
   */
  private createUsersTable(): void {
    this.db.exec(`
      CREATE TABLE IF NOT EXISTS users (
        id TEXT PRIMARY KEY,
        email TEXT UNIQUE NOT NULL,
        username TEXT NOT NULL,
        password_hash TEXT NOT NULL,
        tier TEXT NOT NULL DEFAULT 'free',
        organization_id TEXT,
        role TEXT NOT NULL DEFAULT 'user',
        quota_templates INTEGER NOT NULL DEFAULT 5,
        quota_configs INTEGER NOT NULL DEFAULT 10,
        quota_shares INTEGER NOT NULL DEFAULT 3,
        created_at INTEGER NOT NULL,
        updated_at INTEGER NOT NULL,
        last_login_at INTEGER,
        is_active INTEGER NOT NULL DEFAULT 1,
        metadata TEXT DEFAULT '{}',
        FOREIGN KEY (organization_id) REFERENCES organizations(id) ON DELETE SET NULL,
        CHECK (tier IN ('free', 'professional', 'team', 'enterprise')),
        CHECK (role IN ('user', 'admin', 'owner')),
        CHECK (is_active IN (0, 1))
      )
    `);
  }

  /**
   * 创建组织表
   */
  private createOrganizationsTable(): void {
    this.db.exec(`
      CREATE TABLE IF NOT EXISTS organizations (
        id TEXT PRIMARY KEY,
        name TEXT NOT NULL,
        tier TEXT NOT NULL DEFAULT 'team',
        owner_id TEXT NOT NULL,
        member_count INTEGER NOT NULL DEFAULT 1,
        max_members INTEGER NOT NULL DEFAULT 5,
        quota_templates INTEGER NOT NULL DEFAULT 50,
        quota_configs INTEGER NOT NULL DEFAULT 100,
        created_at INTEGER NOT NULL,
        updated_at INTEGER NOT NULL,
        is_active INTEGER NOT NULL DEFAULT 1,
        settings TEXT DEFAULT '{}',
        FOREIGN KEY (owner_id) REFERENCES users(id) ON DELETE CASCADE,
        CHECK (tier IN ('free', 'professional', 'team', 'enterprise')),
        CHECK (is_active IN (0, 1))
      )
    `);
  }

  /**
   * 创建审计日志表
   */
  private createAuditLogsTable(): void {
    this.db.exec(`
      CREATE TABLE IF NOT EXISTS audit_logs (
        id TEXT PRIMARY KEY,
        user_id TEXT NOT NULL,
        organization_id TEXT,
        action TEXT NOT NULL,
        resource_type TEXT NOT NULL,
        resource_id TEXT,
        details TEXT NOT NULL DEFAULT '{}',
        ip_address TEXT,
        user_agent TEXT,
        timestamp INTEGER NOT NULL,
        status TEXT NOT NULL DEFAULT 'success',
        FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
        FOREIGN KEY (organization_id) REFERENCES organizations(id) ON DELETE SET NULL,
        CHECK (status IN ('success', 'failure'))
      )
    `);
  }

  /**
   * 创建索引优化查询性能
   */
  private createIndexes(): void {
    this.db.exec(`
      -- 用户表索引
      CREATE INDEX IF NOT EXISTS idx_users_email ON users(email);
      CREATE INDEX IF NOT EXISTS idx_users_organization ON users(organization_id);
      CREATE INDEX IF NOT EXISTS idx_users_tier ON users(tier);
      CREATE INDEX IF NOT EXISTS idx_users_created_at ON users(created_at);

      -- 组织表索引
      CREATE INDEX IF NOT EXISTS idx_organizations_owner ON organizations(owner_id);
      CREATE INDEX IF NOT EXISTS idx_organizations_tier ON organizations(tier);

      -- 审计日志表索引
      CREATE INDEX IF NOT EXISTS idx_audit_logs_user ON audit_logs(user_id);
      CREATE INDEX IF NOT EXISTS idx_audit_logs_organization ON audit_logs(organization_id);
      CREATE INDEX IF NOT EXISTS idx_audit_logs_timestamp ON audit_logs(timestamp);
      CREATE INDEX IF NOT EXISTS idx_audit_logs_action ON audit_logs(action);
      CREATE INDEX IF NOT EXISTS idx_audit_logs_resource ON audit_logs(resource_type, resource_id);
    `);
  }

  /**
   * 获取数据库版本信息
   */
  getDatabaseVersion(): string {
    const result = this.db.prepare('PRAGMA user_version').get() as { user_version: number };
    return `v${result.user_version}`;
  }

  /**
   * 设置数据库版本
   */
  setDatabaseVersion(version: number): void {
    this.db.exec(`PRAGMA user_version = ${version}`);
  }

  /**
   * 执行数据库迁移
   */
  migrate(): void {
    const currentVersion = parseInt(this.getDatabaseVersion().substring(1));
    
    // 迁移脚本数组
    const migrations: Array<{ version: number; up: () => void }> = [
      {
        version: 1,
        up: () => {
          this.initializeTables();
        }
      },
      {
        version: 2,
        up: () => {
          // 未来的迁移可以在这里添加
          // 例如：添加新列、修改约束等
        }
      }
    ];

    // 执行所有未执行的迁移
    for (const migration of migrations) {
      if (migration.version > currentVersion) {
        migration.up();
        this.setDatabaseVersion(migration.version);
      }
    }
  }

  /**
   * 清空所有表（谨慎使用！）
   */
  dropAllTables(): void {
    this.db.exec(`
      DROP TABLE IF EXISTS audit_logs;
      DROP TABLE IF EXISTS users;
      DROP TABLE IF EXISTS organizations;
    `);
  }

  /**
   * 获取表统计信息
   */
  getTableStats(): {
    users: number;
    organizations: number;
    audit_logs: number;
  } {
    const users = this.db.prepare('SELECT COUNT(*) as count FROM users').get() as { count: number };
    const organizations = this.db.prepare('SELECT COUNT(*) as count FROM organizations').get() as { count: number };
    const audit_logs = this.db.prepare('SELECT COUNT(*) as count FROM audit_logs').get() as { count: number };

    return {
      users: users.count,
      organizations: organizations.count,
      audit_logs: audit_logs.count
    };
  }
}

/**
 * 默认配额配置
 */
export const DEFAULT_QUOTAS = {
  [UserTier.FREE]: {
    templates: 5,
    configs: 10,
    shares: 3,
    max_members: 1
  },
  [UserTier.PROFESSIONAL]: {
    templates: 50,
    configs: 100,
    shares: 20,
    max_members: 1
  },
  [UserTier.TEAM]: {
    templates: 200,
    configs: 500,
    shares: 100,
    max_members: 10
  },
  [UserTier.ENTERPRISE]: {
    templates: -1,  // 无限制
    configs: -1,
    shares: -1,
    max_members: -1
  }
};
