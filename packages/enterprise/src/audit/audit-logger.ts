// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-15
// Task: M6 Phase2 - 实现审计日志系统和分层保留策略

import { Database } from 'better-sqlite3';
import { v4 as uuidv4 } from 'uuid';
import { UserTier } from '../database/schema.js';

/**
 * 审计日志级别
 */
export enum AuditLevel {
  INFO = 'info',
  WARNING = 'warning',
  ERROR = 'error',
  CRITICAL = 'critical'
}

/**
 * 审计事件类型
 */
export enum AuditEventType {
  // 用户操作
  USER_LOGIN = 'user.login',
  USER_LOGOUT = 'user.logout',
  USER_REGISTER = 'user.register',
  USER_UPDATE = 'user.update',
  USER_DELETE = 'user.delete',
  
  // 权限操作
  PERMISSION_GRANTED = 'permission.granted',
  PERMISSION_DENIED = 'permission.denied',
  ROLE_ASSIGNED = 'role.assigned',
  ROLE_REVOKED = 'role.revoked',
  
  // 资源操作
  RESOURCE_CREATED = 'resource.created',
  RESOURCE_UPDATED = 'resource.updated',
  RESOURCE_DELETED = 'resource.deleted',
  RESOURCE_ACCESSED = 'resource.accessed',
  RESOURCE_SHARED = 'resource.shared',
  
  // 配置操作
  CONFIG_CHANGED = 'config.changed',
  SETTINGS_UPDATED = 'settings.updated',
  
  // 安全事件
  SECURITY_BREACH = 'security.breach',
  SUSPICIOUS_ACTIVITY = 'security.suspicious',
  AUTHENTICATION_FAILED = 'auth.failed',
  
  // 系统事件
  SYSTEM_ERROR = 'system.error',
  SYSTEM_ALERT = 'system.alert'
}

/**
 * 审计日志条目
 */
export interface AuditLogEntry {
  id: string;
  user_id: string;
  organization_id?: string;
  event_type: AuditEventType;
  level: AuditLevel;
  resource_type?: string;
  resource_id?: string;
  action: string;
  details: string;
  ip_address?: string;
  user_agent?: string;
  timestamp: number;
  status: 'success' | 'failure';
}

/**
 * 审计日志查询选项
 */
export interface AuditLogQuery {
  userId?: string;
  organizationId?: string;
  eventType?: AuditEventType;
  level?: AuditLevel;
  resourceType?: string;
  startTime?: number;
  endTime?: number;
  status?: 'success' | 'failure';
  limit?: number;
  offset?: number;
}

/**
 * 分层保留策略
 */
export interface RetentionPolicy {
  tier: UserTier;
  retentionDays: number;
  maxLogSize: number;  // MB
  compressionEnabled: boolean;
  archiveEnabled: boolean;
}

/**
 * 默认保留策略
 */
const DEFAULT_RETENTION_POLICIES: Record<UserTier, RetentionPolicy> = {
  [UserTier.FREE]: {
    tier: UserTier.FREE,
    retentionDays: 7,
    maxLogSize: 10,
    compressionEnabled: false,
    archiveEnabled: false
  },
  [UserTier.PROFESSIONAL]: {
    tier: UserTier.PROFESSIONAL,
    retentionDays: 30,
    maxLogSize: 100,
    compressionEnabled: true,
    archiveEnabled: false
  },
  [UserTier.TEAM]: {
    tier: UserTier.TEAM,
    retentionDays: 90,
    maxLogSize: 500,
    compressionEnabled: true,
    archiveEnabled: true
  },
  [UserTier.ENTERPRISE]: {
    tier: UserTier.ENTERPRISE,
    retentionDays: 365,
    maxLogSize: -1,  // 无限制
    compressionEnabled: true,
    archiveEnabled: true
  }
};

/**
 * 审计日志管理器
 */
export class AuditLogger {
  private db: Database;

  constructor(db: Database) {
    this.db = db;
  }

  /**
   * 记录审计日志
   */
  log(entry: {
    userId: string;
    organizationId?: string;
    eventType: AuditEventType;
    level?: AuditLevel;
    resourceType?: string;
    resourceId?: string;
    action: string;
    details: any;
    ipAddress?: string;
    userAgent?: string;
    status?: 'success' | 'failure';
  }): string {
    const logId = uuidv4();
    
    this.db.prepare(`
      INSERT INTO audit_logs (
        id, user_id, organization_id, action, resource_type, resource_id,
        details, ip_address, user_agent, timestamp, status
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    `).run(
      logId,
      entry.userId,
      entry.organizationId || null,
      entry.action,
      entry.resourceType || null,
      entry.resourceId || null,
      JSON.stringify({
        eventType: entry.eventType,
        level: entry.level || AuditLevel.INFO,
        ...entry.details
      }),
      entry.ipAddress || null,
      entry.userAgent || null,
      Date.now(),
      entry.status || 'success'
    );

    return logId;
  }

  /**
   * 批量记录日志
   */
  batchLog(entries: Array<Parameters<typeof this.log>[0]>): string[] {
    const logIds: string[] = [];
    
    const stmt = this.db.prepare(`
      INSERT INTO audit_logs (
        id, user_id, organization_id, action, resource_type, resource_id,
        details, ip_address, user_agent, timestamp, status
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    `);

    const transaction = this.db.transaction((entriesToLog: typeof entries) => {
      for (const entry of entriesToLog) {
        const logId = uuidv4();
        stmt.run(
          logId,
          entry.userId,
          entry.organizationId || null,
          entry.action,
          entry.resourceType || null,
          entry.resourceId || null,
          JSON.stringify({
            eventType: entry.eventType,
            level: entry.level || AuditLevel.INFO,
            ...entry.details
          }),
          entry.ipAddress || null,
          entry.userAgent || null,
          Date.now(),
          entry.status || 'success'
        );
        logIds.push(logId);
      }
    });

    transaction(entries);
    return logIds;
  }

  /**
   * 查询审计日志
   */
  query(options: AuditLogQuery): AuditLogEntry[] {
    let query = 'SELECT * FROM audit_logs WHERE 1=1';
    const params: any[] = [];

    if (options.userId) {
      query += ' AND user_id = ?';
      params.push(options.userId);
    }

    if (options.organizationId) {
      query += ' AND organization_id = ?';
      params.push(options.organizationId);
    }

    if (options.resourceType) {
      query += ' AND resource_type = ?';
      params.push(options.resourceType);
    }

    if (options.startTime) {
      query += ' AND timestamp >= ?';
      params.push(options.startTime);
    }

    if (options.endTime) {
      query += ' AND timestamp <= ?';
      params.push(options.endTime);
    }

    if (options.status) {
      query += ' AND status = ?';
      params.push(options.status);
    }

    // 按时间倒序
    query += ' ORDER BY timestamp DESC';

    // 分页
    if (options.limit) {
      query += ' LIMIT ?';
      params.push(options.limit);
    }

    if (options.offset) {
      query += ' OFFSET ?';
      params.push(options.offset);
    }

    return this.db.prepare(query).all(...params) as AuditLogEntry[];
  }

  /**
   * 获取用户活动统计
   */
  getUserActivityStats(userId: string, days: number = 30): {
    totalActions: number;
    successActions: number;
    failedActions: number;
    actionsByType: Record<string, number>;
  } {
    const startTime = Date.now() - (days * 24 * 60 * 60 * 1000);

    const total = this.db.prepare(`
      SELECT COUNT(*) as count FROM audit_logs
      WHERE user_id = ? AND timestamp >= ?
    `).get(userId, startTime) as { count: number };

    const success = this.db.prepare(`
      SELECT COUNT(*) as count FROM audit_logs
      WHERE user_id = ? AND timestamp >= ? AND status = 'success'
    `).get(userId, startTime) as { count: number };

    const failed = this.db.prepare(`
      SELECT COUNT(*) as count FROM audit_logs
      WHERE user_id = ? AND timestamp >= ? AND status = 'failure'
    `).get(userId, startTime) as { count: number };

    const byType = this.db.prepare(`
      SELECT action, COUNT(*) as count FROM audit_logs
      WHERE user_id = ? AND timestamp >= ?
      GROUP BY action
    `).all(userId, startTime) as Array<{ action: string; count: number }>;

    const actionsByType: Record<string, number> = {};
    byType.forEach(row => {
      actionsByType[row.action] = row.count;
    });

    return {
      totalActions: total.count,
      successActions: success.count,
      failedActions: failed.count,
      actionsByType
    };
  }

  /**
   * 应用保留策略（清理过期日志）
   */
  applyRetentionPolicy(organizationId: string): {
    deletedCount: number;
    archivedCount: number;
  } {
    // 获取组织层级
    const org = this.db.prepare(`
      SELECT tier FROM organizations WHERE id = ?
    `).get(organizationId) as { tier: UserTier } | undefined;

    if (!org) {
      return { deletedCount: 0, archivedCount: 0 };
    }

    const policy = DEFAULT_RETENTION_POLICIES[org.tier];
    const cutoffTime = Date.now() - (policy.retentionDays * 24 * 60 * 60 * 1000);

    // 如果启用归档，先归档旧日志
    let archivedCount = 0;
    if (policy.archiveEnabled) {
      archivedCount = this.archiveLogs(organizationId, cutoffTime);
    }

    // 删除过期日志
    const result = this.db.prepare(`
      DELETE FROM audit_logs
      WHERE organization_id = ? AND timestamp < ?
    `).run(organizationId, cutoffTime);

    return {
      deletedCount: result.changes,
      archivedCount
    };
  }

  /**
   * 归档日志（简化实现，实际应写入独立存储）
   */
  private archiveLogs(organizationId: string, cutoffTime: number): number {
    // 创建归档表（如果不存在）
    this.db.exec(`
      CREATE TABLE IF NOT EXISTS audit_logs_archive (
        id TEXT PRIMARY KEY,
        user_id TEXT NOT NULL,
        organization_id TEXT,
        action TEXT NOT NULL,
        resource_type TEXT,
        resource_id TEXT,
        details TEXT NOT NULL,
        ip_address TEXT,
        user_agent TEXT,
        timestamp INTEGER NOT NULL,
        status TEXT NOT NULL,
        archived_at INTEGER NOT NULL
      )
    `);

    // 复制到归档表
    const result = this.db.prepare(`
      INSERT INTO audit_logs_archive
      SELECT *, ? as archived_at FROM audit_logs
      WHERE organization_id = ? AND timestamp < ?
    `).run(Date.now(), organizationId, cutoffTime);

    return result.changes;
  }

  /**
   * 获取日志大小统计
   */
  getLogSizeStats(organizationId?: string): {
    totalLogs: number;
    estimatedSizeMB: number;
  } {
    let query = 'SELECT COUNT(*) as count FROM audit_logs';
    const params: any[] = [];

    if (organizationId) {
      query += ' WHERE organization_id = ?';
      params.push(organizationId);
    }

    const result = this.db.prepare(query).get(...params) as { count: number };

    // 估算：每条日志约1KB
    const estimatedSizeMB = (result.count * 1) / 1024;

    return {
      totalLogs: result.count,
      estimatedSizeMB: parseFloat(estimatedSizeMB.toFixed(2))
    };
  }

  /**
   * 清理所有组织的过期日志
   */
  cleanupAllExpiredLogs(): Record<string, { deletedCount: number; archivedCount: number }> {
    const orgs = this.db.prepare('SELECT id FROM organizations').all() as Array<{ id: string }>;

    const results: Record<string, { deletedCount: number; archivedCount: number }> = {};

    orgs.forEach(org => {
      results[org.id] = this.applyRetentionPolicy(org.id);
    });

    return results;
  }

  /**
   * 搜索日志（支持模糊搜索）
   */
  search(keyword: string, options: AuditLogQuery = {}): AuditLogEntry[] {
    let query = `
      SELECT * FROM audit_logs
      WHERE (
        action LIKE ? OR
        details LIKE ? OR
        resource_type LIKE ?
      )
    `;

    const searchPattern = `%${keyword}%`;
    const params: any[] = [searchPattern, searchPattern, searchPattern];

    if (options.userId) {
      query += ' AND user_id = ?';
      params.push(options.userId);
    }

    if (options.organizationId) {
      query += ' AND organization_id = ?';
      params.push(options.organizationId);
    }

    query += ' ORDER BY timestamp DESC';

    if (options.limit) {
      query += ' LIMIT ?';
      params.push(options.limit);
    }

    return this.db.prepare(query).all(...params) as AuditLogEntry[];
  }

  /**
   * 导出日志（CSV格式）
   */
  export(options: AuditLogQuery): string {
    const logs = this.query(options);

    const headers = ['ID', 'User ID', 'Action', 'Resource Type', 'Resource ID', 'Status', 'Timestamp', 'IP Address'];
    const rows = logs.map(log => [
      log.id,
      log.user_id,
      log.action,
      log.resource_type || '',
      log.resource_id || '',
      log.status,
      new Date(log.timestamp).toISOString(),
      log.ip_address || ''
    ]);

    const csvContent = [
      headers.join(','),
      ...rows.map(row => row.map(cell => `"${cell}"`).join(','))
    ].join('\n');

    return csvContent;
  }
}
