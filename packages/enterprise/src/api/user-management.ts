// Generated by Qoder AI (Model: claude-sonnet-4-20250514) - 2025-10-14
// Task: M6 Phase1 - 实现用户管理REST API

import { Request, Response, NextFunction } from 'express';
import { Database } from 'better-sqlite3';
import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import { v4 as uuidv4 } from 'uuid';
import { User, UserTier, UserRole, DEFAULT_QUOTAS } from '../database/schema.js';

const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key-change-in-production';
const SALT_ROUNDS = 10;

/**
 * 用户管理API类
 */
export class UserManagementAPI {
  private db: Database;

  constructor(db: Database) {
    this.db = db;
  }

  /**
   * 用户注册
   * POST /api/users/register
   */
  async register(req: Request, res: Response): Promise<void> {
    try {
      const { email, username, password } = req.body;

      // 验证输入
      if (!email || !username || !password) {
        res.status(400).json({ error: 'Missing required fields' });
        return;
      }

      // 检查邮箱是否已存在
      const existingUser = this.db.prepare('SELECT id FROM users WHERE email = ?').get(email);
      if (existingUser) {
        res.status(409).json({ error: 'Email already registered' });
        return;
      }

      // 哈希密码
      const passwordHash = await bcrypt.hash(password, SALT_ROUNDS);

      // 创建用户
      const userId = uuidv4();
      const now = Date.now();
      const defaultQuotas = DEFAULT_QUOTAS[UserTier.FREE];

      const stmt = this.db.prepare(`
        INSERT INTO users (
          id, email, username, password_hash, tier, role,
          quota_templates, quota_configs, quota_shares,
          created_at, updated_at, is_active, metadata
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
      `);

      stmt.run(
        userId,
        email,
        username,
        passwordHash,
        UserTier.FREE,
        UserRole.USER,
        defaultQuotas.templates,
        defaultQuotas.configs,
        defaultQuotas.shares,
        now,
        now,
        1,
        '{}'
      );

      // 记录审计日志
      this.logAudit(userId, 'user.register', 'user', userId, { email, username });

      // 生成JWT token
      const token = jwt.sign({ userId, email, tier: UserTier.FREE }, JWT_SECRET, { expiresIn: '7d' });

      res.status(201).json({
        success: true,
        data: {
          userId,
          email,
          username,
          tier: UserTier.FREE,
          token
        }
      });
    } catch (error: any) {
      res.status(500).json({ error: error.message });
    }
  }

  /**
   * 用户登录
   * POST /api/users/login
   */
  async login(req: Request, res: Response): Promise<void> {
    try {
      const { email, password } = req.body;

      if (!email || !password) {
        res.status(400).json({ error: 'Missing email or password' });
        return;
      }

      // 查找用户
      const user = this.db.prepare(`
        SELECT id, email, username, password_hash, tier, role, is_active
        FROM users WHERE email = ?
      `).get(email) as User | undefined;

      if (!user) {
        res.status(401).json({ error: 'Invalid credentials' });
        return;
      }

      if (!user.is_active) {
        res.status(403).json({ error: 'Account is inactive' });
        return;
      }

      // 验证密码
      const isValid = await bcrypt.compare(password, user.password_hash);
      if (!isValid) {
        res.status(401).json({ error: 'Invalid credentials' });
        return;
      }

      // 更新最后登录时间
      this.db.prepare('UPDATE users SET last_login_at = ? WHERE id = ?')
        .run(Date.now(), user.id);

      // 记录审计日志
      this.logAudit(user.id, 'user.login', 'user', user.id, { email });

      // 生成JWT token
      const token = jwt.sign(
        { userId: user.id, email: user.email, tier: user.tier },
        JWT_SECRET,
        { expiresIn: '7d' }
      );

      res.json({
        success: true,
        data: {
          userId: user.id,
          email: user.email,
          username: user.username,
          tier: user.tier,
          role: user.role,
          token
        }
      });
    } catch (error: any) {
      res.status(500).json({ error: error.message });
    }
  }

  /**
   * 层级升级
   * POST /api/users/:userId/upgrade
   */
  async upgradeTier(req: Request, res: Response): Promise<void> {
    try {
      const { userId } = req.params;
      const { targetTier } = req.body;

      // 验证目标层级
      const validTiers = Object.values(UserTier);
      if (!validTiers.includes(targetTier)) {
        res.status(400).json({ error: 'Invalid tier' });
        return;
      }

      // 获取当前用户信息
      const user = this.db.prepare('SELECT * FROM users WHERE id = ?').get(userId) as User;
      if (!user) {
        res.status(404).json({ error: 'User not found' });
        return;
      }

      // 检查是否降级（不允许）
      const tierOrder = {
        [UserTier.FREE]: 0,
        [UserTier.PROFESSIONAL]: 1,
        [UserTier.TEAM]: 2,
        [UserTier.ENTERPRISE]: 3
      };

      if (tierOrder[targetTier] < tierOrder[user.tier as UserTier]) {
        res.status(400).json({ error: 'Downgrade not allowed' });
        return;
      }

      // 更新用户层级和配额
      const newQuotas = DEFAULT_QUOTAS[targetTier as UserTier];
      
      this.db.prepare(`
        UPDATE users SET
          tier = ?,
          quota_templates = ?,
          quota_configs = ?,
          quota_shares = ?,
          updated_at = ?
        WHERE id = ?
      `).run(
        targetTier,
        newQuotas.templates,
        newQuotas.configs,
        newQuotas.shares,
        Date.now(),
        userId
      );

      // 记录审计日志
      this.logAudit(userId, 'user.tier_upgrade', 'user', userId, {
        from: user.tier,
        to: targetTier
      });

      res.json({
        success: true,
        data: {
          userId,
          tier: targetTier,
          quotas: newQuotas
        }
      });
    } catch (error: any) {
      res.status(500).json({ error: error.message });
    }
  }

  /**
   * 查询配额
   * GET /api/users/:userId/quota
   */
  async getQuota(req: Request, res: Response): Promise<void> {
    try {
      const { userId } = req.params;

      const user = this.db.prepare(`
        SELECT tier, quota_templates, quota_configs, quota_shares
        FROM users WHERE id = ?
      `).get(userId) as User | undefined;

      if (!user) {
        res.status(404).json({ error: 'User not found' });
        return;
      }

      // 查询使用情况（示例）
      const usageTemplates = this.db.prepare(`
        SELECT COUNT(*) as count FROM templates WHERE user_id = ?
      `).get(userId) as { count: number } | undefined;

      const usageConfigs = this.db.prepare(`
        SELECT COUNT(*) as count FROM configs WHERE user_id = ?
      `).get(userId) as { count: number } | undefined;

      res.json({
        success: true,
        data: {
          tier: user.tier,
          quotas: {
            templates: {
              limit: user.quota_templates,
              used: usageTemplates?.count || 0,
              remaining: user.quota_templates === -1 ? -1 : user.quota_templates - (usageTemplates?.count || 0)
            },
            configs: {
              limit: user.quota_configs,
              used: usageConfigs?.count || 0,
              remaining: user.quota_configs === -1 ? -1 : user.quota_configs - (usageConfigs?.count || 0)
            },
            shares: {
              limit: user.quota_shares,
              used: 0,
              remaining: user.quota_shares === -1 ? -1 : user.quota_shares
            }
          }
        }
      });
    } catch (error: any) {
      res.status(500).json({ error: error.message });
    }
  }

  /**
   * 获取用户信息
   * GET /api/users/:userId
   */
  async getUser(req: Request, res: Response): Promise<void> {
    try {
      const { userId } = req.params;

      const user = this.db.prepare(`
        SELECT id, email, username, tier, role, organization_id,
               quota_templates, quota_configs, quota_shares,
               created_at, last_login_at, is_active
        FROM users WHERE id = ?
      `).get(userId);

      if (!user) {
        res.status(404).json({ error: 'User not found' });
        return;
      }

      res.json({
        success: true,
        data: user
      });
    } catch (error: any) {
      res.status(500).json({ error: error.message });
    }
  }

  /**
   * 记录审计日志
   */
  private logAudit(
    userId: string,
    action: string,
    resourceType: string,
    resourceId: string,
    details: any
  ): void {
    try {
      this.db.prepare(`
        INSERT INTO audit_logs (
          id, user_id, action, resource_type, resource_id,
          details, timestamp, status
        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
      `).run(
        uuidv4(),
        userId,
        action,
        resourceType,
        resourceId,
        JSON.stringify(details),
        Date.now(),
        'success'
      );
    } catch (error) {
      console.error('Failed to log audit:', error);
    }
  }
}

/**
 * JWT认证中间件
 */
export function authenticateToken(req: Request, res: Response, next: NextFunction): void {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1];

  if (!token) {
    res.status(401).json({ error: 'No token provided' });
    return;
  }

  try {
    const decoded = jwt.verify(token, JWT_SECRET);
    (req as any).user = decoded;
    next();
  } catch (error) {
    res.status(403).json({ error: 'Invalid token' });
  }
}

/**
 * 设置用户管理路由
 */
export function setupUserRoutes(app: any, db: Database): void {
  const api = new UserManagementAPI(db);

  // 公开路由
  app.post('/api/users/register', (req: Request, res: Response) => api.register(req, res));
  app.post('/api/users/login', (req: Request, res: Response) => api.login(req, res));

  // 需要认证的路由
  app.get('/api/users/:userId', authenticateToken, (req: Request, res: Response) => api.getUser(req, res));
  app.get('/api/users/:userId/quota', authenticateToken, (req: Request, res: Response) => api.getQuota(req, res));
  app.post('/api/users/:userId/upgrade', authenticateToken, (req: Request, res: Response) => api.upgradeTier(req, res));
}
