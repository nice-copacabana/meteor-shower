// Generated by Qoder AI (Model: claude-sonnet-4-20250514) - 2025-10-14
// Task: 实现CLI init命令的交互式配置向导（支持所有4个工具）
/**
 * 初始化命令模块
 * 负责引导用户完成工具集选择、模板配置和变量收集
 */
import inquirer from 'inquirer'; // 交互式命令行界面
import chalk from 'chalk'; // 终端颜色输出
import { ConfigGenerator } from '@meteor-shower/utils'; // 配置生成器
import fs from 'fs/promises'; // 文件系统操作
import path from 'path'; // 路径操作
import ora from 'ora'; // 加载动画
import { createCLITierHelper } from '../helpers/tier-helper.js'; // 用户层级辅助
/**
 * 初始化命令主函数
 * 引导用户完成完整的配置初始化流程
 *
 * 流程步骤：
 * 1. 工具集选择 - 复选框形式选择要配置的AI工具
 * 2. 模板选择 - 单选框选择配置模板
 * 3. 变量收集 - 根据模板和工具集收集必要变量
 * 4. 结果输出 - 显示配置摘要
 *
 * @param options 初始化选项，可选的预设参数
 * @returns 包含工具集、模板和变量的配置对象
 */
export async function initCommand(options = {}) {
    console.log(chalk.cyan.bold('\n🚀 初始化 meteor-shower 配置\n'));
    // 显示欢迎信息
    console.log(chalk.gray('  meteor-shower 将帮助您配置多个 AI 编程工具'));
    console.log(chalk.gray('  支持: Gemini, Claude, Cursor, OpenAI\n'));
    // 步骤0: 检查用户层级和配额（如果已登录）
    const userId = process.env.METEOR_USER_ID;
    const tierHelper = createCLITierHelper();
    if (userId) {
        const quotaCheck = await tierHelper.checkToolQuota(userId);
        if (!quotaCheck.allowed) {
            console.log(chalk.red(`\n❌ 配额限制: ${quotaCheck.reason}`));
            console.log('');
            tierHelper.displayQuotaInfo(quotaCheck);
            tierHelper.displayUpgradePrompt(quotaCheck);
            tierHelper.close();
            return;
        }
        // 显示配额信息
        if (quotaCheck.remaining !== -1) {
            console.log(chalk.gray(`  剩余工具配置配额: ${quotaCheck.remaining}\n`));
        }
    }
    // ========== 第1步：工具集选择 ==========
    console.log(chalk.yellow('📦 步骤 1/4: 选择工具集\n'));
    const { toolset } = await inquirer.prompt([{
            type: 'checkbox',
            name: 'toolset',
            message: '选择要配置的 AI 工具 (使用空格选择, Enter确认):',
            choices: [
                {
                    name: 'Gemini CLI - Google 最新AI模型',
                    value: 'gemini',
                    checked: true
                },
                {
                    name: 'Claude - Anthropic 旗舰模型',
                    value: 'claude',
                    checked: true
                },
                {
                    name: 'Cursor - AI编程IDE',
                    value: 'cursor'
                },
                {
                    name: 'OpenAI - GPT系列模型',
                    value: 'openai'
                }
            ],
            validate: (answer) => {
                if (answer.length < 1) {
                    return '请至少选择一个工具';
                }
                return true;
            }
        }]);
    console.log(chalk.green(`✓ 已选择 ${toolset.length} 个工具: ${toolset.join(', ')}\n`));
    // ========== 第2步：模板选择 ==========
    console.log(chalk.yellow('📝 步骤 2/4: 选择配置模板\n'));
    const templateChoices = getTemplateChoices(toolset);
    const { template } = await inquirer.prompt([{
            type: 'list',
            name: 'template',
            message: '选择配置模板:',
            choices: templateChoices,
            pageSize: 10
        }]);
    console.log(chalk.green(`✓ 已选择模板: ${template}\n`));
    // ========== 第3步：变量收集 ==========
    console.log(chalk.yellow('⚙️  步骤 3/4: 配置项目变量\n'));
    const variables = await collectVariables(template, toolset);
    console.log(chalk.green(`✓ 已收集 ${Object.keys(variables).length} 个配置变量\n`));
    // ========== 第4步：结果输出和配置保存 ==========
    console.log(chalk.yellow('💾 步骤 4/4: 生成配置计划\n'));
    const spinner = ora('正在生成配置计划...').start();
    try {
        const generator = new ConfigGenerator();
        const configPlan = await generator.generateConfig(toolset, template, variables);
        // 保存配置计划到文件
        const planPath = path.join(process.cwd(), '.meteor-shower', 'config-plan.json');
        await fs.mkdir(path.dirname(planPath), { recursive: true });
        await fs.writeFile(planPath, JSON.stringify(configPlan, null, 2), 'utf-8');
        spinner.succeed('配置计划已生成！');
        // 更新使用量统计
        if (userId) {
            await tierHelper.incrementToolUsage(userId);
        }
        tierHelper.close();
        // 显示摘要信息
        console.log(chalk.cyan('\n📊 配置摘要:'));
        console.log(chalk.gray('━'.repeat(50)));
        console.log(chalk.white(`  工具集:     ${toolset.join(', ')}`));
        console.log(chalk.white(`  模板:       ${template}`));
        console.log(chalk.white(`  变量数量:   ${Object.keys(variables).length}`));
        console.log(chalk.white(`  配置文件:   ${configPlan.operations.length} 个`));
        console.log(chalk.white(`  计划文件:   ${planPath}`));
        console.log(chalk.gray('━'.repeat(50)));
        // 显示下一步指引
        console.log(chalk.cyan('\n🎯 下一步操作:'));
        console.log(chalk.white('  1. 运行 ' + chalk.yellow('ms diff') + ' 查看配置差异'));
        console.log(chalk.white('  2. 运行 ' + chalk.yellow('ms apply') + ' 应用配置'));
        console.log(chalk.white('  3. 运行 ' + chalk.yellow('ms share') + ' 分享配置到云端'));
        console.log('');
    }
    catch (error) {
        spinner.fail('生成配置计划失败');
        console.error(chalk.red('\n❌ 错误详情:'), error);
        throw error;
    }
    return { toolset, template, variables };
}
/**
 * 变量收集函数
 * 根据选择的模板和工具集，收集用户特定的配置变量
 *
 * 变量类型：
 * - projectName: 项目名称，用于个性化配置
 * - persona: AI角色描述，影响工具的行为和响应风格
 *
 * @param template 选择的模板名称
 * @param toolset 选择的工具集数组
 * @returns 收集的变量对象
 */
async function collectVariables(template, toolset) {
    const variables = {};
    // 收集基础变量
    console.log(chalk.gray('  基础配置\n'));
    const { projectName, persona, projectDescription } = await inquirer.prompt([
        {
            type: 'input',
            name: 'projectName',
            message: '项目名称:',
            default: path.basename(process.cwd()),
            validate: (input) => input.length > 0 || '项目名称不能为空'
        },
        {
            type: 'input',
            name: 'projectDescription',
            message: '项目描述:',
            default: (answers) => `${answers.projectName} - AI 辅助开发项目`
        },
        {
            type: 'input',
            name: 'persona',
            message: 'AI 角色描述:',
            default: '你是一名严谨的全栈工程师，擅长编写高质量代码'
        }
    ]);
    variables.projectName = projectName;
    variables.persona = persona;
    variables.projectDescription = projectDescription;
    // 根据不同模板和工具集收集特定的变量
    await collectTemplateSpecificVariables(variables, template);
    await collectToolSpecificVariables(variables, toolset);
    return variables;
}
/**
 * 收集模板特定的变量
 * 根据选择的模板收集额外的配置变量
 *
 * @param variables 变量对象（会被修改）
 * @param template 模板名称
 */
async function collectTemplateSpecificVariables(variables, template) {
    if (template === 'advanced-multi' || template === 'team-collaboration') {
        console.log(chalk.gray('\n  高级模板配置\n'));
        const advanced = await inquirer.prompt([
            {
                type: 'list',
                name: 'primaryLanguage',
                message: '主要编程语言:',
                choices: [
                    'TypeScript',
                    'JavaScript',
                    'Python',
                    'Java',
                    'Go',
                    'Rust',
                    'C#',
                    'PHP',
                    '其他'
                ],
                default: 'TypeScript'
            },
            {
                type: 'list',
                name: 'framework',
                message: '主要框架:',
                choices: [
                    'React',
                    'Vue',
                    'Angular',
                    'Next.js',
                    'Express',
                    'NestJS',
                    'FastAPI',
                    'Spring Boot',
                    'Django',
                    '其他'
                ]
            },
            {
                type: 'confirm',
                name: 'useTypeScript',
                message: '使用 TypeScript?',
                default: true
            },
            {
                type: 'checkbox',
                name: 'techStack',
                message: '技术栈 (可多选):',
                choices: [
                    'Node.js',
                    'React',
                    'Vue',
                    'Express',
                    'MongoDB',
                    'PostgreSQL',
                    'Redis',
                    'Docker'
                ]
            }
        ]);
        Object.assign(variables, advanced);
    }
    if (template.includes('claude')) {
        console.log(chalk.gray('\n  Claude 特定配置\n'));
        const claude = await inquirer.prompt([
            {
                type: 'list',
                name: 'responseStyle',
                message: 'Claude 响应风格:',
                choices: [
                    { name: '简洁 (快速回复)', value: '简洁' },
                    { name: '详细 (完整解释)', value: '详细' },
                    { name: '教学式 (逐步引导)', value: '教学式' },
                    { name: '协作式 (交互讨论)', value: '协作式' }
                ],
                default: '协作式'
            }
        ]);
        variables.responseStyle = claude.responseStyle;
    }
    if (template === 'custom') {
        console.log(chalk.gray('\n  自定义配置\n'));
        console.log(chalk.yellow('  提示: 自定义配置将使用默认值，您可以稍后手动编辑配置文件'));
    }
}
/**
 * 收集工具特定的变量
 * 根据选择的工具集收集每个工具的特定配置
 *
 * @param variables 变量对象（会被修改）
 * @param toolset 工具集数组
 */
async function collectToolSpecificVariables(variables, toolset) {
    // Gemini 特定配置
    if (toolset.includes('gemini')) {
        console.log(chalk.gray('\n  Gemini 配置\n'));
        const gemini = await inquirer.prompt([
            {
                type: 'list',
                name: 'geminiModel',
                message: 'Gemini 模型选择:',
                choices: [
                    { name: 'gemini-2.0-flash-exp (最新实验版)', value: 'gemini-2.0-flash-exp' },
                    { name: 'gemini-pro (稳定版)', value: 'gemini-pro' },
                    { name: 'gemini-pro-vision (视觉支持)', value: 'gemini-pro-vision' }
                ],
                default: 'gemini-2.0-flash-exp'
            },
            {
                type: 'number',
                name: 'temperature',
                message: 'Temperature (0.0-2.0, 推荐0.2):',
                default: 0.2,
                validate: (value) => {
                    if (value < 0 || value > 2)
                        return '请输入 0.0 到 2.0 之间的数字';
                    return true;
                }
            },
            {
                type: 'number',
                name: 'maxTokens',
                message: '最大输出 tokens (1-8192):',
                default: 8192,
                validate: (value) => {
                    if (value < 1 || value > 8192)
                        return '请输入 1 到 8192 之间的数字';
                    return true;
                }
            },
            {
                type: 'confirm',
                name: 'enableMultimodal',
                message: '启用多模态支持 (图片/视频)?',
                default: false
            },
            {
                type: 'confirm',
                name: 'enableCodeOptimization',
                message: '启用代码生成优化?',
                default: true
            }
        ]);
        Object.assign(variables, gemini);
    }
    // Claude 特定配置
    if (toolset.includes('claude')) {
        console.log(chalk.gray('\n  Claude 配置\n'));
        const claude = await inquirer.prompt([
            {
                type: 'list',
                name: 'claudeModel',
                message: 'Claude 模型选择:',
                choices: [
                    { name: 'claude-3-5-sonnet-20241022 (最新)', value: 'claude-3-5-sonnet-20241022' },
                    { name: 'claude-3-opus (最强)', value: 'claude-3-opus' },
                    { name: 'claude-3-sonnet (平衡)', value: 'claude-3-sonnet' },
                    { name: 'claude-3-haiku (快速)', value: 'claude-3-haiku' }
                ],
                default: 'claude-3-5-sonnet-20241022'
            },
            {
                type: 'confirm',
                name: 'enableVision',
                message: '启用 Claude 视觉功能?',
                default: false
            },
            {
                type: 'number',
                name: 'maxTokens',
                message: '最大输出 tokens (1-4096):',
                default: 4000,
                validate: (value) => {
                    if (value < 1 || value > 4096)
                        return '请输入 1 到 4096 之间的数字';
                    return true;
                }
            }
        ]);
        Object.assign(variables, claude);
    }
    // Cursor 特定配置
    if (toolset.includes('cursor')) {
        console.log(chalk.gray('\n  Cursor 配置\n'));
        const cursor = await inquirer.prompt([
            {
                type: 'list',
                name: 'cursorModel',
                message: 'Cursor AI 模型:',
                choices: [
                    { name: 'gpt-4 (推荐)', value: 'gpt-4' },
                    { name: 'gpt-4-turbo (更快)', value: 'gpt-4-turbo' },
                    { name: 'gpt-3.5-turbo (经济)', value: 'gpt-3.5-turbo' },
                    { name: 'claude-3 (支持)', value: 'claude-3' }
                ],
                default: 'gpt-4'
            },
            {
                type: 'confirm',
                name: 'enableComposer',
                message: '启用 Cursor Composer (多文件编辑)?',
                default: true
            },
            {
                type: 'confirm',
                name: 'enableCopilot',
                message: '启用 Tab 补全建议?',
                default: true
            }
        ]);
        Object.assign(variables, cursor);
    }
    // OpenAI 特定配置
    if (toolset.includes('openai')) {
        console.log(chalk.gray('\n  OpenAI 配置\n'));
        const openai = await inquirer.prompt([
            {
                type: 'list',
                name: 'openaiModel',
                message: 'OpenAI 模型选择:',
                choices: [
                    { name: 'gpt-4 (最强)', value: 'gpt-4' },
                    { name: 'gpt-4-turbo (更快更便宜)', value: 'gpt-4-turbo' },
                    { name: 'gpt-4o (多模态)', value: 'gpt-4o' },
                    { name: 'gpt-3.5-turbo (经济)', value: 'gpt-3.5-turbo' }
                ],
                default: 'gpt-4-turbo'
            },
            {
                type: 'number',
                name: 'maxTokens',
                message: '最大输出 tokens (1-128000):',
                default: 4096,
                validate: (value) => {
                    if (value < 1 || value > 128000)
                        return '请输入 1 到 128000 之间的数字';
                    return true;
                }
            },
            {
                type: 'number',
                name: 'temperature',
                message: 'Temperature (0.0-2.0):',
                default: 0.7,
                validate: (value) => {
                    if (value < 0 || value > 2)
                        return '请输入 0.0 到 2.0 之间的数字';
                    return true;
                }
            },
            {
                type: 'confirm',
                name: 'streamResponse',
                message: '启用流式响应?',
                default: true
            }
        ]);
        Object.assign(variables, openai);
    }
    // 代码风格相关配置（所有工具通用）
    console.log(chalk.gray('\n  通用代码风格配置\n'));
    const codeStyle = await inquirer.prompt([
        {
            type: 'list',
            name: 'indentStyle',
            message: '代码缩进风格:',
            choices: [
                { name: '2个空格 (推荐)', value: '2 spaces' },
                { name: '4个空格', value: '4 spaces' },
                { name: 'Tab', value: 'tabs' }
            ],
            default: '2 spaces'
        },
        {
            type: 'confirm',
            name: 'enablePrettier',
            message: '启用 Prettier 格式化?',
            default: true
        },
        {
            type: 'confirm',
            name: 'enableESLint',
            message: '启用 ESLint 检查?',
            default: true
        },
        {
            type: 'confirm',
            name: 'requireTests',
            message: '要求编写单元测试?',
            default: true
        }
    ]);
    Object.assign(variables, codeStyle);
}
/**
 * 根据工具集获取推荐的模板选项
 */
function getTemplateChoices(toolset) {
    const choices = [];
    // 单工具模板
    if (toolset.length === 1) {
        if (toolset.includes('gemini')) {
            choices.push({ name: 'Gemini 基础模板 (推荐)', value: 'gemini-basic' }, { name: 'Gemini 高级模板', value: 'gemini-advanced' });
        }
        if (toolset.includes('claude')) {
            choices.push({ name: 'Claude 基础模板 (推荐)', value: 'claude-basic' }, { name: 'Claude 高级模板', value: 'claude-advanced' });
        }
        if (toolset.includes('cursor')) {
            choices.push({ name: 'Cursor 基础模板 (推荐)', value: 'cursor-basic' }, { name: 'Cursor Pro 模板', value: 'cursor-pro' });
        }
        if (toolset.includes('openai')) {
            choices.push({ name: 'OpenAI 基础模板 (推荐)', value: 'openai-basic' }, { name: 'OpenAI 高级模板', value: 'openai-advanced' });
        }
    }
    else {
        // 多工具组合模板
        choices.push({ name: '多工具基础模板 (推荐)', value: 'multi-basic' }, { name: '多工具高级模板', value: 'advanced-multi' }, { name: '团队协作模板', value: 'team-collaboration' });
    }
    // 始终提供通用选项
    choices.push({ name: '自定义配置', value: 'custom' });
    return choices;
}
