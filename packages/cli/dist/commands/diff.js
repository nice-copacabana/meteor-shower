// Generated by Qoder AI (Model: claude-sonnet-4-20250514) - 2025-10-14
// Task: 实现CLI diff命令实际逻辑
import chalk from 'chalk';
import fs from 'fs/promises';
import path from 'path';
import { createAdapter } from '@meteor-shower/adapters';
export async function diffCommand() {
    console.log(chalk.cyan('🔍 分析配置差异...'));
    try {
        // 读取配置计划
        const planPath = path.join(process.cwd(), '.meteor-shower', 'config-plan.json');
        const planContent = await fs.readFile(planPath, 'utf-8');
        const configPlan = JSON.parse(planContent);
        console.log(chalk.gray(`📄 根据配置计划: ${configPlan.template}`));
        console.log(chalk.gray(`🎯 目标工具: ${configPlan.toolset.join(', ')}`));
        // 对每个工具获取差异
        const allChanges = [];
        for (const tool of configPlan.toolset) {
            const adapter = createAdapter(tool);
            const diffResult = await adapter.plan({
                target: tool,
                dryRun: true,
                variables: configPlan.variables
            });
            allChanges.push(...diffResult.changes);
        }
        // 显示总结
        console.log(chalk.yellow('\n📋 变更摘要:'));
        console.log(chalk.gray(`将创建/修改 ${allChanges.length} 个配置文件`));
        // 显示文件变更
        console.log(chalk.yellow('\n📁 文件变更:'));
        allChanges.forEach((change) => {
            const icon = change.kind === 'create' ? '➕' : change.kind === 'update' ? '🔄' : '❌';
            const color = change.kind === 'create' ? 'green' : change.kind === 'update' ? 'yellow' : 'red';
            console.log(chalk[color](`${icon} ${change.path}`));
        });
        console.log(chalk.gray('\n💡 使用 ms apply 应用这些变更'));
    }
    catch (error) {
        if (error.code === 'ENOENT') {
            console.error(chalk.red('❌ 未找到配置计划文件'));
            console.log(chalk.gray('💡 请先运行 ms init 初始化配置'));
        }
        else {
            console.error(chalk.red('❌ 分析失败:'), error);
        }
    }
}
