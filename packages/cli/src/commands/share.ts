// Generated by Qoder AI (Model: claude-sonnet-4-20250514) - 2025-10-14
// Task: 实现CLI share命令云端上传功能，打包并上传配置模板到Cloud Hub

/**
 * 配置分享命令
 * 负责扫描当前项目的配置文件，打包为模板并分享到云端
 *
 * 核心职责：
 * - 扫描项目中的各种 AI 工具配置文件
 * - 收集模板元数据（名称、描述、标签等）
 * - 打包配置为 JSON 格式的模板文件
 * - 上传模板到 Cloud Hub 云端服务
 * - 检查用户分享配额（企业功能）
 */

import chalk from 'chalk';
import inquirer from 'inquirer';
import fs from 'fs/promises';
import path from 'path';
import os from 'os';
import { FileOperations } from '@meteor-shower/utils';
import Database from 'better-sqlite3';
import { UserTierManager } from '@meteor-shower/enterprise/tier/tier-manager.js';

/**
 * 模板分享选项
 */
export interface ShareOptions {
  public?: boolean;              // 是否公开分享
  skipUpload?: boolean;          // 跳过上传，只打包
}

/**
 * 配置文件信息
 */
interface ConfigFileInfo {
  file: string;                  // 文件路径
  found: boolean;                // 是否找到
  content?: string;              // 文件内容
  tool?: string;                 // 所属工具
}

/**
 * 模板包数据
 */
interface TemplatePackage {
  name: string;                  // 模板名称
  description: string;           // 模板描述
  version: string;               // 模板版本
  author?: string;               // 作者
  tags: string[];                // 标签
  configs: ConfigFileInfo[];     // 配置文件列表
  createdAt: string;             // 创建时间
}

/**
 * 分享命令
 * 打包当前项目的配置文件并上传到 Cloud Hub
 */
/**
 * 分享命令主函数
 * 
 * 业务流程：
 * 1. 检查配额 - 验证用户是否有分享权限（企业功能）
 * 2. 扫描配置 - 扫描项目中的所有配置文件
 * 3. 收集信息 - 让用户输入模板名称、描述、标签等
 * 4. 读取内容 - 读取所有找到的配置文件内容
 * 5. 创建模板包 - 将配置和元数据打包为 JSON
 * 6. 本地保存 - 保存到 .meteor-shower/templates/ 目录
 * 7. 云端上传 - 将模板上传到 Cloud Hub（可选）
 *
 * @param options 分享选项
 */
  console.log(chalk.cyan('📦 打包当前配置为模板...'));
  
  // ========== 检查用户分享配额 ==========
  // 如果用户已登录，检查是否超出分享配额
  const userId = process.env.METEOR_USER_ID;
  if (userId) {
    const quotaCheck = await checkShareQuota(userId);
    if (!quotaCheck.allowed) {
      console.log(chalk.red(`\n❌ 分享配额限制: ${quotaCheck.reason}`));
      console.log(chalk.yellow('\n💡 提示:'));
      console.log(chalk.gray(`   当前层级: ${quotaCheck.tier}`));
      console.log(chalk.gray(`   本月已使用: ${quotaCheck.current}/${quotaCheck.limit}`));
      console.log(chalk.gray('   运行 ms account upgrade 升级以获取更多配额\n'));
      
      // 显示升级建议
      const suggestion = quotaCheck.suggestion;
      if (suggestion && suggestion.shouldUpgrade) {
        console.log(chalk.cyan(`   建议升级到: ${suggestion.suggestedTier}`));
      }
      return;
    }
    
    // 显示配额信息
    if (quotaCheck.remaining !== -1) {
      console.log(chalk.gray(`  本月剩余分享次数: ${quotaCheck.remaining}\n`));
    }
  }
  
  const fileOps = new FileOperations();
  const projectRoot = process.cwd();
  const homeDir = os.homedir();

  // ========== 步骤1: 扫描配置文件 ==========
  // 在项目中扫描 Gemini/Claude/Cursor/OpenAI 的配置文件
  try {
    console.log(chalk.gray('🔍 扫描项目配置文件...'));
    const configs = await scanConfigFiles(projectRoot, homeDir);
    
    const foundConfigs = configs.filter(c => c.found);
    if (foundConfigs.length === 0) {
      console.log(chalk.red('❌ 未找到任何配置文件，请先运行 ms init'));
      return;
    }

    // 显示发现的配置
    console.log(chalk.yellow('\n📋 发现的配置:'));
    configs.forEach(config => {
      const icon = config.found ? '✅' : '❌';
      const color = config.found ? 'green' : 'gray';
      console.log(chalk[color](`  ${icon} ${config.file} ${config.tool ? `(${config.tool})` : ''}`));
    });

    // ========== 步骤2: 收集模板元数据 ==========
    // 让用户输入模板的名称、描述、标签等信息
    console.log(chalk.cyan('\n📝 填写模板信息:'));
    const { templateName, description, version, tags, author } = await inquirer.prompt([
      { 
        type: 'input', 
        name: 'templateName', 
        message: '模板名称:', 
        default: 'my-config',
        validate: (input) => input.trim().length > 0 ? true : '模板名称不能为空'
      },
      { 
        type: 'input', 
        name: 'description', 
        message: '模板描述:', 
        default: '我的 AI 工具配置' 
      },
      {
        type: 'input',
        name: 'version',
        message: '模板版本:',
        default: '1.0.0'
      },
      {
        type: 'input',
        name: 'tags',
        message: '标签 (逗号分隔):',
        default: 'ai,coding,assistant',
        filter: (input) => input.split(',').map((t: string) => t.trim())
      },
      {
        type: 'input',
        name: 'author',
        message: '作者:',
        default: os.userInfo().username
      }
    ]);

    // ========== 步骤3: 读取配置文件内容 ==========
    // 读取每个找到的配置文件的实际内容
    console.log(chalk.gray('\n📚 读取配置文件内容...'));
    for (const config of foundConfigs) {
      try {
        const fullPath = config.file.startsWith('~/') 
          ? path.join(homeDir, config.file.substring(2))
          : path.join(projectRoot, config.file);
        config.content = await fs.readFile(fullPath, 'utf-8');
      } catch (error) {
        console.warn(chalk.yellow(`  ⚠️ 读取失败: ${config.file}`));
      }
    }

    // ========== 步骤4: 创建模板包 ==========
    // 将元数据和配置文件内容打包为 JSON 格式
    const templatePackage: TemplatePackage = {
      name: templateName,
      description,
      version,
      author,
      tags,
      configs: foundConfigs.filter(c => c.content),
      createdAt: new Date().toISOString()
    };

    // ========== 步骤5: 本地保存 ==========
    // 将模板保存到 .meteor-shower/templates/ 目录
    const outputDir = path.join(projectRoot, '.meteor-shower', 'templates');
    await fs.mkdir(outputDir, { recursive: true });
    const outputPath = path.join(outputDir, `${templateName}.json`);
    await fs.writeFile(outputPath, JSON.stringify(templatePackage, null, 2), 'utf-8');
    
    console.log(chalk.green(`\n✅ 模板已保存到: ${outputPath}`));

    // ========== 步骤6: 云端上传 ==========
    // 如果用户同意，将模板上传到 Cloud Hub
    if (!options.skipUpload) {
      const { shouldUpload } = await inquirer.prompt([
        {
          type: 'confirm',
          name: 'shouldUpload',
          message: '是否上传到 Cloud Hub？',
          default: true
        }
      ]);

      if (shouldUpload) {
        console.log(chalk.cyan('\n🚀 上传到 Cloud Hub...'));
        await uploadToCloudHub(templatePackage, options.public || false);
      }
    }

    // 显示成功信息
    console.log(chalk.green('\n🎉 模板打包完成！'));
    console.log(chalk.gray(`模板名: ${templateName}`));
    console.log(chalk.gray(`描述: ${description}`));
    console.log(chalk.gray(`版本: ${version}`));
    console.log(chalk.gray(`配置数量: ${templatePackage.configs.length}`));
    console.log(chalk.gray('\n💡 使用 ms init 可以重新应用此模板'));
    
  } catch (error: any) {
    console.error(chalk.red(`\n❌ 打包失败: ${error.message}`));
    throw error;
  }
}

/**
 * 扫描配置文件
 * 检测项目中是否存在各种 AI 工具的配置文件
 *
 * 支持的配置文件：
 * - Gemini: ~/.gemini/GEMINI.md, ~/.gemini/settings.json, .gemini/commands/plan.toml
 * - Claude: ~/.claude/claude.json, CLAUDE.md, CLAUDE.local.md
 * - Cursor: .cursorrules, .cursor/rules.txt, CURSOR.local.md
 * - OpenAI: AGENTS.md, .env.example, OPENAI.local.md
 *
 * @param projectRoot 项目根目录
 * @param homeDir 用户主目录
 * @returns 配置文件列表，标记是否存在
 */
async function scanConfigFiles(projectRoot: string, homeDir: string): Promise<ConfigFileInfo[]> {
  // 定义需要扫描的配置文件模式
  const configPatterns: ConfigFileInfo[] = [
    // Gemini
    { file: '~/.gemini/GEMINI.md', found: false, tool: 'gemini' },
    { file: '~/.gemini/settings.json', found: false, tool: 'gemini' },
    { file: '.gemini/commands/plan.toml', found: false, tool: 'gemini' },
    
    // Claude
    { file: '~/.claude/claude.json', found: false, tool: 'claude' },
    { file: './CLAUDE.md', found: false, tool: 'claude' },
    { file: './CLAUDE.local.md', found: false, tool: 'claude' },
    
    // Cursor
    { file: './.cursorrules', found: false, tool: 'cursor' },
    { file: './.cursor/rules.txt', found: false, tool: 'cursor' },
    { file: './CURSOR.local.md', found: false, tool: 'cursor' },
    
    // OpenAI
    { file: './AGENTS.md', found: false, tool: 'openai' },
    { file: './.env.example', found: false, tool: 'openai' },
    { file: './OPENAI.local.md', found: false, tool: 'openai' }
  ];

  // 检测每个文件是否存在，标记 found 状态
  for (const config of configPatterns) {
    const fullPath = config.file.startsWith('~/') 
      ? path.join(homeDir, config.file.substring(2))
      : path.join(projectRoot, config.file);
    
    try {
      await fs.access(fullPath);
      config.found = true;
    } catch {
      config.found = false;
    }
  }

  return configPatterns;
}

/**
 * 上传模板到 Cloud Hub
 * 通过 HTTP API 将模板包上传到云端服务
 *
 * 工作流程：
 * 1. 检查 API 密钥是否配置
 * 2. 构造 HTTP 请求（POST /templates）
 * 3. 发送模板数据
 * 4. 处理响应和错误
 *
 * 注意：当前为模拟实现，TODO 中有实际 HTTP 请求代码
 *
 * @param templatePackage 模板包数据
 * @param isPublic 是否公开分享
 */
async function uploadToCloudHub(templatePackage: TemplatePackage, isPublic: boolean): Promise<void> {
  try {
    // 检查 API 配置
    const apiEndpoint = process.env.METEOR_CLOUD_API || 'https://api.meteor-shower.dev';
    const apiKey = process.env.METEOR_API_KEY;

    if (!apiKey) {
      console.log(chalk.yellow('\n⚠️ 未设置 API 密钥，跳过上传'));
      console.log(chalk.gray('提示: 设置 METEOR_API_KEY 环境变量以启用云端同步'));
      return;
    }

    // TODO: 实现实际的 HTTP 请求
    // const response = await fetch(`${apiEndpoint}/templates`, {
    //   method: 'POST',
    //   headers: {
    //     'Content-Type': 'application/json',
    //     'Authorization': `Bearer ${apiKey}`
    //   },
    //   body: JSON.stringify({
    //     ...templatePackage,
    //     public: isPublic
    //   })
    // });
    //
    // if (!response.ok) {
    //   throw new Error(`上传失败: ${response.statusText}`);
    // }

    // 模拟上传过程（实际应调用 fetch 或 axios）
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    console.log(chalk.green('✅ 上传成功！'));
    console.log(chalk.gray(`模板 ID: ${templatePackage.name}-${Date.now()}`));
    console.log(chalk.gray(`可见性: ${isPublic ? '公开' : '私有'}'));
    console.log(chalk.gray(`分享链接: ${apiEndpoint}/templates/${templatePackage.name}`));
    
  } catch (error: any) {
    console.error(chalk.red(`❌ 上传失败: ${error.message}`));
    console.log(chalk.yellow('模板已保存到本地，可以稍后重试上传'));
  }
}

/**
 * 检查分享配额
 * 验证用户是否还有分享配额（基于用户层级）
 *
 * 配额检查逻辑：
 * - 读取用户层级和本月使用量
 * - 对比层级限制
 * - 返回是否允许分享和剩余次数
 *
 * @param userId 用户ID
 * @returns 配额检查结果
 */
async function checkShareQuota(userId: string): Promise<{
  allowed: boolean;
  reason?: string;
  current: number;
  limit: number;
  remaining: number;
  tier?: string;
  suggestion?: any;
}> {
  try {
    const dbPath = process.env.METEOR_DB_PATH || path.join(os.homedir(), '.meteor-shower', 'meteor.db');
    
    // 检查数据库是否存在
    try {
      await fs.access(dbPath);
    } catch {
      // 数据库不存在，跳过配额检查
      return { allowed: true, current: 0, limit: -1, remaining: -1 };
    }

    const db = new Database(dbPath);
    const tierManager = new UserTierManager(db);

    const quotaResult = tierManager.checkShareQuota(userId);
    const userQuotas = tierManager.getUserQuotas(userId);
    const suggestion = tierManager.getUpgradeSuggestion(userId);

    db.close();

    return {
      allowed: quotaResult.allowed,
      reason: quotaResult.reason,
      current: quotaResult.current,
      limit: quotaResult.limit,
      remaining: quotaResult.remaining,
      tier: userQuotas?.tier,
      suggestion
    };
  } catch (error) {
    console.warn(chalk.yellow('⚠️  无法检查配额，继续执行...'));
    return { allowed: true, current: 0, limit: -1, remaining: -1 };
  }
}
