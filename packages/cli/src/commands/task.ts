// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-17
// Task: 实现M8任务管理CLI命令，包含任务创建、提交、取消、查看等核心功能

/**
 * Task命令 - 任务协调管理
 * 
 * 提供任务的创建、提交、取消、查看等功能
 */

import { Command } from 'commander';
import inquirer from 'inquirer';
import chalk from 'chalk';
import ora from 'ora';
import Table from 'cli-table3';
import * as fs from 'fs-extra';
import * as path from 'path';
import Database from 'better-sqlite3';
import { TaskCoordinator, TaskPriority, CreateTaskParams } from '@meteor-shower/task-coordination';
import { initializeDatabase as initializeM8Database } from '@meteor-shower/task-coordination';

// 默认数据库路径
const DEFAULT_DB_PATH = path.join(process.cwd(), '.meteor-shower', 'tasks.db');

/**
 * 获取TaskCoordinator实例
 */
function getTaskCoordinator(): TaskCoordinator {
  fs.ensureDirSync(path.dirname(DEFAULT_DB_PATH));
  const db = new Database(DEFAULT_DB_PATH);
  initializeM8Database(db);
  return new TaskCoordinator(db);
}

/**
 * 获取当前用户ID（临时实现）
 */
function getCurrentUserId(): string {
  // TODO: 从用户认证系统获取
  return 'demo-user-001';
}

/**
 * task命令主入口
 */
export function createTaskCommand(): Command {
  const taskCmd = new Command('task')
    .description('任务协调管理');

  // task create - 创建任务
  taskCmd
    .command('create')
    .description('创建新任务')
    .option('-i, --interactive', '交互式创建', true)
    .option('--title <title>', '任务标题')
    .option('--desc <description>', '任务描述')
    .option('--tool <tool>', '使用的工具名称')
    .option('--priority <priority>', '优先级 (LOW|MEDIUM|HIGH|URGENT)', 'MEDIUM')
    .option('--timeout <minutes>', '超时时间（分钟）', '60')
    .action(async (options) => {
      try {
        if (options.interactive && !options.title) {
          await createTaskInteractive();
        } else {
          await createTaskDirect(options);
        }
      } catch (error: any) {
        console.error(chalk.red('✗ 创建失败:'), error.message);
        process.exit(1);
      }
    });

  // task list - 列出任务
  taskCmd
    .command('list')
    .description('列出任务')
    .option('-s, --status <status>', '按状态筛选 (DRAFT|SUBMITTED|RUNNING|COMPLETED|FAILED|CANCELLED)')
    .option('-p, --priority <priority>', '按优先级筛选 (LOW|MEDIUM|HIGH|URGENT)')
    .option('--page <number>', '页码', '1')
    .option('--size <number>', '每页数量', '20')
    .action(async (options) => {
      try {
        await listTasks(options);
      } catch (error: any) {
        console.error(chalk.red('✗ 查询失败:'), error.message);
        process.exit(1);
      }
    });

  // task show - 显示任务详情
  taskCmd
    .command('show <taskId>')
    .description('显示任务详细信息')
    .option('-h, --history', '显示执行历史')
    .option('-d, --dependencies', '显示依赖关系')
    .action(async (taskId, options) => {
      try {
        await showTask(taskId, options);
      } catch (error: any) {
        console.error(chalk.red('✗ 查询失败:'), error.message);
        process.exit(1);
      }
    });

  // task submit - 提交任务
  taskCmd
    .command('submit <taskId>')
    .description('提交任务执行')
    .action(async (taskId) => {
      try {
        await submitTask(taskId);
      } catch (error: any) {
        console.error(chalk.red('✗ 提交失败:'), error.message);
        process.exit(1);
      }
    });

  // task cancel - 取消任务
  taskCmd
    .command('cancel <taskId>')
    .description('取消任务')
    .option('-y, --yes', '跳过确认')
    .action(async (taskId, options) => {
      try {
        await cancelTask(taskId, options);
      } catch (error: any) {
        console.error(chalk.red('✗ 取消失败:'), error.message);
        process.exit(1);
      }
    });

  // task add-dep - 添加任务依赖
  taskCmd
    .command('add-dep <taskId> <dependsOnTaskId>')
    .description('添加任务依赖关系')
    .action(async (taskId, dependsOnTaskId) => {
      try {
        await addDependency(taskId, dependsOnTaskId);
      } catch (error: any) {
        console.error(chalk.red('✗ 添加依赖失败:'), error.message);
        process.exit(1);
      }
    });

  // task deps - 查看任务依赖
  taskCmd
    .command('deps <taskId>')
    .description('查看任务依赖关系')
    .action(async (taskId) => {
      try {
        await showDependencies(taskId);
      } catch (error: any) {
        console.error(chalk.red('✗ 查询失败:'), error.message);
        process.exit(1);
      }
    });

  return taskCmd;
}

/**
 * 交互式创建任务
 */
async function createTaskInteractive(): Promise<void> {
  console.log(chalk.cyan.bold('\n📋 创建新任务\n'));

  const answers = await inquirer.prompt([
    {
      type: 'input',
      name: 'title',
      message: '任务标题:',
      validate: (input) => input.trim().length > 0 || '标题不能为空'
    },
    {
      type: 'input',
      name: 'description',
      message: '任务描述:'
    },
    {
      type: 'input',
      name: 'toolName',
      message: '使用的工具名称:',
      default: 'meteor-shower',
      validate: (input) => input.trim().length > 0 || '工具名称不能为空'
    },
    {
      type: 'list',
      name: 'priority',
      message: '优先级:',
      choices: [
        { name: '🔵 低 (LOW)', value: 'LOW' },
        { name: '🟢 中 (MEDIUM)', value: 'MEDIUM' },
        { name: '🟡 高 (HIGH)', value: 'HIGH' },
        { name: '🔴 紧急 (URGENT)', value: 'URGENT' }
      ],
      default: 'MEDIUM'
    },
    {
      type: 'number',
      name: 'timeoutMinutes',
      message: '超时时间（分钟）:',
      default: 60,
      validate: (input) => input > 0 || '超时时间必须大于0'
    }
  ]);

  const spinner = ora('正在创建任务...').start();

  const coordinator = getTaskCoordinator();
  const userId = getCurrentUserId();

  const params: CreateTaskParams = {
    title: answers.title,
    description: answers.description,
    toolName: answers.toolName,
    priority: answers.priority as TaskPriority,
    timeoutMinutes: answers.timeoutMinutes,
    userId
  };

  const task = coordinator.createTask(params);

  spinner.succeed(chalk.green('任务创建成功！'));

  console.log(chalk.cyan('\n任务信息:'));
  console.log(chalk.gray('─'.repeat(50)));
  console.log(chalk.white('ID:       ') + chalk.yellow(task.id));
  console.log(chalk.white('标题:     ') + task.title);
  console.log(chalk.white('状态:     ') + formatStatus(task.status));
  console.log(chalk.white('优先级:   ') + formatPriority(task.priority));
  console.log(chalk.gray('─'.repeat(50)));

  console.log(chalk.cyan('\n💡 提示: 使用以下命令提交任务:'));
  console.log(chalk.white(`   meteor-shower task submit ${task.id}\n`));
}

/**
 * 直接创建任务（非交互式）
 */
async function createTaskDirect(options: any): Promise<void> {
  if (!options.title || !options.tool) {
    console.error(chalk.red('✗ 错误: --title 和 --tool 参数是必需的'));
    process.exit(1);
  }

  const coordinator = getTaskCoordinator();
  const userId = getCurrentUserId();

  const params: CreateTaskParams = {
    title: options.title,
    description: options.desc,
    toolName: options.tool,
    priority: options.priority as TaskPriority,
    timeoutMinutes: parseInt(options.timeout),
    userId
  };

  const task = coordinator.createTask(params);

  console.log(chalk.green('✓ 任务创建成功'));
  console.log(chalk.white('任务ID: ') + chalk.yellow(task.id));
}

/**
 * 列出任务
 */
async function listTasks(options: any): Promise<void> {
  const coordinator = getTaskCoordinator();
  const userId = getCurrentUserId();

  const { tasks, total } = coordinator.listUserTasks(userId, {
    status: options.status,
    priority: options.priority,
    page: parseInt(options.page),
    pageSize: parseInt(options.size)
  });

  if (tasks.length === 0) {
    console.log(chalk.yellow('\n暂无任务'));
    return;
  }

  console.log(chalk.cyan.bold(`\n📋 任务列表 (共 ${total} 个任务)\n`));

  const table = new Table({
    head: ['ID', '标题', '状态', '优先级', '工具', '创建时间'].map(h => chalk.cyan.bold(h)),
    colWidths: [38, 30, 12, 10, 15, 20]
  });

  for (const task of tasks) {
    table.push([
      task.id.substring(0, 8) + '...',
      task.title.length > 28 ? task.title.substring(0, 25) + '...' : task.title,
      formatStatus(task.status),
      formatPriority(task.priority),
      task.tool_name,
      new Date(task.created_at).toLocaleString('zh-CN')
    ]);
  }

  console.log(table.toString());

  const page = parseInt(options.page);
  const pageSize = parseInt(options.size);
  const totalPages = Math.ceil(total / pageSize);

  if (totalPages > 1) {
    console.log(chalk.gray(`\n第 ${page}/${totalPages} 页`));
  }

  console.log(chalk.cyan('\n💡 提示: 使用 meteor-shower task show <ID> 查看任务详情\n'));
}

/**
 * 显示任务详情
 */
async function showTask(taskId: string, options: any): Promise<void> {
  const coordinator = getTaskCoordinator();
  const task = coordinator.getTaskById(taskId);

  if (!task) {
    console.error(chalk.red(`✗ 任务 ${taskId} 不存在`));
    process.exit(1);
  }

  console.log(chalk.cyan.bold('\n📋 任务详情\n'));
  console.log(chalk.gray('─'.repeat(60)));
  console.log(chalk.white('ID:           ') + chalk.yellow(task.id));
  console.log(chalk.white('标题:         ') + task.title);
  console.log(chalk.white('描述:         ') + (task.description || chalk.gray('无')));
  console.log(chalk.white('状态:         ') + formatStatus(task.status));
  console.log(chalk.white('优先级:       ') + formatPriority(task.priority));
  console.log(chalk.white('工具:         ') + task.tool_name);
  console.log(chalk.white('配置ID:       ') + (task.config_id || chalk.gray('无')));
  console.log(chalk.white('创建时间:     ') + new Date(task.created_at).toLocaleString('zh-CN'));

  if (task.started_at) {
    console.log(chalk.white('开始时间:     ') + new Date(task.started_at).toLocaleString('zh-CN'));
  }

  if (task.completed_at) {
    console.log(chalk.white('完成时间:     ') + new Date(task.completed_at).toLocaleString('zh-CN'));
    const duration = task.completed_at - task.started_at!;
    console.log(chalk.white('执行时长:     ') + formatDuration(duration));
  }

  console.log(chalk.white('超时时间:     ') + new Date(task.timeout_at).toLocaleString('zh-CN'));

  if (task.result) {
    console.log(chalk.white('结果:         ') + chalk.green(task.result));
  }

  if (task.error_message) {
    console.log(chalk.white('错误信息:     ') + chalk.red(task.error_message));
  }

  console.log(chalk.gray('─'.repeat(60)));

  // 显示依赖关系
  if (options.dependencies) {
    const deps = coordinator.getDependencies(taskId);
    if (deps.length > 0) {
      console.log(chalk.cyan.bold('\n🔗 依赖任务:\n'));
      for (const dep of deps) {
        const depTask = coordinator.getTaskById(dep.depends_on_task_id);
        console.log(chalk.white('  → ') + (depTask ? `${depTask.title} (${formatStatus(depTask.status)})` : dep.depends_on_task_id));
      }
    }
  }

  // 显示执行历史
  if (options.history) {
    const history = coordinator.getExecutionHistory(taskId);
    if (history.length > 0) {
      console.log(chalk.cyan.bold('\n📊 执行历史:\n'));
      const historyTable = new Table({
        head: ['尝试次数', '结果', '执行时长', '创建时间'].map(h => chalk.cyan.bold(h))
      });

      for (const exec of history) {
        historyTable.push([
          `#${exec.attempt}`,
          exec.result ? chalk.green('成功') : chalk.red('失败'),
          exec.execution_time ? formatDuration(exec.execution_time) : chalk.gray('N/A'),
          new Date(exec.created_at).toLocaleString('zh-CN')
        ]);
      }

      console.log(historyTable.toString());
    }
  }

  console.log();
}

/**
 * 提交任务
 */
async function submitTask(taskId: string): Promise<void> {
  const coordinator = getTaskCoordinator();
  const userId = getCurrentUserId();

  const spinner = ora('正在提交任务...').start();

  try {
    coordinator.submitTask(taskId, userId);
    spinner.succeed(chalk.green('任务提交成功！'));

    // 检查依赖是否满足
    const depsMet = coordinator.checkDependenciesMet(taskId);
    if (!depsMet) {
      console.log(chalk.yellow('\n⚠️  警告: 任务依赖尚未全部完成，任务将等待依赖完成后执行'));
    } else {
      console.log(chalk.cyan('\n✓ 所有依赖已满足，任务已进入待执行队列'));
    }
  } catch (error: any) {
    spinner.fail(chalk.red('提交失败'));
    throw error;
  }
}

/**
 * 取消任务
 */
async function cancelTask(taskId: string, options: any): Promise<void> {
  const coordinator = getTaskCoordinator();
  const userId = getCurrentUserId();

  if (!options.yes) {
    const { confirmed } = await inquirer.prompt([{
      type: 'confirm',
      name: 'confirmed',
      message: `确认要取消任务 ${taskId.substring(0, 8)}... 吗？`,
      default: false
    }]);

    if (!confirmed) {
      console.log(chalk.yellow('已取消操作'));
      return;
    }
  }

  const spinner = ora('正在取消任务...').start();

  try {
    coordinator.cancelTask(taskId, userId);
    spinner.succeed(chalk.green('任务已取消'));
  } catch (error: any) {
    spinner.fail(chalk.red('取消失败'));
    throw error;
  }
}

/**
 * 添加任务依赖
 */
async function addDependency(taskId: string, dependsOnTaskId: string): Promise<void> {
  const coordinator = getTaskCoordinator();

  // 验证两个任务都存在
  const task = coordinator.getTaskById(taskId);
  const depTask = coordinator.getTaskById(dependsOnTaskId);

  if (!task) {
    console.error(chalk.red(`✗ 任务 ${taskId} 不存在`));
    process.exit(1);
  }

  if (!depTask) {
    console.error(chalk.red(`✗ 依赖任务 ${dependsOnTaskId} 不存在`));
    process.exit(1);
  }

  const spinner = ora('正在添加依赖关系...').start();

  try {
    coordinator.addDependency(taskId, dependsOnTaskId);
    spinner.succeed(chalk.green('依赖关系添加成功'));

    console.log(chalk.cyan('\n依赖关系:'));
    console.log(chalk.white(`  ${task.title} → ${depTask.title}`));
    console.log();
  } catch (error: any) {
    spinner.fail(chalk.red('添加失败'));
    throw error;
  }
}

/**
 * 显示任务依赖
 */
async function showDependencies(taskId: string): Promise<void> {
  const coordinator = getTaskCoordinator();
  const task = coordinator.getTaskById(taskId);

  if (!task) {
    console.error(chalk.red(`✗ 任务 ${taskId} 不存在`));
    process.exit(1);
  }

  const deps = coordinator.getDependencies(taskId);

  console.log(chalk.cyan.bold(`\n🔗 任务依赖: ${task.title}\n`));

  if (deps.length === 0) {
    console.log(chalk.gray('  该任务没有依赖项\n'));
    return;
  }

  const table = new Table({
    head: ['依赖任务ID', '任务标题', '状态', '创建时间'].map(h => chalk.cyan.bold(h)),
    colWidths: [38, 30, 12, 20]
  });

  for (const dep of deps) {
    const depTask = coordinator.getTaskById(dep.depends_on_task_id);
    if (depTask) {
      table.push([
        depTask.id.substring(0, 8) + '...',
        depTask.title.length > 28 ? depTask.title.substring(0, 25) + '...' : depTask.title,
        formatStatus(depTask.status),
        new Date(dep.created_at).toLocaleString('zh-CN')
      ]);
    }
  }

  console.log(table.toString());

  const depsMet = coordinator.checkDependenciesMet(taskId);
  if (depsMet) {
    console.log(chalk.green('\n✓ 所有依赖已满足\n'));
  } else {
    console.log(chalk.yellow('\n⚠️  部分依赖尚未完成\n'));
  }
}

/**
 * 格式化状态
 */
function formatStatus(status: string): string {
  const statusMap: Record<string, { icon: string; color: any }> = {
    DRAFT: { icon: '📝', color: chalk.gray },
    SUBMITTED: { icon: '📤', color: chalk.blue },
    RUNNING: { icon: '⚙️', color: chalk.cyan },
    COMPLETED: { icon: '✅', color: chalk.green },
    REVIEWING: { icon: '👀', color: chalk.magenta },
    APPROVED: { icon: '✔️', color: chalk.green },
    REJECTED: { icon: '❌', color: chalk.red },
    CANCELLED: { icon: '🚫', color: chalk.yellow },
    FAILED: { icon: '💥', color: chalk.red }
  };

  const statusInfo = statusMap[status] || { icon: '❓', color: chalk.white };
  return statusInfo.color(`${statusInfo.icon} ${status}`);
}

/**
 * 格式化优先级
 */
function formatPriority(priority: string): string {
  const priorityMap: Record<string, { icon: string; color: any }> = {
    LOW: { icon: '🔵', color: chalk.blue },
    MEDIUM: { icon: '🟢', color: chalk.green },
    HIGH: { icon: '🟡', color: chalk.yellow },
    URGENT: { icon: '🔴', color: chalk.red }
  };

  const priorityInfo = priorityMap[priority] || { icon: '⚪', color: chalk.white };
  return priorityInfo.color(`${priorityInfo.icon} ${priority}`);
}

/**
 * 格式化时长
 */
function formatDuration(ms: number): string {
  const seconds = Math.floor(ms / 1000);
  const minutes = Math.floor(seconds / 60);
  const hours = Math.floor(minutes / 60);

  if (hours > 0) {
    return `${hours}小时${minutes % 60}分钟`;
  } else if (minutes > 0) {
    return `${minutes}分钟${seconds % 60}秒`;
  } else {
    return `${seconds}秒`;
  }
}
