// Generated by Qoder AI (Model: claude-sonnet-4-20250514) - 2025-10-14
// Task: M6 Phase1 - 集成用户层级检查到CLI命令中 - account命令

import chalk from 'chalk';
import inquirer from 'inquirer';
import Database from 'better-sqlite3';
import path from 'path';
import os from 'os';
import Table from 'cli-table3';
import { UserTierManager } from '@meteor-shower/enterprise/tier/tier-manager.js';
import { UserTier } from '@meteor-shower/enterprise/database/schema.js';

/**
 * 账户命令选项
 */
export interface AccountOptions {
  action?: 'info' | 'quota' | 'upgrade' | 'compare';
}

/**
 * 账户管理命令
 * 查看用户信息、配额、升级建议
 */
export async function accountCommand(options: AccountOptions = {}) {
  const userId = process.env.METEOR_USER_ID;
  
  if (!userId) {
    console.log(chalk.red('\n❌ 未登录'));
    console.log(chalk.gray('提示: 设置 METEOR_USER_ID 环境变量或运行 ms login'));
    console.log(chalk.gray('示例: export METEOR_USER_ID=your-user-id\n'));
    return;
  }

  try {
    const dbPath = process.env.METEOR_DB_PATH || path.join(os.homedir(), '.meteor-shower', 'meteor.db');
    const db = new Database(dbPath);
    const tierManager = new UserTierManager(db);

    // 如果没有指定action，显示菜单
    let action = options.action;
    if (!action) {
      const { selectedAction } = await inquirer.prompt([
        {
          type: 'list',
          name: 'selectedAction',
          message: '选择操作:',
          choices: [
            { name: '📊 查看账户信息', value: 'info' },
            { name: '📈 查看配额使用情况', value: 'quota' },
            { name: '⬆️  升级层级', value: 'upgrade' },
            { name: '🔍 对比不同层级', value: 'compare' }
          ]
        }
      ]);
      action = selectedAction;
    }

    switch (action) {
      case 'info':
        await showAccountInfo(tierManager, userId);
        break;
      case 'quota':
        await showQuotaInfo(tierManager, userId);
        break;
      case 'upgrade':
        await showUpgradeInfo(tierManager, userId);
        break;
      case 'compare':
        await showTierComparison(tierManager);
        break;
      default:
        console.log(chalk.red('未知操作'));
    }

    db.close();
  } catch (error: any) {
    console.error(chalk.red(`\n❌ 错误: ${error.message}`));
  }
}

/**
 * 显示账户信息
 */
async function showAccountInfo(tierManager: UserTierManager, userId: string): Promise<void> {
  console.log(chalk.cyan('\n📊 账户信息\n'));

  const quotas = tierManager.getUserQuotas(userId);
  if (!quotas) {
    console.log(chalk.red('无法获取用户信息'));
    return;
  }

  console.log(chalk.white(`用户ID:    ${userId}`));
  console.log(chalk.white(`当前层级:  ${getTierDisplayName(quotas.tier)}`));
  console.log('');

  // 配额摘要表格
  const table = new Table({
    head: [chalk.cyan('配额类型'), chalk.cyan('已使用'), chalk.cyan('总限额'), chalk.cyan('剩余')],
    colWidths: [20, 15, 15, 15]
  });

  table.push(
    [
      'Templates',
      quotas.templates.current,
      quotas.templates.limit === -1 ? '无限' : quotas.templates.limit,
      quotas.templates.remaining === -1 ? '无限' : quotas.templates.remaining
    ],
    [
      'Configs',
      quotas.configs.current,
      quotas.configs.limit === -1 ? '无限' : quotas.configs.limit,
      quotas.configs.remaining === -1 ? '无限' : quotas.configs.remaining
    ],
    [
      'Shares (本月)',
      quotas.shares.current,
      quotas.shares.limit === -1 ? '无限' : quotas.shares.limit,
      quotas.shares.remaining === -1 ? '无限' : quotas.shares.remaining
    ]
  );

  console.log(table.toString());

  // 升级建议
  const suggestion = tierManager.getUpgradeSuggestion(userId);
  if (suggestion.shouldUpgrade) {
    console.log(chalk.yellow('\n💡 升级建议:'));
    suggestion.reasons.forEach(reason => {
      console.log(chalk.gray(`   • ${reason}`));
    });
    if (suggestion.suggestedTier) {
      console.log(chalk.cyan(`\n   建议升级到: ${getTierDisplayName(suggestion.suggestedTier)}`));
      console.log(chalk.gray('   运行 ms account upgrade 查看升级选项\n'));
    }
  } else {
    console.log(chalk.green('\n✅ 当前配额充足\n'));
  }
}

/**
 * 显示配额详情
 */
async function showQuotaInfo(tierManager: UserTierManager, userId: string): Promise<void> {
  console.log(chalk.cyan('\n📈 配额使用情况\n'));

  const quotas = tierManager.getUserQuotas(userId);
  if (!quotas) {
    console.log(chalk.red('无法获取配额信息'));
    return;
  }

  // Templates配额
  console.log(chalk.yellow('📄 Templates:'));
  console.log(chalk.gray(`   已使用: ${quotas.templates.current}`));
  console.log(chalk.gray(`   总限额: ${quotas.templates.limit === -1 ? '无限' : quotas.templates.limit}`));
  if (quotas.templates.limit !== -1) {
    const percentage = (quotas.templates.current / quotas.templates.limit) * 100;
    const bar = generateProgressBar(percentage);
    console.log(chalk.gray(`   进度:   ${bar} ${percentage.toFixed(1)}%`));
  }
  console.log('');

  // Configs配额
  console.log(chalk.yellow('⚙️  Configs:'));
  console.log(chalk.gray(`   已使用: ${quotas.configs.current}`));
  console.log(chalk.gray(`   总限额: ${quotas.configs.limit === -1 ? '无限' : quotas.configs.limit}`));
  if (quotas.configs.limit !== -1) {
    const percentage = (quotas.configs.current / quotas.configs.limit) * 100;
    const bar = generateProgressBar(percentage);
    console.log(chalk.gray(`   进度:   ${bar} ${percentage.toFixed(1)}%`));
  }
  console.log('');

  // Shares配额
  console.log(chalk.yellow('🔗 Shares (本月):'));
  console.log(chalk.gray(`   已使用: ${quotas.shares.current}`));
  console.log(chalk.gray(`   总限额: ${quotas.shares.limit === -1 ? '无限' : quotas.shares.limit}`));
  if (quotas.shares.limit !== -1) {
    const percentage = (quotas.shares.current / quotas.shares.limit) * 100;
    const bar = generateProgressBar(percentage);
    console.log(chalk.gray(`   进度:   ${bar} ${percentage.toFixed(1)}%`));
  }
  console.log('');
}

/**
 * 显示升级信息
 */
async function showUpgradeInfo(tierManager: UserTierManager, userId: string): Promise<void> {
  console.log(chalk.cyan('\n⬆️  层级升级\n'));

  const quotas = tierManager.getUserQuotas(userId);
  if (!quotas) {
    console.log(chalk.red('无法获取用户信息'));
    return;
  }

  console.log(chalk.white(`当前层级: ${getTierDisplayName(quotas.tier)}\n`));

  const tiers = tierManager.getTierComparison();
  const currentTier = quotas.tier;

  // 可升级的层级
  const upgradeTiers = [];
  const tierOrder = [UserTier.FREE, UserTier.PROFESSIONAL, UserTier.TEAM, UserTier.ENTERPRISE];
  const currentIndex = tierOrder.indexOf(currentTier);

  for (let i = currentIndex + 1; i < tierOrder.length; i++) {
    upgradeTiers.push(tierOrder[i]);
  }

  if (upgradeTiers.length === 0) {
    console.log(chalk.green('✅ 您已是最高层级！\n'));
    return;
  }

  // 显示可选升级层级
  console.log(chalk.yellow('可升级层级:\n'));

  upgradeTiers.forEach(tier => {
    const tierInfo = tiers[tier];
    console.log(chalk.cyan(`${tierInfo.name}:`));
    console.log(chalk.gray(`  ${tierInfo.description}`));
    console.log(chalk.gray(`  Templates: ${tierInfo.quotas.templates === -1 ? '无限' : tierInfo.quotas.templates}`));
    console.log(chalk.gray(`  Configs:   ${tierInfo.quotas.configs === -1 ? '无限' : tierInfo.quotas.configs}`));
    console.log(chalk.gray(`  Shares:    ${tierInfo.quotas.shares === -1 ? '无限' : tierInfo.quotas.shares}`));
    console.log(chalk.gray('  功能:'));
    tierInfo.features.forEach(feature => {
      console.log(chalk.gray(`    • ${feature}`));
    });
    console.log('');
  });

  console.log(chalk.yellow('💡 升级提示:'));
  console.log(chalk.gray('   请访问 https://meteor-shower.dev/pricing 了解详细价格'));
  console.log(chalk.gray('   或联系我们的销售团队获取定制方案\n'));
}

/**
 * 显示层级对比
 */
async function showTierComparison(tierManager: UserTierManager): Promise<void> {
  console.log(chalk.cyan('\n🔍 层级对比表\n'));

  const tiers = tierManager.getTierComparison();

  // 创建对比表格
  const table = new Table({
    head: [
      chalk.cyan('功能'),
      chalk.cyan('Free'),
      chalk.cyan('Professional'),
      chalk.cyan('Team'),
      chalk.cyan('Enterprise')
    ],
    colWidths: [25, 15, 18, 15, 15]
  });

  // Templates配额
  table.push([
    'Templates配额',
    tiers[UserTier.FREE].quotas.templates,
    tiers[UserTier.PROFESSIONAL].quotas.templates,
    tiers[UserTier.TEAM].quotas.templates,
    '无限'
  ]);

  // Configs配额
  table.push([
    'Configs配额',
    tiers[UserTier.FREE].quotas.configs,
    tiers[UserTier.PROFESSIONAL].quotas.configs,
    tiers[UserTier.TEAM].quotas.configs,
    '无限'
  ]);

  // Shares配额
  table.push([
    'Shares配额(月)',
    tiers[UserTier.FREE].quotas.shares,
    tiers[UserTier.PROFESSIONAL].quotas.shares,
    tiers[UserTier.TEAM].quotas.shares,
    '无限'
  ]);

  // 最大成员数
  table.push([
    '最大成员数',
    tiers[UserTier.FREE].quotas.max_members,
    tiers[UserTier.PROFESSIONAL].quotas.max_members,
    tiers[UserTier.TEAM].quotas.max_members,
    '无限'
  ]);

  // 云端备份
  table.push([
    '云端备份',
    '❌',
    '✅',
    '✅',
    '✅'
  ]);

  // 团队协作
  table.push([
    '团队协作',
    '❌',
    '❌',
    '✅',
    '✅'
  ]);

  // 审计日志
  table.push([
    '审计日志',
    '❌',
    '❌',
    '✅',
    '✅'
  ]);

  // SSO
  table.push([
    'SSO单点登录',
    '❌',
    '❌',
    '❌',
    '✅'
  ]);

  // RBAC
  table.push([
    'RBAC权限管理',
    '❌',
    '❌',
    '❌',
    '✅'
  ]);

  console.log(table.toString());
  console.log('');
}

/**
 * 获取层级显示名称
 */
function getTierDisplayName(tier: UserTier): string {
  const names: Record<UserTier, string> = {
    [UserTier.FREE]: '免费版 (Free)',
    [UserTier.PROFESSIONAL]: '专业版 (Professional)',
    [UserTier.TEAM]: '团队版 (Team)',
    [UserTier.ENTERPRISE]: '企业版 (Enterprise)'
  };
  return names[tier] || tier;
}

/**
 * 生成进度条
 */
function generateProgressBar(percentage: number, length: number = 20): string {
  const filled = Math.round((percentage / 100) * length);
  const empty = length - filled;
  
  let color: (text: string) => string;
  if (percentage < 50) {
    color = chalk.green;
  } else if (percentage < 80) {
    color = chalk.yellow;
  } else {
    color = chalk.red;
  }
  
  return color('█'.repeat(filled)) + chalk.gray('░'.repeat(empty));
}
