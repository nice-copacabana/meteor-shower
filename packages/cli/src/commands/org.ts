// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-17
// Task: 实现CLI组织管理命令（3个命令）

/**
 * 组织管理CLI命令
 * 
 * 提供组织创建、查看、成员管理等功能
 */

import { Command } from 'commander';
import inquirer from 'inquirer';
import axios from 'axios';
import * as fs from 'fs';
import * as path from 'path';
import * as os from 'os';

const CONFIG_FILE = path.join(os.homedir(), '.meteor-shower', 'auth.json');
const API_BASE_URL = process.env.METEOR_SHOWER_API_URL || 'http://localhost:3000';

/**
 * 读取认证信息
 */
function loadAuth(): { userId: string; token: string } | null {
  if (!fs.existsSync(CONFIG_FILE)) {
    return null;
  }
  
  try {
    return JSON.parse(fs.readFileSync(CONFIG_FILE, 'utf-8'));
  } catch {
    return null;
  }
}

/**
 * 创建组织命令
 */
export function createOrgCommand(): Command {
  const command = new Command('org');
  command.description('组织管理命令');

  /**
   * org create - 创建组织
   */
  command
    .command('create')
    .description('创建新组织')
    .requiredOption('--name <name>', '组织名称')
    .requiredOption('--tier <tier>', '组织层级 (TEAM/ENTERPRISE)')
    .option('--max-members <number>', '最大成员数', '50')
    .action(async (options) => {
      try {
        const auth = loadAuth();
        
        if (!auth) {
          console.error('❌ 请先登录 (meteor-shower user login)');
          process.exit(1);
        }
        
        const validTiers = ['TEAM', 'ENTERPRISE'];
        if (!validTiers.includes(options.tier)) {
          console.error(`❌ 无效的层级类型。有效值: ${validTiers.join(', ')}`);
          process.exit(1);
        }
        
        // 调用创建组织API
        const response = await axios.post(`${API_BASE_URL}/api/organizations`, {
          name: options.name,
          tier: options.tier,
          ownerId: auth.userId,
          maxMembers: parseInt(options.maxMembers),
        });
        
        console.log('✅ 组织创建成功!');
        console.log(`   组织ID: ${response.data.orgId}`);
        console.log(`   名称: ${response.data.name}`);
        console.log(`   层级: ${response.data.tier}`);
      } catch (error: any) {
        if (error.response) {
          console.error(`❌ 创建组织失败: ${error.response.data.error?.message || '未知错误'}`);
        } else {
          console.error(`❌ 网络错误: ${error.message}`);
        }
        process.exit(1);
      }
    });

  /**
   * org info - 查看组织信息
   */
  command
    .command('info')
    .description('查看组织信息')
    .argument('[orgId]', '组织ID (可选，默认为当前用户的组织)')
    .action(async (orgId) => {
      try {
        const auth = loadAuth();
        
        if (!auth) {
          console.error('❌ 请先登录 (meteor-shower user login)');
          process.exit(1);
        }
        
        if (!orgId) {
          // 如果没有提供组织ID，需要从用户信息中获取
          const userResponse = await axios.get(`${API_BASE_URL}/api/users/${auth.userId}`);
          orgId = userResponse.data.organizationId;
          
          if (!orgId) {
            console.error('❌ 当前用户未加入任何组织');
            process.exit(1);
          }
        }
        
        // 调用组织信息API
        const response = await axios.get(`${API_BASE_URL}/api/organizations/${orgId}`);
        
        const org = response.data;
        
        console.log('\n🏢 组织信息:');
        console.log(`   ID: ${org.id}`);
        console.log(`   名称: ${org.name}`);
        console.log(`   层级: ${org.tier}`);
        console.log(`   所有者: ${org.owner.email} (${org.owner.id})`);
        console.log(`   成员数: ${org.members.total}/${org.members.max}`);
        console.log(`   创建时间: ${org.createdAt}`);
      } catch (error: any) {
        if (error.response) {
          console.error(`❌ 获取组织信息失败: ${error.response.data.error?.message || '未知错误'}`);
        } else {
          console.error(`❌ 网络错误: ${error.message}`);
        }
        process.exit(1);
      }
    });

  /**
   * org invite - 邀请成员
   */
  command
    .command('invite')
    .description('邀请成员加入组织')
    .requiredOption('--email <email>', '成员邮箱或用户ID')
    .option('--role <role>', '角色 (admin/member)', 'member')
    .option('--org-id <orgId>', '组织ID')
    .action(async (options) => {
      try {
        const auth = loadAuth();
        
        if (!auth) {
          console.error('❌ 请先登录 (meteor-shower user login)');
          process.exit(1);
        }
        
        let orgId = options.orgId;
        
        if (!orgId) {
          // 如果没有提供组织ID，从用户信息中获取
          const userResponse = await axios.get(`${API_BASE_URL}/api/users/${auth.userId}`);
          orgId = userResponse.data.organizationId;
          
          if (!orgId) {
            console.error('❌ 请指定组织ID (--org-id)');
            process.exit(1);
          }
        }
        
        // 假设email是用户ID（简化版，实际应该通过邮箱查找用户）
        const userId = options.email;
        
        // 调用添加成员API
        await axios.post(`${API_BASE_URL}/api/organizations/${orgId}/members`, {
          userId,
          role: options.role,
        });
        
        console.log('✅ 成员邀请成功!');
        console.log(`   用户: ${userId}`);
        console.log(`   角色: ${options.role}`);
      } catch (error: any) {
        if (error.response) {
          console.error(`❌ 邀请成员失败: ${error.response.data.error?.message || '未知错误'}`);
        } else {
          console.error(`❌ 网络错误: ${error.message}`);
        }
        process.exit(1);
      }
    });

  /**
   * org remove - 移除成员
   */
  command
    .command('remove')
    .description('从组织中移除成员')
    .requiredOption('--email <email>', '成员邮箱或用户ID')
    .option('--org-id <orgId>', '组织ID')
    .action(async (options) => {
      try {
        const auth = loadAuth();
        
        if (!auth) {
          console.error('❌ 请先登录 (meteor-shower user login)');
          process.exit(1);
        }
        
        let orgId = options.orgId;
        
        if (!orgId) {
          // 如果没有提供组织ID，从用户信息中获取
          const userResponse = await axios.get(`${API_BASE_URL}/api/users/${auth.userId}`);
          orgId = userResponse.data.organizationId;
          
          if (!orgId) {
            console.error('❌ 请指定组织ID (--org-id)');
            process.exit(1);
          }
        }
        
        // 确认移除
        const { confirm } = await inquirer.prompt([
          {
            type: 'confirm',
            name: 'confirm',
            message: `确定要移除成员 ${options.email} 吗?`,
            default: false,
          },
        ]);
        
        if (!confirm) {
          console.log('已取消移除');
          return;
        }
        
        // 假设email是用户ID（简化版）
        const userId = options.email;
        
        // 调用移除成员API
        await axios.delete(`${API_BASE_URL}/api/organizations/${orgId}/members/${userId}`);
        
        console.log('✅ 成员已移除');
      } catch (error: any) {
        if (error.response) {
          console.error(`❌ 移除成员失败: ${error.response.data.error?.message || '未知错误'}`);
        } else {
          console.error(`❌ 网络错误: ${error.message}`);
        }
        process.exit(1);
      }
    });

  return command;
}
