// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-17
// Task: 实现CLI用户管理命令（4个命令）

/**
 * 用户管理CLI命令
 * 
 * 提供用户登录、查看信息、查看配额、升级层级等功能
 */

import { Command } from 'commander';
import inquirer from 'inquirer';
import axios from 'axios';
import * as fs from 'fs';
import * as path from 'path';
import * as os from 'os';

const CONFIG_DIR = path.join(os.homedir(), '.meteor-shower');
const CONFIG_FILE = path.join(CONFIG_DIR, 'auth.json');
const API_BASE_URL = process.env.METEOR_SHOWER_API_URL || 'http://localhost:3000';

/**
 * 保存认证信息
 */
function saveAuth(userId: string, token: string): void {
  if (!fs.existsSync(CONFIG_DIR)) {
    fs.mkdirSync(CONFIG_DIR, { recursive: true });
  }
  
  fs.writeFileSync(CONFIG_FILE, JSON.stringify({ userId, token }, null, 2));
}

/**
 * 读取认证信息
 */
function loadAuth(): { userId: string; token: string } | null {
  if (!fs.existsSync(CONFIG_FILE)) {
    return null;
  }
  
  try {
    return JSON.parse(fs.readFileSync(CONFIG_FILE, 'utf-8'));
  } catch {
    return null;
  }
}

/**
 * 删除认证信息
 */
function clearAuth(): void {
  if (fs.existsSync(CONFIG_FILE)) {
    fs.unlinkSync(CONFIG_FILE);
  }
}

/**
 * 创建用户命令
 */
export function createUserCommand(): Command {
  const command = new Command('user');
  command.description('用户管理命令');

  /**
   * user login - 用户登录
   */
  command
    .command('login')
    .description('登录到meteor-shower')
    .option('--email <email>', '用户邮箱')
    .option('--password <password>', '用户密码')
    .action(async (options) => {
      try {
        let { email, password } = options;
        
        // 如果没有提供参数，交互式询问
        if (!email || !password) {
          const answers = await inquirer.prompt([
            {
              type: 'input',
              name: 'email',
              message: '请输入邮箱:',
              when: !email,
            },
            {
              type: 'password',
              name: 'password',
              message: '请输入密码:',
              when: !password,
            },
          ]);
          
          email = email || answers.email;
          password = password || answers.password;
        }
        
        // 调用登录API
        const response = await axios.post(`${API_BASE_URL}/api/users/login`, {
          email,
          password,
        });
        
        const { userId, tier, token } = response.data;
        
        // 保存认证信息
        saveAuth(userId, token);
        
        console.log('✅ 登录成功!');
        console.log(`   用户ID: ${userId}`);
        console.log(`   层级: ${tier}`);
      } catch (error: any) {
        if (error.response) {
          console.error(`❌ 登录失败: ${error.response.data.error?.message || '未知错误'}`);
        } else {
          console.error(`❌ 网络错误: ${error.message}`);
        }
        process.exit(1);
      }
    });

  /**
   * user logout - 用户登出
   */
  command
    .command('logout')
    .description('登出meteor-shower')
    .action(() => {
      clearAuth();
      console.log('✅ 已登出');
    });

  /**
   * user info - 查看用户信息
   */
  command
    .command('info')
    .description('查看当前用户信息')
    .action(async () => {
      try {
        const auth = loadAuth();
        
        if (!auth) {
          console.error('❌ 请先登录 (meteor-shower user login)');
          process.exit(1);
        }
        
        // 调用用户信息API
        const response = await axios.get(`${API_BASE_URL}/api/users/${auth.userId}`);
        
        const user = response.data;
        
        console.log('\n📋 用户信息:');
        console.log(`   ID: ${user.id}`);
        console.log(`   邮箱: ${user.email}`);
        console.log(`   层级: ${user.tier}`);
        console.log(`   创建时间: ${user.createdAt}`);
        
        if (user.lastLoginAt) {
          console.log(`   最后登录: ${user.lastLoginAt}`);
        }
        
        console.log('\n📊 配额使用情况:');
        
        const quotaTypes = {
          TOOL: '工具数量',
          CLOUD_TEMPLATE: '云端模板',
          VALIDATION: '月验证次数',
          CONCURRENT_TASK: '并发任务',
          STORAGE: '存储空间',
        };
        
        Object.entries(user.quota).forEach(([type, data]: [string, any]) => {
          const name = quotaTypes[type as keyof typeof quotaTypes] || type;
          const used = data.used;
          const limit = data.limit === Infinity ? '无限' : data.limit;
          const remaining = data.remaining === Infinity ? '无限' : data.remaining;
          
          console.log(`   ${name}: ${used}/${limit} (剩余: ${remaining})`);
        });
        
      } catch (error: any) {
        if (error.response) {
          console.error(`❌ 获取用户信息失败: ${error.response.data.error?.message || '未知错误'}`);
        } else {
          console.error(`❌ 网络错误: ${error.message}`);
        }
        process.exit(1);
      }
    });

  /**
   * user quota - 查看配额使用情况
   */
  command
    .command('quota')
    .description('查看配额使用情况')
    .option('--resource-type <type>', '资源类型 (TOOL/CLOUD_TEMPLATE/VALIDATION/CONCURRENT_TASK/STORAGE)')
    .action(async (options) => {
      try {
        const auth = loadAuth();
        
        if (!auth) {
          console.error('❌ 请先登录 (meteor-shower user login)');
          process.exit(1);
        }
        
        // 调用配额查询API
        const response = await axios.get(`${API_BASE_URL}/api/users/${auth.userId}/quota`);
        
        const quotas = response.data;
        
        const quotaTypes = {
          TOOL: '工具数量',
          CLOUD_TEMPLATE: '云端模板',
          VALIDATION: '月验证次数',
          CONCURRENT_TASK: '并发任务',
          STORAGE: '存储空间',
        };
        
        console.log('\n📊 配额使用情况:');
        
        Object.entries(quotas).forEach(([type, data]: [string, any]) => {
          if (options.resourceType && type !== options.resourceType) {
            return;
          }
          
          const name = quotaTypes[type as keyof typeof quotaTypes] || type;
          const used = data.used;
          const limit = data.limit === Infinity ? '无限' : data.limit;
          const remaining = data.remaining === Infinity ? '无限' : data.remaining;
          const resetAt = new Date(data.resetAt).toLocaleDateString();
          
          console.log(`\n   ${name}:`);
          console.log(`     已使用: ${used}`);
          console.log(`     总限制: ${limit}`);
          console.log(`     剩余: ${remaining}`);
          console.log(`     重置时间: ${resetAt}`);
        });
        
      } catch (error: any) {
        if (error.response) {
          console.error(`❌ 查询配额失败: ${error.response.data.error?.message || '未知错误'}`);
        } else {
          console.error(`❌ 网络错误: ${error.message}`);
        }
        process.exit(1);
      }
    });

  /**
   * user upgrade - 升级用户层级
   */
  command
    .command('upgrade')
    .description('升级用户层级')
    .requiredOption('--tier <tier>', '新层级 (PROFESSIONAL/TEAM/ENTERPRISE)')
    .option('--payment-method <method>', '支付方式 (ALIPAY/WECHAT/STRIPE)', 'ALIPAY')
    .action(async (options) => {
      try {
        const auth = loadAuth();
        
        if (!auth) {
          console.error('❌ 请先登录 (meteor-shower user login)');
          process.exit(1);
        }
        
        const validTiers = ['PROFESSIONAL', 'TEAM', 'ENTERPRISE'];
        if (!validTiers.includes(options.tier)) {
          console.error(`❌ 无效的层级类型。有效值: ${validTiers.join(', ')}`);
          process.exit(1);
        }
        
        // 确认升级
        const { confirm } = await inquirer.prompt([
          {
            type: 'confirm',
            name: 'confirm',
            message: `确定要升级到 ${options.tier} 层级吗?`,
            default: false,
          },
        ]);
        
        if (!confirm) {
          console.log('已取消升级');
          return;
        }
        
        // 调用升级API
        const response = await axios.put(`${API_BASE_URL}/api/users/${auth.userId}/tier`, {
          newTier: options.tier,
          paymentInfo: {
            paymentMethod: options.paymentMethod,
          },
        });
        
        console.log('✅ 升级成功!');
        console.log(`   新层级: ${response.data.newTier}`);
        
        if (response.data.subscription) {
          console.log(`   订阅ID: ${response.data.subscription.id}`);
          console.log(`   开始日期: ${response.data.subscription.start_date}`);
          console.log(`   结束日期: ${response.data.subscription.end_date}`);
        }
        
      } catch (error: any) {
        if (error.response) {
          console.error(`❌ 升级失败: ${error.response.data.error?.message || '未知错误'}`);
        } else {
          console.error(`❌ 网络错误: ${error.message}`);
        }
        process.exit(1);
      }
    });

  return command;
}
