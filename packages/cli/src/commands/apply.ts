// Generated by Qoder AI (Model: claude-sonnet-4-20250514) - 2025-10-14
// Task: 实现CLI apply命令实际逻辑

import chalk from 'chalk';
import inquirer from 'inquirer';
import fs from 'fs/promises';
import path from 'path';
import { createAdapter } from '@meteor-shower/adapters';

export interface ApplyOptions {
  yes?: boolean;
}

export async function applyCommand(options: ApplyOptions = {}) {
  console.log(chalk.cyan('⚡ 应用配置变更...'));
  
  try {
    // 读取配置计划
    const planPath = path.join(process.cwd(), '.meteor-shower', 'config-plan.json');
    const planContent = await fs.readFile(planPath, 'utf-8');
    const configPlan = JSON.parse(planContent);
    
    console.log(chalk.gray(`📄 配置计划: ${configPlan.template}`));
    console.log(chalk.gray(`🎯 目标工具: ${configPlan.toolset.join(', ')}`));
    console.log(chalk.gray(`📝 将创建 ${configPlan.operations.length} 个文件`));
    
    // 确认应用
    if (!options.yes) {
      const { confirm } = await inquirer.prompt([{
        type: 'confirm',
        name: 'confirm',
        message: '确定要应用这些配置变更吗？',
        default: false
      }]);
      
      if (!confirm) {
        console.log(chalk.yellow('❌ 操作已取消'));
        return;
      }
    }
    
    // 应用配置
    console.log(chalk.green('\n📝 应用进度:'));
    
    for (const tool of configPlan.toolset) {
      console.log(chalk.gray(`  🔧 处理 ${tool} 配置...`));
      
      const adapter = createAdapter(tool);
      await adapter.apply({
        target: tool,
        dryRun: false,
        variables: configPlan.variables
      });
      
      console.log(chalk.green(`  ✅ ${tool} 配置完成`));
    }
    
    console.log(chalk.green('\n🎉 配置应用成功！'));
    console.log(chalk.gray('💡 使用 ms diff 查看变更，或运行相应工具验证配置'));
    
  } catch (error: any) {
    if (error.code === 'ENOENT') {
      console.error(chalk.red('❌ 未找到配置计划文件'));
      console.log(chalk.gray('💡 请先运行 ms init 初始化配置'));
    } else {
      console.error(chalk.red('❌ 应用失败:'), error);
    }
  }
}
