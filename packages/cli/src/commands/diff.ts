// Generated by Qoder AI (Model: claude-sonnet-4-20250514) - 2025-10-14
// Task: 增强CLI diff命令显示格式（彩色输出、表格展示）

import chalk from 'chalk';
import fs from 'fs/promises';
import path from 'path';
import Table from 'cli-table3';
import { createAdapter } from '@meteor-shower/adapters';

interface ChangeDetail {
  path: string;
  kind: 'create' | 'update' | 'delete';
  tool: string;
  size?: string;
  description?: string;
}

export async function diffCommand() {
  console.log(chalk.cyan.bold('\n🔍 分析配置差异\n'));
  console.log(chalk.gray('─'.repeat(60)));
  
  try {
    // 读取配置计划
    const planPath = path.join(process.cwd(), '.meteor-shower', 'config-plan.json');
    const planContent = await fs.readFile(planPath, 'utf-8');
    const configPlan = JSON.parse(planContent);
    
    // 显示配置信息
    console.log(chalk.white('\n配置计划信息:'));
    console.log(chalk.gray(`  模板:     ${chalk.cyan(configPlan.template)}`));
    console.log(chalk.gray(`  工具集:   ${chalk.cyan(configPlan.toolset.join(', '))}`));
    console.log(chalk.gray(`  变量数:   ${chalk.cyan(Object.keys(configPlan.variables).length)}`));
    
    // 对每个工具获取差异
    const allChanges: ChangeDetail[] = [];
    
    console.log(chalk.gray('\n正在分析配置差异...'));
    
    for (const tool of configPlan.toolset) {
      const adapter = createAdapter(tool);
      const diffResult = await adapter.plan({
        target: tool,
        dryRun: true,
        variables: configPlan.variables
      });
      
      // 为每个变更添加工具信息
      const changesWithTool = diffResult.changes.map((change: any) => ({
        ...change,
        tool: tool
      }));
      
      allChanges.push(...changesWithTool);
    }
    
    // 统计信息
    const createCount = allChanges.filter(c => c.kind === 'create').length;
    const updateCount = allChanges.filter(c => c.kind === 'update').length;
    const deleteCount = allChanges.filter(c => c.kind === 'delete').length;
    
    // 显示统计摘要
    console.log(chalk.cyan('\n📊 变更统计:\n'));
    const statsTable = new Table({
      head: [chalk.white.bold('类型'), chalk.white.bold('数量'), chalk.white.bold('说明')],
      colWidths: [15, 10, 35],
      style: {
        head: [],
        border: ['gray']
      }
    });
    
    if (createCount > 0) {
      statsTable.push([
        chalk.green('✨ 新建'),
        chalk.green.bold(createCount),
        chalk.gray('将创建新配置文件')
      ]);
    }
    
    if (updateCount > 0) {
      statsTable.push([
        chalk.yellow('🔄 更新'),
        chalk.yellow.bold(updateCount),
        chalk.gray('将更新现有配置文件')
      ]);
    }
    
    if (deleteCount > 0) {
      statsTable.push([
        chalk.red('🗑️  删除'),
        chalk.red.bold(deleteCount),
        chalk.gray('将删除配置文件')
      ]);
    }
    
    statsTable.push([
      chalk.cyan.bold('总计'),
      chalk.cyan.bold(allChanges.length),
      chalk.gray('配置文件总数')
    ]);
    
    console.log(statsTable.toString());
    
    // 显示详细变更表格
    if (allChanges.length > 0) {
      console.log(chalk.cyan('\n📋 详细变更列表:\n'));
      
      const changesTable = new Table({
        head: [
          chalk.white.bold('操作'),
          chalk.white.bold('工具'),
          chalk.white.bold('文件路径')
        ],
        colWidths: [8, 12, 50],
        style: {
          head: [],
          border: ['gray']
        },
        wordWrap: true
      });
      
      // 按工具分组显示
      const groupedByTool: Record<string, ChangeDetail[]> = {};
      allChanges.forEach(change => {
        if (!groupedByTool[change.tool]) {
          groupedByTool[change.tool] = [];
        }
        groupedByTool[change.tool].push(change);
      });
      
      // 为每个工具添加变更
      Object.entries(groupedByTool).forEach(([tool, changes]) => {
        changes.forEach((change, index) => {
          const kindIcon = getKindIcon(change.kind);
          const kindColor = getKindColor(change.kind);
          
          changesTable.push([
            chalk[kindColor](kindIcon),
            index === 0 ? chalk.cyan.bold(tool.toUpperCase()) : '',
            chalk.gray(change.path)
          ]);
        });
      });
      
      console.log(changesTable.toString());
    }
    
    // 显示文件位置信息
    console.log(chalk.cyan('\n📁 文件位置说明:\n'));
    const locationTable = new Table({
      colWidths: [20, 50],
      style: {
        border: ['gray']
      }
    });
    
    locationTable.push(
      [chalk.yellow('~/.gemini/'), chalk.gray('Gemini 全局配置目录')],
      [chalk.yellow('~/.claude/'), chalk.gray('Claude 全局配置目录')],
      [chalk.yellow('./.cursor/'), chalk.gray('Cursor 项目配置目录')],
      [chalk.yellow('./'), chalk.gray('项目根目录配置文件')]
    );
    
    console.log(locationTable.toString());
    
    // 下一步提示
    console.log(chalk.cyan('\n🎯 下一步操作:\n'));
    console.log(chalk.white('  1. 检查上述变更是否符合预期'));
    console.log(chalk.white('  2. 运行 ' + chalk.yellow.bold('ms apply') + ' 应用这些变更'));
    console.log(chalk.white('  3. 运行 ' + chalk.yellow.bold('ms apply --dry-run') + ' 模拟应用过程'));
    console.log(chalk.gray('\n─'.repeat(60)));
    console.log('');
    
  } catch (error: any) {
    console.log(chalk.gray('\n─'.repeat(60)));
    if (error.code === 'ENOENT') {
      console.error(chalk.red.bold('\n❌ 错误: 未找到配置计划文件\n'));
      console.log(chalk.yellow('💡 建议操作:'));
      console.log(chalk.white('  1. 运行 ' + chalk.cyan.bold('ms init') + ' 初始化配置'));
      console.log(chalk.white('  2. 完成配置向导后再运行 diff 命令'));
    } else {
      console.error(chalk.red.bold('\n❌ 分析配置差异失败\n'));
      console.error(chalk.red('错误详情:'), error.message);
      if (error.stack) {
        console.log(chalk.gray('\n堆栈跟踪:'));
        console.log(chalk.gray(error.stack));
      }
    }
    console.log('');
  }
}

/**
 * 根据变更类型获取图标
 */
function getKindIcon(kind: string): string {
  switch (kind) {
    case 'create': return '✨';
    case 'update': return '🔄';
    case 'delete': return '🗑️';
    default: return '❓';
  }
}

/**
 * 根据变更类型获取颜色
 */
function getKindColor(kind: string): 'green' | 'yellow' | 'red' | 'gray' {
  switch (kind) {
    case 'create': return 'green';
    case 'update': return 'yellow';
    case 'delete': return 'red';
    default: return 'gray';
  }
}
