// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-15
// Task: CLI用户层级集成辅助模块 - 提供配额检查和升级提示功能

/**
 * CLI用户层级辅助模块
 * 
 * 为CLI命令提供用户层级检查、配额验证和升级提示功能
 */

import chalk from 'chalk';
import path from 'path';
import os from 'os';
import fs from 'fs/promises';
import { DatabaseManager, createDatabaseManager } from 'meteor-shower-user-tier';
import { UserTier } from 'meteor-shower-user-tier';

/**
 * 配额检查结果
 */
export interface QuotaCheckResult {
  allowed: boolean;
  reason?: string;
  current: number;
  limit: number;
  remaining: number;
  tier?: UserTier;
}

/**
 * 升级建议
 */
export interface UpgradeSuggestion {
  shouldUpgrade: boolean;
  currentTier: UserTier;
  suggestedTier?: UserTier;
  reason?: string;
  benefits?: string[];
}

/**
 * CLI用户层级辅助类
 */
export class CLITierHelper {
  private dbManager: DatabaseManager | null = null;

  /**
   * 初始化数据库连接
   */
  private async initDatabase(): Promise<DatabaseManager | null> {
    if (this.dbManager) {
      return this.dbManager;
    }

    try {
      const dbPath = process.env.METEOR_DB_PATH || path.join(os.homedir(), '.meteor-shower', 'meteor.db');
      
      // 检查数据库是否存在
      try {
        await fs.access(dbPath);
      } catch {
        // 数据库不存在，返回null
        return null;
      }

      this.dbManager = createDatabaseManager({
        path: dbPath,
        wal: true,
      });

      return this.dbManager;
    } catch (error) {
      console.warn(chalk.yellow('⚠️  无法连接用户数据库'));
      return null;
    }
  }

  /**
   * 检查工具配置配额
   */
  async checkToolQuota(userId?: string): Promise<QuotaCheckResult> {
    if (!userId) {
      return this.allowByDefault();
    }

    const db = await this.initDatabase();
    if (!db) {
      return this.allowByDefault();
    }

    try {
      const user = await db.users.findById(userId);
      if (!user) {
        return this.allowByDefault();
      }

      const currentMonth = new Date().toISOString().slice(0, 7);
      const usage = await db.usageStats.findByUserAndMonth(userId, currentMonth);
      const toolsConfigured = usage?.toolsConfigured || 0;

      // 获取限制
      const limits = this.getTierLimits(user.tier);
      const maxTools = limits.maxTools;

      if (maxTools === Infinity) {
        return {
          allowed: true,
          current: toolsConfigured,
          limit: -1,
          remaining: -1,
          tier: user.tier,
        };
      }

      const allowed = toolsConfigured < maxTools;
      return {
        allowed,
        reason: allowed ? undefined : `已达到工具配置上限 (${maxTools})`,
        current: toolsConfigured,
        limit: maxTools,
        remaining: Math.max(0, maxTools - toolsConfigured),
        tier: user.tier,
      };
    } catch (error) {
      console.warn(chalk.yellow('⚠️  配额检查失败，继续执行'));
      return this.allowByDefault();
    }
  }

  /**
   * 检查模板分享配额
   */
  async checkTemplateQuota(userId?: string): Promise<QuotaCheckResult> {
    if (!userId) {
      return this.allowByDefault();
    }

    const db = await this.initDatabase();
    if (!db) {
      return this.allowByDefault();
    }

    try {
      const user = await db.users.findById(userId);
      if (!user) {
        return this.allowByDefault();
      }

      const currentMonth = new Date().toISOString().slice(0, 7);
      const usage = await db.usageStats.findByUserAndMonth(userId, currentMonth);
      const cloudTemplates = usage?.cloudTemplates || 0;

      // 获取限制
      const limits = this.getTierLimits(user.tier);
      const maxTemplates = limits.maxCloudTemplates;

      if (maxTemplates === Infinity) {
        return {
          allowed: true,
          current: cloudTemplates,
          limit: -1,
          remaining: -1,
          tier: user.tier,
        };
      }

      const allowed = cloudTemplates < maxTemplates;
      return {
        allowed,
        reason: allowed ? undefined : `已达到云端模板上限 (${maxTemplates})`,
        current: cloudTemplates,
        limit: maxTemplates,
        remaining: Math.max(0, maxTemplates - cloudTemplates),
        tier: user.tier,
      };
    } catch (error) {
      console.warn(chalk.yellow('⚠️  配额检查失败，继续执行'));
      return this.allowByDefault();
    }
  }

  /**
   * 增加工具使用量
   */
  async incrementToolUsage(userId?: string): Promise<void> {
    if (!userId) return;

    const db = await this.initDatabase();
    if (!db) return;

    try {
      const currentMonth = new Date().toISOString().slice(0, 7);
      await db.usageStats.increment(userId, currentMonth, 'toolsConfigured', 1);
    } catch (error) {
      console.warn(chalk.yellow('⚠️  无法更新使用量统计'));
    }
  }

  /**
   * 增加模板使用量
   */
  async incrementTemplateUsage(userId?: string): Promise<void> {
    if (!userId) return;

    const db = await this.initDatabase();
    if (!db) return;

    try {
      const currentMonth = new Date().toISOString().slice(0, 7);
      await db.usageStats.increment(userId, currentMonth, 'cloudTemplates', 1);
    } catch (error) {
      console.warn(chalk.yellow('⚠️  无法更新使用量统计'));
    }
  }

  /**
   * 显示配额信息
   */
  displayQuotaInfo(quota: QuotaCheckResult): void {
    if (quota.limit === -1) {
      console.log(chalk.gray('  当前层级: ') + chalk.cyan(quota.tier || 'FREE'));
      console.log(chalk.gray('  配额: ') + chalk.green('无限制'));
    } else {
      console.log(chalk.gray('  当前层级: ') + chalk.cyan(quota.tier || 'FREE'));
      console.log(chalk.gray('  配额使用: ') + chalk.yellow(`${quota.current}/${quota.limit}`));
      console.log(chalk.gray('  剩余: ') + chalk.green(`${quota.remaining}`));
    }
  }

  /**
   * 显示升级提示
   */
  displayUpgradePrompt(quota: QuotaCheckResult): void {
    if (!quota.allowed && quota.tier) {
      console.log(chalk.yellow('\n💡 升级提示:'));
      
      const suggestion = this.getUpgradeSuggestion(quota.tier);
      if (suggestion.shouldUpgrade && suggestion.suggestedTier) {
        console.log(chalk.gray(`   建议升级到: ${chalk.cyan(suggestion.suggestedTier)}`));
        if (suggestion.benefits) {
          console.log(chalk.gray('   升级后可获得:'));
          suggestion.benefits.forEach(benefit => {
            console.log(chalk.gray(`     • ${benefit}`));
          });
        }
      }
      
      console.log(chalk.gray('   运行 ') + chalk.yellow('meteor-shower account upgrade') + chalk.gray(' 查看升级选项'));
    }
  }

  /**
   * 获取升级建议
   */
  private getUpgradeSuggestion(currentTier: UserTier): UpgradeSuggestion {
    const tierOrder = [UserTier.FREE, UserTier.PRO, UserTier.TEAM, UserTier.ENTERPRISE];
    const currentIndex = tierOrder.indexOf(currentTier);

    if (currentIndex === tierOrder.length - 1) {
      return {
        shouldUpgrade: false,
        currentTier,
      };
    }

    const suggestedTier = tierOrder[currentIndex + 1];
    const benefits: string[] = [];

    switch (suggestedTier) {
      case UserTier.PRO:
        benefits.push('无限工具配置');
        benefits.push('无限云端模板');
        benefits.push('500次/月能力验证');
        benefits.push('10GB存储空间');
        break;
      case UserTier.TEAM:
        benefits.push('团队协作功能');
        benefits.push('2000次/月能力验证');
        benefits.push('100个并发任务');
        benefits.push('审计日志');
        break;
      case UserTier.ENTERPRISE:
        benefits.push('企业级安全');
        benefits.push('无限配额');
        benefits.push('SSO单点登录');
        benefits.push('专属支持');
        break;
    }

    return {
      shouldUpgrade: true,
      currentTier,
      suggestedTier,
      reason: `当前层级配额已用尽`,
      benefits,
    };
  }

  /**
   * 获取层级限制
   */
  private getTierLimits(tier: UserTier) {
    const limits = {
      [UserTier.FREE]: {
        maxTools: 3,
        maxCloudTemplates: 5,
      },
      [UserTier.PRO]: {
        maxTools: Infinity,
        maxCloudTemplates: Infinity,
      },
      [UserTier.TEAM]: {
        maxTools: Infinity,
        maxCloudTemplates: Infinity,
      },
      [UserTier.ENTERPRISE]: {
        maxTools: Infinity,
        maxCloudTemplates: Infinity,
      },
    };

    return limits[tier];
  }

  /**
   * 默认允许（无配额限制）
   */
  private allowByDefault(): QuotaCheckResult {
    return {
      allowed: true,
      current: 0,
      limit: -1,
      remaining: -1,
    };
  }

  /**
   * 关闭数据库连接
   */
  close(): void {
    if (this.dbManager) {
      this.dbManager.close();
      this.dbManager = null;
    }
  }
}

/**
 * 创建CLI层级辅助实例
 */
export function createCLITierHelper(): CLITierHelper {
  return new CLITierHelper();
}
