// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-15
// Task: M7 Phase1 - B1: 案例数据模型 - DAO层实现

import Database from 'better-sqlite3';
import { ValidationCase, CaseExecution, CaseCategory, DifficultyLevel, CaseFilters, CaseVersion } from '../index.js';

/**
 * ValidationCase DAO
 */
export class ValidationCaseDAO {
  constructor(private db: Database.Database) {}

  /**
   * 创建案例
   */
  create(caseData: Omit<ValidationCase, 'createdAt' | 'updatedAt' | 'stats'>): ValidationCase {
    const now = Date.now();
    
    const stmt = this.db.prepare(`
      INSERT INTO validation_cases (
        id, title, description, category, difficulty, tags,
        scenario_context, scenario_task, scenario_input, scenario_constraints,
        expected_type, expected_content, expected_pattern, expected_criteria, expected_examples,
        scoring_accuracy, scoring_completeness, scoring_creativity, scoring_efficiency, scoring_custom_criteria,
        author_name, author_expertise, author_reputation,
        stats_submissions, stats_average_score, stats_pass_rate, stats_tool_performance,
        created_at, updated_at, version, is_public, is_certified
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    `);

    stmt.run(
      caseData.id,
      caseData.title,
      caseData.description,
      caseData.category,
      caseData.difficulty,
      JSON.stringify(caseData.tags),
      caseData.scenario.context,
      caseData.scenario.task,
      caseData.scenario.input,
      caseData.scenario.constraints ? JSON.stringify(caseData.scenario.constraints) : null,
      caseData.expected.type,
      caseData.expected.content || null,
      caseData.expected.pattern || null,
      caseData.expected.criteria ? JSON.stringify(caseData.expected.criteria) : null,
      caseData.expected.examples ? JSON.stringify(caseData.expected.examples) : null,
      caseData.scoring.accuracy,
      caseData.scoring.completeness,
      caseData.scoring.creativity,
      caseData.scoring.efficiency,
      caseData.scoring.customCriteria ? JSON.stringify(caseData.scoring.customCriteria) : null,
      caseData.author.name,
      caseData.author.expertise || null,
      caseData.author.reputation || 0,
      0, // stats_submissions
      0, // stats_average_score
      0, // stats_pass_rate
      '{}', // stats_tool_performance
      now,
      now,
      caseData.version,
      caseData.isPublic ? 1 : 0,
      caseData.isCertified ? 1 : 0
    );

    return {
      ...caseData,
      stats: {
        submissions: 0,
        averageScore: 0,
        passRate: 0,
        toolPerformance: {},
      },
      createdAt: new Date(now),
      updatedAt: new Date(now),
    };
  }

  /**
   * 根据ID查找案例
   */
  findById(id: string): ValidationCase | null {
    const stmt = this.db.prepare('SELECT * FROM validation_cases WHERE id = ?');
    const row = stmt.get(id) as any;
    
    if (!row) return null;
    
    return this.rowToCase(row);
  }

  /**
   * 高级查询案例（支持完整的CaseFilters）
   */
  findAdvanced(filter?: CaseFilters): ValidationCase[] {
    let sql = 'SELECT * FROM validation_cases WHERE 1=1';
    const params: any[] = [];

    // 类别过滤（支持多选）
    if (filter?.category) {
      const categories = Array.isArray(filter.category) ? filter.category : [filter.category];
      sql += ` AND category IN (${categories.map(() => '?').join(',')})`;
      params.push(...categories);
    }

    // 难度过滤（支持多选）
    if (filter?.difficulty) {
      const difficulties = Array.isArray(filter.difficulty) ? filter.difficulty : [filter.difficulty];
      sql += ` AND difficulty IN (${difficulties.map(() => '?').join(',')})`;
      params.push(...difficulties);
    }

    // 标签过滤（任意匹配）
    if (filter?.tags && filter.tags.length > 0) {
      const tagConditions = filter.tags.map(() => 'tags LIKE ?').join(' OR ');
      sql += ` AND (${tagConditions})`;
      params.push(...filter.tags.map(tag => `%"${tag}"%`));
    }

    // 作者过滤
    if (filter?.author) {
      sql += ' AND author_name = ?';
      params.push(filter.author);
    }

    // 公开状态过滤
    if (filter?.isPublic !== undefined) {
      sql += ' AND is_public = ?';
      params.push(filter.isPublic ? 1 : 0);
    }

    // 认证状态过滤
    if (filter?.isCertified !== undefined) {
      sql += ' AND is_certified = ?';
      params.push(filter.isCertified ? 1 : 0);
    }

    // 最低平均分过滤
    if (filter?.minAverageScore !== undefined) {
      sql += ' AND stats_average_score >= ?';
      params.push(filter.minAverageScore);
    }

    // 最低通过率过滤
    if (filter?.minPassRate !== undefined) {
      sql += ' AND stats_pass_rate >= ?';
      params.push(filter.minPassRate);
    }

    // 时间范围过滤
    if (filter?.createdAfter) {
      sql += ' AND created_at >= ?';
      params.push(filter.createdAfter.getTime());
    }

    if (filter?.createdBefore) {
      sql += ' AND created_at <= ?';
      params.push(filter.createdBefore.getTime());
    }

    // 排序
    const sortBy = filter?.sortBy || 'created_at';
    const sortOrder = filter?.sortOrder || 'desc';
    const columnMap: Record<string, string> = {
      'createdAt': 'created_at',
      'updatedAt': 'updated_at',
      'submissions': 'stats_submissions',
      'averageScore': 'stats_average_score',
      'passRate': 'stats_pass_rate'
    };
    const sortColumn = columnMap[sortBy] || 'created_at';
    sql += ` ORDER BY ${sortColumn} ${sortOrder.toUpperCase()}`;

    // 分页
    if (filter?.pageSize) {
      const page = filter.page || 1;
      const offset = (page - 1) * filter.pageSize;
      sql += ' LIMIT ? OFFSET ?';
      params.push(filter.pageSize, offset);
    }

    const stmt = this.db.prepare(sql);
    const rows = stmt.all(...params) as any[];

    return rows.map(row => this.rowToCase(row));
  }

  /**
   * 统计案例总数（支持过滤）
   */
  count(filter?: CaseFilters): number {
    let sql = 'SELECT COUNT(*) as count FROM validation_cases WHERE 1=1';
    const params: any[] = [];

    // 复用相同的过滤逻辑（不包含排序和分页）
    if (filter?.category) {
      const categories = Array.isArray(filter.category) ? filter.category : [filter.category];
      sql += ` AND category IN (${categories.map(() => '?').join(',')})`;
      params.push(...categories);
    }

    if (filter?.difficulty) {
      const difficulties = Array.isArray(filter.difficulty) ? filter.difficulty : [filter.difficulty];
      sql += ` AND difficulty IN (${difficulties.map(() => '?').join(',')})`;
      params.push(...difficulties);
    }

    if (filter?.tags && filter.tags.length > 0) {
      const tagConditions = filter.tags.map(() => 'tags LIKE ?').join(' OR ');
      sql += ` AND (${tagConditions})`;
      params.push(...filter.tags.map(tag => `%"${tag}"%`));
    }

    if (filter?.author) {
      sql += ' AND author_name = ?';
      params.push(filter.author);
    }

    if (filter?.isPublic !== undefined) {
      sql += ' AND is_public = ?';
      params.push(filter.isPublic ? 1 : 0);
    }

    if (filter?.isCertified !== undefined) {
      sql += ' AND is_certified = ?';
      params.push(filter.isCertified ? 1 : 0);
    }

    const stmt = this.db.prepare(sql);
    const result = stmt.get(...params) as any;
    return result.count;
  }

  /**
   * 获取类别统计信息
   */
  getCategoryStats(category?: CaseCategory): Array<{
    category: CaseCategory;
    totalCases: number;
    averageScore: number;
    passRate: number;
    difficultyDistribution: Record<string, number>;
  }> {
    let sql = `
      SELECT 
        category,
        COUNT(*) as total_cases,
        AVG(stats_average_score) as avg_score,
        AVG(stats_pass_rate) as avg_pass_rate
      FROM validation_cases
      WHERE 1=1
    `;
    const params: any[] = [];

    if (category) {
      sql += ' AND category = ?';
      params.push(category);
    }

    sql += ' GROUP BY category';

    const stmt = this.db.prepare(sql);
    const rows = stmt.all(...params) as any[];

    return rows.map(row => {
      // 获取该类别的难度分布
      const diffStmt = this.db.prepare(`
        SELECT difficulty, COUNT(*) as count
        FROM validation_cases
        WHERE category = ?
        GROUP BY difficulty
      `);
      const diffRows = diffStmt.all(row.category) as any[];
      const difficultyDistribution: Record<string, number> = {};
      diffRows.forEach(dr => {
        difficultyDistribution[dr.difficulty] = dr.count;
      });

      return {
        category: row.category as CaseCategory,
        totalCases: row.total_cases,
        averageScore: row.avg_score || 0,
        passRate: row.avg_pass_rate || 0,
        difficultyDistribution
      };
    });
  }

  /**
   * 查询案例（基础版本，保持向后兼容）
   */
  find(filter?: {
    category?: CaseCategory;
    difficulty?: DifficultyLevel;
    author?: string;
    isPublic?: boolean;
    isCertified?: boolean;
  }): ValidationCase[] {
    // 转换为高级过滤器格式
    return this.findAdvanced(filter);
  }

  /**
   * 更新案例
   */
  update(id: string, updates: Partial<ValidationCase>): boolean {
    const fields: string[] = [];
    const params: any[] = [];

    if (updates.title !== undefined) {
      fields.push('title = ?');
      params.push(updates.title);
    }

    if (updates.description !== undefined) {
      fields.push('description = ?');
      params.push(updates.description);
    }

    if (updates.tags !== undefined) {
      fields.push('tags = ?');
      params.push(JSON.stringify(updates.tags));
    }

    if (updates.isPublic !== undefined) {
      fields.push('is_public = ?');
      params.push(updates.isPublic ? 1 : 0);
    }

    if (updates.isCertified !== undefined) {
      fields.push('is_certified = ?');
      params.push(updates.isCertified ? 1 : 0);
    }

    if (fields.length === 0) return false;

    fields.push('updated_at = ?');
    params.push(Date.now());

    params.push(id);

    const stmt = this.db.prepare(`
      UPDATE validation_cases
      SET ${fields.join(', ')}
      WHERE id = ?
    `);

    const result = stmt.run(...params);
    return result.changes > 0;
  }

  /**
   * 删除案例
   */
  delete(id: string): boolean {
    const stmt = this.db.prepare('DELETE FROM validation_cases WHERE id = ?');
    const result = stmt.run(id);
    return result.changes > 0;
  }

  /**
   * 更新案例统计信息
   */
  updateStats(id: string, stats: Partial<ValidationCase['stats']>): boolean {
    const fields: string[] = [];
    const params: any[] = [];

    if (stats.submissions !== undefined) {
      fields.push('stats_submissions = ?');
      params.push(stats.submissions);
    }

    if (stats.averageScore !== undefined) {
      fields.push('stats_average_score = ?');
      params.push(stats.averageScore);
    }

    if (stats.passRate !== undefined) {
      fields.push('stats_pass_rate = ?');
      params.push(stats.passRate);
    }

    if (stats.toolPerformance !== undefined) {
      fields.push('stats_tool_performance = ?');
      params.push(JSON.stringify(stats.toolPerformance));
    }

    if (fields.length === 0) return false;

    fields.push('updated_at = ?');
    params.push(Date.now());

    params.push(id);

    const stmt = this.db.prepare(`
      UPDATE validation_cases
      SET ${fields.join(', ')}
      WHERE id = ?
    `);

    const result = stmt.run(...params);
    return result.changes > 0;
  }

  /**
   * 将数据库行转换为ValidationCase对象
   */
  private rowToCase(row: any): ValidationCase {
    return {
      id: row.id,
      title: row.title,
      description: row.description,
      category: row.category as CaseCategory,
      difficulty: row.difficulty as DifficultyLevel,
      tags: JSON.parse(row.tags),
      scenario: {
        context: row.scenario_context,
        task: row.scenario_task,
        input: row.scenario_input,
        constraints: row.scenario_constraints ? JSON.parse(row.scenario_constraints) : undefined,
      },
      expected: {
        type: row.expected_type as any,
        content: row.expected_content || undefined,
        pattern: row.expected_pattern || undefined,
        criteria: row.expected_criteria ? JSON.parse(row.expected_criteria) : undefined,
        examples: row.expected_examples ? JSON.parse(row.expected_examples) : undefined,
      },
      scoring: {
        accuracy: row.scoring_accuracy,
        completeness: row.scoring_completeness,
        creativity: row.scoring_creativity,
        efficiency: row.scoring_efficiency,
        customCriteria: row.scoring_custom_criteria ? JSON.parse(row.scoring_custom_criteria) : undefined,
      },
      author: {
        name: row.author_name,
        expertise: row.author_expertise || undefined,
        reputation: row.author_reputation || undefined,
      },
      stats: {
        submissions: row.stats_submissions,
        averageScore: row.stats_average_score,
        passRate: row.stats_pass_rate,
        toolPerformance: JSON.parse(row.stats_tool_performance),
      },
      createdAt: new Date(row.created_at),
      updatedAt: new Date(row.updated_at),
      version: row.version,
      isPublic: row.is_public === 1,
      isCertified: row.is_certified === 1,
    };
  }
}

/**
 * CaseExecution DAO
 */
export class CaseExecutionDAO {
  constructor(private db: Database.Database) {}

  /**
   * 创建执行记录
   */
  create(execution: Omit<CaseExecution, 'id'>): CaseExecution {
    const id = `exec_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    
    const stmt = this.db.prepare(`
      INSERT INTO case_executions (
        id, case_id, tool, model, config,
        executed_at, duration, output,
        score_accuracy, score_completeness, score_creativity, score_efficiency, score_overall, score_custom,
        analysis_strengths, analysis_weaknesses, analysis_suggestions,
        user_rating, user_feedback
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    `);

    stmt.run(
      id,
      execution.caseId,
      execution.tool,
      execution.model || null,
      execution.config ? JSON.stringify(execution.config) : null,
      execution.executedAt.getTime(),
      execution.duration,
      execution.output,
      execution.scores.accuracy,
      execution.scores.completeness,
      execution.scores.creativity,
      execution.scores.efficiency,
      execution.scores.overall,
      execution.scores.customScores ? JSON.stringify(execution.scores.customScores) : null,
      execution.analysis?.strengths ? JSON.stringify(execution.analysis.strengths) : null,
      execution.analysis?.weaknesses ? JSON.stringify(execution.analysis.weaknesses) : null,
      execution.analysis?.suggestions ? JSON.stringify(execution.analysis.suggestions) : null,
      execution.userRating || null,
      execution.userFeedback || null
    );

    return { id, ...execution };
  }

  /**
   * 根据案例ID查找执行记录
   */
  findByCaseId(caseId: string): CaseExecution[] {
    const stmt = this.db.prepare('SELECT * FROM case_executions WHERE case_id = ? ORDER BY executed_at DESC');
    const rows = stmt.all(caseId) as any[];
    return rows.map(row => this.rowToExecution(row));
  }

  /**
   * 根据工具查找执行记录
   */
  findByTool(tool: string): CaseExecution[] {
    const stmt = this.db.prepare('SELECT * FROM case_executions WHERE tool = ? ORDER BY executed_at DESC');
    const rows = stmt.all(tool) as any[];
    return rows.map(row => this.rowToExecution(row));
  }

  /**
   * 将数据库行转换为CaseExecution对象
   */
  private rowToExecution(row: any): CaseExecution {
    return {
      id: row.id,
      caseId: row.case_id,
      tool: row.tool,
      model: row.model || undefined,
      config: row.config ? JSON.parse(row.config) : undefined,
      executedAt: new Date(row.executed_at),
      duration: row.duration,
      output: row.output,
      scores: {
        accuracy: row.score_accuracy,
        completeness: row.score_completeness,
        creativity: row.score_creativity,
        efficiency: row.score_efficiency,
        overall: row.score_overall,
        customScores: row.score_custom ? JSON.parse(row.score_custom) : undefined,
      },
      analysis: (row.analysis_strengths || row.analysis_weaknesses || row.analysis_suggestions) ? {
        strengths: row.analysis_strengths ? JSON.parse(row.analysis_strengths) : [],
        weaknesses: row.analysis_weaknesses ? JSON.parse(row.analysis_weaknesses) : [],
        suggestions: row.analysis_suggestions ? JSON.parse(row.analysis_suggestions) : [],
      } : undefined,
      userRating: row.user_rating || undefined,
      userFeedback: row.user_feedback || undefined,
    };
  }
}

/**
 * CaseVersion DAO
 */
export class CaseVersionDAO {
  constructor(private db: Database.Database) {}

  /**
   * 创建版本记录
   */
  create(versionData: Omit<CaseVersion, 'createdAt'>, snapshotData: ValidationCase): CaseVersion {
    const id = `ver_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    const now = Date.now();
    
    const stmt = this.db.prepare(`
      INSERT INTO case_versions (
        id, case_id, version, changes, created_at, created_by, snapshot_data
      ) VALUES (?, ?, ?, ?, ?, ?, ?)
    `);

    stmt.run(
      id,
      versionData.caseId,
      versionData.version,
      versionData.changes,
      now,
      versionData.createdBy,
      JSON.stringify(snapshotData)
    );

    return {
      ...versionData,
      createdAt: new Date(now)
    };
  }

  /**
   * 根据案例ID获取版本历史
   */
  findByCaseId(caseId: string): CaseVersion[] {
    const stmt = this.db.prepare(`
      SELECT id, case_id, version, changes, created_at, created_by
      FROM case_versions
      WHERE case_id = ?
      ORDER BY created_at DESC
    `);
    const rows = stmt.all(caseId) as any[];
    
    return rows.map(row => ({
      version: row.version,
      caseId: row.case_id,
      changes: row.changes,
      createdAt: new Date(row.created_at),
      createdBy: row.created_by
    }));
  }

  /**
   * 获取特定版本的快照数据
   */
  getSnapshot(caseId: string, version: string): ValidationCase | null {
    const stmt = this.db.prepare(`
      SELECT snapshot_data
      FROM case_versions
      WHERE case_id = ? AND version = ?
    `);
    const row = stmt.get(caseId, version) as any;
    
    if (!row) return null;
    
    return JSON.parse(row.snapshot_data);
  }

  /**
   * 删除案例的所有版本
   */
  deleteByCaseId(caseId: string): boolean {
    const stmt = this.db.prepare('DELETE FROM case_versions WHERE case_id = ?');
    const result = stmt.run(caseId);
    return result.changes > 0;
  }
}
