// Generated by Qoder AI (Model: claude-sonnet-4-5-20250929) - 2025-10-15
// Task: M7 Phase1 - B1: 案例管理器测试

import { describe, it, expect, beforeEach, afterEach } from 'vitest';
import { CaseManager, CaseCategory, DifficultyLevel, ValidationCase } from '../index.js';

describe('CaseManager', () => {
  let manager: CaseManager;

  beforeEach(() => {
    manager = new CaseManager(':memory:');
  });

  afterEach(() => {
    manager.close();
  });

  describe('创建案例', () => {
    it('应该成功创建一个简单案例', async () => {
      const caseData = {
        title: '简单代码生成测试',
        description: '测试基础代码生成能力',
        category: CaseCategory.CODE_GENERATION,
        difficulty: DifficultyLevel.BEGINNER,
        scenario: {
          context: '需要一个简单的函数',
          task: '创建一个返回Hello World的函数',
          input: 'function hello()',
        },
        expected: {
          type: 'criteria' as const,
          criteria: ['包含function关键字', '返回字符串', '包含Hello World'],
        },
        scoring: {
          accuracy: 40,
          completeness: 30,
          creativity: 10,
          efficiency: 20,
        },
        author: {
          name: 'Test Author',
          expertise: 'JavaScript',
        },
      };

      const created = await manager.createCase(caseData);

      expect(created.id).toBeDefined();
      expect(created.title).toBe(caseData.title);
      expect(created.category).toBe(CaseCategory.CODE_GENERATION);
      expect(created.difficulty).toBe(DifficultyLevel.BEGINNER);
      expect(created.createdAt).toBeInstanceOf(Date);
      expect(created.stats.submissions).toBe(0);
    });

    it('应该使用默认值创建案例', async () => {
      const minimal = {
        title: '最小案例',
      };

      const created = await manager.createCase(minimal);

      expect(created.id).toBeDefined();
      expect(created.category).toBe(CaseCategory.CUSTOM);
      expect(created.difficulty).toBe(DifficultyLevel.INTERMEDIATE);
      expect(created.isPublic).toBe(true);
      expect(created.isCertified).toBe(false);
    });

    it('应该创建带有自定义评分标准的案例', async () => {
      const caseData = {
        title: '复杂案例',
        description: '带有自定义评分标准',
        category: CaseCategory.PROBLEM_SOLVING,
        difficulty: DifficultyLevel.ADVANCED,
        scenario: {
          context: '复杂问题场景',
          task: '解决问题',
          input: '问题输入',
          constraints: ['约束1', '约束2'],
        },
        expected: {
          type: 'criteria' as const,
          criteria: ['标准1', '标准2'],
          examples: ['示例答案1', '示例答案2'],
        },
        scoring: {
          accuracy: 30,
          completeness: 30,
          creativity: 20,
          efficiency: 20,
          customCriteria: [
            { name: '安全性', weight: 20, description: '代码安全性评估' },
            { name: '可维护性', weight: 15, description: '代码可维护性' },
          ],
        },
        author: {
          name: 'Expert',
          expertise: 'Security',
          reputation: 95,
        },
      };

      const created = await manager.createCase(caseData);

      expect(created.scenario.constraints).toEqual(['约束1', '约束2']);
      expect(created.expected.examples).toEqual(['示例答案1', '示例答案2']);
      expect(created.scoring.customCriteria).toHaveLength(2);
      expect(created.author.reputation).toBe(95);
    });
  });

  describe('查询案例', () => {
    beforeEach(async () => {
      // 创建测试数据
      await manager.createCase({
        title: '代码生成案例1',
        category: CaseCategory.CODE_GENERATION,
        difficulty: DifficultyLevel.BEGINNER,
        author: { name: 'Author A' },
      });

      await manager.createCase({
        title: '逻辑推理案例1',
        category: CaseCategory.LOGICAL_REASONING,
        difficulty: DifficultyLevel.INTERMEDIATE,
        author: { name: 'Author B' },
      });

      await manager.createCase({
        title: '代码生成案例2',
        category: CaseCategory.CODE_GENERATION,
        difficulty: DifficultyLevel.ADVANCED,
        author: { name: 'Author A' },
      });
    });

    it('应该获取所有案例', async () => {
      const cases = await manager.getCases();
      expect(cases.length).toBe(3);
    });

    it('应该按类别筛选案例', async () => {
      const cases = await manager.getCases({
        category: CaseCategory.CODE_GENERATION,
      });
      
      expect(cases.length).toBe(2);
      expect(cases.every(c => c.category === CaseCategory.CODE_GENERATION)).toBe(true);
    });

    it('应该按难度筛选案例', async () => {
      const cases = await manager.getCases({
        difficulty: DifficultyLevel.BEGINNER,
      });
      
      expect(cases.length).toBe(1);
      expect(cases[0]?.difficulty).toBe(DifficultyLevel.BEGINNER);
    });

    it('应该按作者筛选案例', async () => {
      const cases = await manager.getCases({
        author: 'Author A',
      });
      
      expect(cases.length).toBe(2);
      expect(cases.every(c => c.author.name === 'Author A')).toBe(true);
    });

    it('应该组合多个筛选条件', async () => {
      const cases = await manager.getCases({
        category: CaseCategory.CODE_GENERATION,
        difficulty: DifficultyLevel.BEGINNER,
      });
      
      expect(cases.length).toBe(1);
      expect(cases[0]?.title).toBe('代码生成案例1');
    });
  });

  describe('根据ID获取案例', () => {
    it('应该根据ID获取案例', async () => {
      const created = await manager.createCase({
        title: '测试案例',
        category: CaseCategory.TEXT_ANALYSIS,
      });

      const found = await manager.getCaseById(created.id);
      
      expect(found).not.toBeNull();
      expect(found?.id).toBe(created.id);
      expect(found?.title).toBe('测试案例');
    });

    it('不存在的ID应返回null', async () => {
      const found = await manager.getCaseById('nonexistent');
      expect(found).toBeNull();
    });
  });

  describe('更新案例', () => {
    let testCase: ValidationCase;

    beforeEach(async () => {
      testCase = await manager.createCase({
        title: '原始标题',
        description: '原始描述',
        tags: ['tag1', 'tag2'],
        isPublic: true,
      });
    });

    it('应该更新案例标题', async () => {
      const updated = await manager.updateCase(testCase.id, {
        title: '新标题',
      });

      expect(updated.title).toBe('新标题');
      expect(updated.description).toBe('原始描述'); // 其他字段不变
    });

    it('应该更新案例描述', async () => {
      const updated = await manager.updateCase(testCase.id, {
        description: '新描述',
      });

      expect(updated.description).toBe('新描述');
    });

    it('应该更新标签', async () => {
      const updated = await manager.updateCase(testCase.id, {
        tags: ['新标签1', '新标签2', '新标签3'],
      });

      expect(updated.tags).toEqual(['新标签1', '新标签2', '新标签3']);
    });

    it('应该更新公开状态', async () => {
      const updated = await manager.updateCase(testCase.id, {
        isPublic: false,
      });

      expect(updated.isPublic).toBe(false);
    });

    it('应该更新认证状态', async () => {
      const updated = await manager.updateCase(testCase.id, {
        isCertified: true,
      });

      expect(updated.isCertified).toBe(true);
    });

    it('更新不存在的案例应抛出错误', async () => {
      await expect(
        manager.updateCase('nonexistent', { title: '新标题' })
      ).rejects.toThrow();
    });
  });

  describe('删除案例', () => {
    it('应该成功删除案例', async () => {
      const created = await manager.createCase({
        title: '待删除案例',
      });

      await manager.deleteCase(created.id);

      const found = await manager.getCaseById(created.id);
      expect(found).toBeNull();
    });

    it('删除不存在的案例应抛出错误', async () => {
      await expect(
        manager.deleteCase('nonexistent')
      ).rejects.toThrow();
    });
  });

  describe('案例执行记录', () => {
    it('应该能获取案例的执行记录', async () => {
      const created = await manager.createCase({
        title: '测试案例',
      });

      const executions = await manager.getCaseExecutions(created.id);
      expect(executions).toEqual([]);
    });
  });
});
